import React, { useState, useRef, useEffect } from 'react';
import GlassCard from '../../../features/shared/components/ui/GlassCard';
import GlassButton from '../../../features/shared/components/ui/GlassButton';

import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { SimpleBackButton as BackButton } from '../../../features/shared/components/ui/SimpleBackButton';
import { ArrowLeft, User, Smartphone, Tag, Layers, Hash, FileText, DollarSign, Key, Phone, Mail, MapPin, Calendar, Clock, ChevronDown, Battery, Camera as CameraIcon, Wifi, Bluetooth, Plug, Volume2, Mic, Speaker, Vibrate, Cpu, HardDrive, Droplet, Shield, Wrench, AlertTriangle as AlertIcon, Eye, Edit, MessageCircle, Users, Star, UserPlus } from 'lucide-react';
import { supabase } from '../../../lib/supabaseClient';
import Modal from '../../../features/shared/components/ui/Modal';
import { useCustomers } from '../../../context/CustomersContext';
import AddCustomerModal from '../../../features/customers/components/forms/AddCustomerModal';
import { useDevices } from '../../../context/DevicesContext';
import { DeviceStatus } from '../../../types';
import CountdownTimer from '../../../features/shared/components/ui/CountdownTimer';
import { useAuth } from '../../../context/AuthContext';
import deviceModels from '../../../data/deviceModels';
import ModelSuggestionInput from '../../../features/shared/components/ui/ModelSuggestionInput';
import BrandSuggestionInput from '../../../features/shared/components/ui/BrandSuggestionInput';
import ConditionAssessment from '../components/ConditionAssessment';
import DeviceQRCodePrint from '../components/DeviceQRCodePrint';
import { smsService } from '../../../services/smsService';
import { SoundManager } from '../../../lib/soundUtils';
import { useDraftForm } from '../../../lib/useDraftForm';
import { saveActionOffline } from '../../../lib/offlineSync';
import { whatsappService } from '../../../services/whatsappService';


const COMMON_MODELS = {
  'Apple': ['iPhone 15', 'iPhone 14', 'iPhone 13', 'iPhone 12', 'iPhone 11', 'iPhone X', 'iPhone 8', 'iPhone 7', 'iPhone 6'],
  'Samsung': ['Galaxy S24', 'Galaxy S23', 'Galaxy S22', 'Galaxy S21', 'Galaxy Note', 'Galaxy A', 'Galaxy M'],
  'Huawei': ['P40', 'P30', 'Mate 40', 'Mate 30', 'Nova', 'Y Series'],
  'Xiaomi': ['Mi 13', 'Mi 12', 'Redmi Note', 'POCO', 'Mi A'],
  'OnePlus': ['OnePlus 11', 'OnePlus 10', 'OnePlus 9', 'OnePlus 8', 'OnePlus 7'],
  'Google': ['Pixel 8', 'Pixel 7', 'Pixel 6', 'Pixel 5', 'Pixel 4'],
  'Sony': ['Xperia 1', 'Xperia 5', 'Xperia 10'],
  'LG': ['G Series', 'V Series', 'K Series'],
  'Motorola': ['Edge', 'G Power', 'One', 'Razr'],
  'Nokia': ['G Series', 'X Series', 'C Series']
};

const initialForm = {
  brand: '',
  model: '',
  serialNumber: '',
  issueDescription: '',
  repairCost: '',
  depositAmount: '',
  diagnosisRequired: false,
  expectedReturnDate: new Date().toISOString().split('T')[0], // default to today
  unlockCode: '',
  deviceNotes: '',
  deviceCost: '',
  assignedTo: '', // Add assignedTo to form state
};


type DeviceConditionKey = 'screenCracked' | 'backCoverDamaged' | 'waterDamage' | 'noPower' | 'buttonsNotWorking' | 'other';
const conditionOptions: { key: DeviceConditionKey | 'otherText'; label: string }[] = [
  { key: 'other', label: 'Condition Assessment' },
];


const DeviceIntakeUnifiedPage: React.FC = () => {
  // All state variables and refs
  const [formData, setFormData] = useState(initialForm);
  const [isLoading, setIsLoading] = useState(false);
  const [deviceImages, setDeviceImages] = useState<string[]>([]);
  const [showModelSuggestions, setShowModelSuggestions] = useState(false);
  const [showBrandSuggestions, setShowBrandSuggestions] = useState(false);
  const navigate = useNavigate();
  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const { customers } = useCustomers();
  const [customerSearch, setCustomerSearch] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [filteredCustomers, setFilteredCustomers] = useState<any[]>([]);
  const customerInputRef = useRef<HTMLInputElement>(null);
  const [recentDevices, setRecentDevices] = useState<any[]>([]);
  const [loadingDevices, setLoadingDevices] = useState(false);
  const [showAllRepairs, setShowAllRepairs] = useState(false);
  const [cardVisible, setCardVisible] = useState(true);
  const [imeiOrSerial, setImeiOrSerial] = useState("");
  const [isReviewing, setIsReviewing] = useState(false);
  const [confirmAccessories, setConfirmAccessories] = useState(false);
  const [confirmProblem, setConfirmProblem] = useState(false);
  const [confirmPrivacy, setConfirmPrivacy] = useState(false);
  const [duplicateDevice, setDuplicateDevice] = useState<null | { found: boolean; info?: string }>(null);
  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);
  const [deviceCondition, setDeviceCondition] = useState<Record<DeviceConditionKey, boolean> & { otherText: string}>(
    {
      screenCracked: false,
      backCoverDamaged: false,
      waterDamage: false,
      noPower: false,
      buttonsNotWorking: false,
      other: false,
      otherText: '',
    }
  );
  const [showNoteModal, setShowNoteModal] = useState(false);
  const [note, setNote] = useState('');

  // New state for inline customer creation
  const [showCreateCustomer, setShowCreateCustomer] = useState(false);
  const [newCustomerData, setNewCustomerData] = useState({
    name: '',
    phone: '',
    email: '',
    city: '',
    gender: '',
    loyaltyLevel: 'bronze',
                colorTag: 'new'
  });
  const [creatingCustomer, setCreatingCustomer] = useState(false);

  const [showDeviceNotes, setShowDeviceNotes] = useState(false);
  const [showPartDetails, setShowPartDetails] = useState<any>(null);
  const [showDepositField, setShowDepositField] = useState(false);
  const [fieldErrors, setFieldErrors] = useState<{ [key: string]: boolean }>({});
  const { addDevice } = useDevices();
  const { currentUser } = useAuth();
  const [technicians, setTechnicians] = useState<any[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const modelInputRef = useRef<HTMLInputElement>(null);
  const modelDropdownRef = useRef<HTMLDivElement>(null);
  const [offlineSuccess, setOfflineSuccess] = useState(false);
  const qrPrintRef = useRef<HTMLDivElement>(null);

  // Redirect technicians away from this page
  useEffect(() => {
    if (currentUser && currentUser.role === 'technician') {
      navigate('/dashboard');
    }
  }, [currentUser, navigate]);

  // Add state for completion option
  const [completionOption, setCompletionOption] = useState('same_day'); // default to Same Day
  const completionOptions = [
    { label: 'Same Day', value: 'same_day', days: 0 },
    { label: '2 Days', value: '2_days', days: 2 },
    { label: '3 Days', value: '3_days', days: 3 },
    { label: '1 Week', value: '1_week', days: 7 },
    { label: 'Custom', value: 'custom', days: null },
  ];

  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  // Close dropdown on outside click
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      const dropdown = document.querySelector('[data-dropdown="completion"]');
      if (dropdown && !dropdown.contains(event.target as Node)) {
        setDropdownOpen(false);
      }
    }
    if (dropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [dropdownOpen]);
  
  const optionIcons = {
    same_day: <Clock size={20} className="text-blue-500" />,
    '2_days': <Calendar size={20} className="text-green-500" />,
    '3_days': <Calendar size={20} className="text-yellow-500" />,
    '1_week': <Calendar size={20} className="text-purple-500" />,
    custom: <Calendar size={20} className="text-gray-400" />,
  };



  const handleDropdownSelect = (value: string) => {
    setCompletionOption(value);
    setDropdownOpen(false);
    if (value !== 'custom') {
      const option = completionOptions.find(opt => opt.value === value);
      if (option && option.days !== null) {
        const now = new Date();
        // If 'same_day', set to 24 hours from now (tomorrow)
        const date = option.value === 'same_day'
          ? new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1)
          : new Date(now.getFullYear(), now.getMonth(), now.getDate() + (option.days || 0));
        setFormData(prev => ({
          ...prev,
          expectedReturnDate: date.toISOString().split('T')[0],
        }));
      }
    }
  };

  // Fetch technicians from auth_users
  useEffect(() => {
    // Fetch technicians from auth_users
    const fetchTechnicians = async () => {
      const { data, error } = await supabase
        .from('auth_users')
        .select('id, name, email')
        .eq('role', 'technician');
      if (!error && data) setTechnicians(data);
    };
    fetchTechnicians();
  }, []);

  // Debounce customer search
  useEffect(() => {
    if (!customerSearch.trim()) {
      setFilteredCustomers([]);
      return;
    }
    const timeout = setTimeout(() => {
      const filtered = customers.filter(c =>
        c.name.toLowerCase().includes(customerSearch.toLowerCase()) ||
        (c.phone && c.phone.includes(customerSearch))
      );
      setFilteredCustomers(filtered);
    }, 200);
    return () => clearTimeout(timeout);
  }, [customerSearch, customers]);

  // Hide suggestions on outside click
  useEffect(() => {
    const handleClick = (e: MouseEvent) => {
      if (customerInputRef.current && !customerInputRef.current.contains(e.target as Node)) {
        setShowSuggestions(false);
      }
    };
    document.addEventListener('mousedown', handleClick);
    return () => document.removeEventListener('mousedown', handleClick);
  }, []);

  // Close model suggestions on outside click
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        modelInputRef.current &&
        !modelInputRef.current.contains(event.target as Node) &&
        modelDropdownRef.current &&
        !modelDropdownRef.current.contains(event.target as Node)
      ) {
        setShowModelSuggestions(false);
      }
    }
    if (showModelSuggestions) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showModelSuggestions]);

  // Handlers (examples, not full):
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    let newValue = type === 'checkbox' && 'checked' in e.target ? (e.target as HTMLInputElement).checked : value;
    // Fix: For number fields, strip commas and only allow valid numbers
    if (name === 'repairCost' || name === 'depositAmount') {
      // Remove commas
      const cleaned = value.replace(/,/g, '');
      // Only set if valid number or empty
      if (cleaned === '' || /^\d+(\.\d{0,2})?$/.test(cleaned)) {
        newValue = cleaned;
      } else {
        // Ignore invalid input
        return;
      }
    }
    setFormData(prev => ({ ...prev, [name]: newValue }));
  };

  // Helper to count words
  const countWords = (text: string) => text.trim().split(/\s+/).filter(Boolean).length;
  const minIssueWords = 5;
  const isIssueDescriptionValid = countWords(formData.issueDescription) >= minIssueWords;
  const [issueDescriptionTouched, setIssueDescriptionTouched] = useState(false);

  // Customer creation function
  const handleCreateCustomer = async () => {
    if (!newCustomerData.name.trim() || !newCustomerData.phone.trim()) {
      toast.error('Name and phone number are required');
      return;
    }

    setCreatingCustomer(true);
    try {
      const { data, error } = await supabase
        .from('customers')
        .insert([{
          name: newCustomerData.name.trim(),
          phone: newCustomerData.phone.trim(),
          email: newCustomerData.email.trim() || null,
          city: newCustomerData.city.trim() || null,
          gender: newCustomerData.gender || null,
          loyaltyLevel: newCustomerData.loyaltyLevel,
          colorTag: newCustomerData.colorTag,
          points: 0,
          totalSpent: 0,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }])
        .select()
        .single();

      if (error) throw error;

      if (data) {
        toast.success('Customer created successfully!');
        setSelectedCustomer(data);
        setShowCreateCustomer(false);
        setNewCustomerData({
          name: '',
          phone: '',
          email: '',
          city: '',
          gender: '',
          loyaltyLevel: 'bronze',
          colorTag: 'new'
        });
        // Clear form for new customer - will be auto-loaded from draft if exists
        setFormData(initialForm);
        setSelectedConditions([]);
        setOtherConditionText('');
        // Refresh customers list
        // Note: This would ideally trigger a refresh of the customers context
      }
    } catch (error: any) {
      toast.error(`Error creating customer: ${error.message}`);
    } finally {
      setCreatingCustomer(false);
    }
  };

  // Enhanced IMEI/Serial Number validation
  const validateImeiOrSerial = (value: string): { isValid: boolean; error?: string } => {
    const cleaned = value.replace(/\D/g, '');
    
    // Check if empty
    if (!value.trim()) {
      return { isValid: false, error: 'IMEI or Serial Number is required' };
    }
    
    // For alphanumeric serial numbers, check if it has a reasonable mix
    const totalLength = value.replace(/\s/g, '').length;
    const digitCount = cleaned.length;
    const letterCount = totalLength - digitCount;
    
    // If it's mostly letters (like "G9566RL4YC"), it's likely a valid alphanumeric serial
    if (letterCount > digitCount && totalLength >= 8) {
      // Allow alphanumeric serials with more letters than digits
      return { isValid: true };
    }
    
    // Also allow mixed alphanumeric serials with reasonable length
    if (totalLength >= 8 && digitCount >= 2 && letterCount >= 2) {
      return { isValid: true };
    }
    
    // For IMEI-style numbers, check minimum length (12 digits)
    if (digitCount < 12 && letterCount === 0) {
      return { isValid: false, error: 'IMEI or Serial Number must be at least 12 digits' };
    }
    
    // Check maximum length (IMEI is 15 digits, some serials can be longer)
    if (digitCount > 20) {
      return { isValid: false, error: 'IMEI or Serial Number is too long' };
    }
    
    // Prevent common model names and patterns
    const lowerValue = value.toLowerCase();
    const modelPatterns = [
      'iphone', 'galaxy', 'pixel', 'oneplus', 'huawei', 'xiaomi', 'samsung', 'apple',
      'note', 'plus', 'pro', 'max', 'ultra', 'mini', 'lite', 'neo', 'fe',
      'a series', 's series', 'm series', 'c series', 'g series', 'x series'
    ];
    
    // Check if input contains model name patterns
    for (const pattern of modelPatterns) {
      if (lowerValue.includes(pattern)) {
        return { isValid: false, error: 'Please enter the actual IMEI or Serial Number, not the model name' };
      }
    }
    
    // Check for common model number patterns (like "iPhone 15", "Galaxy S24")
    const modelNumberPatterns = [
      /\b(iphone|galaxy|pixel|oneplus|huawei|xiaomi)\s+\d+/i,
      /\b(s|a|m|c|g|x)\s*\d+/i,
      /\b(pro|max|ultra|mini|lite|neo|fe)\b/i
    ];
    
    for (const pattern of modelNumberPatterns) {
      if (pattern.test(value)) {
        return { isValid: false, error: 'Please enter the actual IMEI or Serial Number, not the model name' };
      }
    }
    
    // Check if it looks like a model description rather than IMEI/Serial
    if (value.split(' ').length > 2) {
      return { isValid: false, error: 'Please enter the actual IMEI or Serial Number, not a description' };
    }
    
    // For IMEI-style numbers, ensure they're mostly digits
    if (digitCount >= 12 && digitCount / totalLength >= 0.8) {
      return { isValid: true };
    }
    
    // If it doesn't meet either criteria, it might be invalid
    if (totalLength < 8) {
      return { isValid: false, error: 'IMEI or Serial Number is too short' };
    }
    
    // Allow any reasonable alphanumeric serial (8+ characters with mix of letters and digits)
    if (totalLength >= 8 && digitCount > 0 && letterCount > 0) {
      return { isValid: true };
    }
    
    // Check for common mistakes like "N/A", "Unknown", "Not available"
    const commonMistakes = ['n/a', 'na', 'unknown', 'not available', 'none', 'n/a', 'tbd', 'pending'];
    if (commonMistakes.includes(lowerValue)) {
      return { isValid: false, error: 'Please enter the actual IMEI or Serial Number from the device' };
    }
    
    // Check for repeated patterns that might indicate fake input
    const repeatedPatterns = /(\d)\1{5,}/; // 6 or more repeated digits
    if (repeatedPatterns.test(cleaned)) {
      return { isValid: false, error: 'IMEI or Serial Number appears to be invalid (repeated digits)' };
    }
    
    return { isValid: true };
  };

  const validateForm = () => {
    const errors: { [key: string]: boolean } = {};
    let valid = true;
    if (!formData.brand.trim()) {
      errors.brand = true;
      valid = false;
    }
    if (!formData.model.trim()) {
      errors.model = true;
      valid = false;
    }
    
    // Enhanced IMEI/Serial validation
    const imeiValidation = validateImeiOrSerial(imeiOrSerial);
    if (!imeiValidation.isValid) {
      errors.imeiOrSerial = true;
      valid = false;
    }
    
    if (!formData.issueDescription.trim() || !isIssueDescriptionValid) {
      errors.issueDescription = true;
      valid = false;
    }
    if (!formData.assignedTo) {
      errors.assignedTo = true;
      valid = false;
    }
    // Require at least one condition assessment
    const anyCondition = Object.values(deviceCondition).some(v => v) || selectedConditions.length > 0 || !!otherConditionText.trim();
    if (!anyCondition) {
      errors.conditionAssessment = true;
      valid = false;
    }
    setFieldErrors(errors);
    return valid;
  };

  // ... more handlers and helpers as needed ...

  // New condition assessment state
  const [showConditionAssessment, setShowConditionAssessment] = useState(false);
  const [selectedConditions, setSelectedConditions] = useState<string[]>([]);
  const [otherConditionText, setOtherConditionText] = useState('');
  
  // QR Code print state
  const [showQRPrint, setShowQRPrint] = useState(false);
  const [submittedDevice, setSubmittedDevice] = useState<any>(null);

  // Add a step state to control which step is shown
  const [step, setStep] = useState<'form' | 'review'>('form');

  const MODEL_LOGOS_STORAGE_KEY = 'custom_model_logos';
  function getModelLogos() {
    const stored = localStorage.getItem(MODEL_LOGOS_STORAGE_KEY);
    if (stored) return JSON.parse(stored);
    return {};
  }
  const [modelLogos, setModelLogos] = useState(getModelLogos());
  useEffect(() => {
    const handleStorage = () => setModelLogos(getModelLogos());
    window.addEventListener('storage', handleStorage);
    return () => window.removeEventListener('storage', handleStorage);
  }, []);

  // Draft-saving hook for device intake form - customer-specific
  const draftKey = selectedCustomer 
    ? `device_intake_form_draft_${selectedCustomer.id}` 
    : 'device_intake_form_draft_no_customer';
  
  const { clearDraft } = useDraftForm({
    key: draftKey,
    formData,
    setFormData,
    clearOnSubmit: true,
    submitted: isSubmitting && !isLoading,
  });

  // Clear form when customer changes
  useEffect(() => {
    if (selectedCustomer) {
      // Form will be auto-loaded from draft for this customer
      setSelectedConditions([]);
      setOtherConditionText('');
    } else {
      // Clear form when no customer is selected
      setFormData(initialForm);
      setSelectedConditions([]);
      setOtherConditionText('');
      clearDraft();
    }
  }, [selectedCustomer?.id]); // Only trigger when customer ID changes

  // Auto-save indicator state
  const [showAutoSave, setShowAutoSave] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);

  // Show auto-save indicator when form data changes
  useEffect(() => {
    if (Object.values(formData).some(val => val !== '')) {
      setShowAutoSave(true);
      const timer = setTimeout(() => {
        setShowAutoSave(false);
        setLastSaved(new Date());
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [formData]);

  // Calculate form completion percentage
  const getFormCompletion = () => {
    const requiredFields = [
      selectedCustomer ? 1 : 0,
      formData.brand ? 1 : 0,
      formData.model ? 1 : 0,
      imeiOrSerial ? 1 : 0,
      formData.assignedTo ? 1 : 0,
      formData.issueDescription ? 1 : 0,
      (selectedConditions.length > 0 || otherConditionText.trim()) ? 1 : 0
    ];
    return Math.round((requiredFields.reduce((a, b) => a + b, 0) / requiredFields.length) * 100);
  };

  const completionPercentage = getFormCompletion();

  const [customerCardMinimized, setCustomerCardMinimized] = useState(false);

  return (
    <div className="p-4 sm:p-6 h-full overflow-y-auto pt-8">
      <div className="max-w-4xl mx-auto space-y-4 sm:space-y-6">
        {/* Progress Indicator */}
        <div className="bg-white/50 backdrop-blur-md rounded-xl p-4 border border-gray-200">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-4">
              <BackButton to="/dashboard" />
              <div>
                <h2 className="text-lg font-semibold text-gray-900">Device Intake Form</h2>
                <div className="text-sm text-gray-600">
                  {selectedCustomer ? 'Customer Selected' : 'Customer Required'}
                </div>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className={`flex items-center space-x-2 ${selectedCustomer ? 'text-green-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${selectedCustomer ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-500'}`}>
                {selectedCustomer ? (
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <User size={16} />
                )}
              </div>
              <span className="text-sm font-medium">Customer</span>
            </div>
            
            <div className="flex-1 h-1 bg-gray-200 rounded">
              <div className={`h-1 rounded transition-all duration-300 ${selectedCustomer ? 'bg-green-500' : 'bg-gray-200'}`} style={{ width: selectedCustomer ? '100%' : '0%' }}></div>
            </div>
            
            <div className={`flex items-center space-x-2 ${formData.brand && formData.model && imeiOrSerial ? 'text-green-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${formData.brand && formData.model && imeiOrSerial ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-500'}`}>
                {formData.brand && formData.model && imeiOrSerial ? (
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <Smartphone size={16} />
                )}
              </div>
              <span className="text-sm font-medium">Device</span>
            </div>
            
            <div className="flex-1 h-1 bg-gray-200 rounded">
              <div className={`h-1 rounded transition-all duration-300 ${formData.brand && formData.model && imeiOrSerial ? 'bg-green-500' : 'bg-gray-200'}`} style={{ width: formData.brand && formData.model && imeiOrSerial ? '100%' : '0%' }}></div>
            </div>
            
            <div className={`flex items-center space-x-2 ${formData.assignedTo ? 'text-green-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${formData.assignedTo ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-500'}`}>
                {formData.assignedTo ? (
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <Wrench size={16} />
                )}
              </div>
              <span className="text-sm font-medium">Technician</span>
            </div>
          </div>
          
          {/* Completion Status */}
          <div className="mt-3 text-xs text-gray-500">
            {selectedCustomer && formData.brand && formData.model && imeiOrSerial && formData.assignedTo ? (
              <span className="text-green-600 font-medium">✓ Ready to submit</span>
            ) : (
              <span>Complete all sections to submit</span>
            )}
          </div>
          
          {/* Auto-save indicator */}
          {showAutoSave && (
            <div className="mt-2 flex items-center gap-2 text-xs text-blue-600">
              <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
              <span>Saving draft...</span>
            </div>
          )}
          
          {lastSaved && !showAutoSave && (
            <div className="mt-2 flex items-center gap-2 text-xs text-gray-500">
              <svg width="12" height="12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <span>Last saved: {lastSaved.toLocaleTimeString()}</span>
            </div>
          )}
          
          {/* Completion percentage */}
          <div className="mt-2">
            <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
              <span>Form completion</span>
              <span>{completionPercentage}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-1">
              <div 
                className="bg-blue-500 h-1 rounded-full transition-all duration-300" 
                style={{ width: `${completionPercentage}%` }}
              ></div>
            </div>
          </div>
        </div>

        {/* Quick Actions Panel */}
        {completionPercentage >= 80 && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-semibold text-blue-900">Quick Actions</h4>
              <span className="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                {completionPercentage}% Complete
              </span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <button
                type="button"
                onClick={() => setShowConditionAssessment(true)}
                className="flex items-center gap-2 p-3 bg-white rounded-lg border border-blue-200 hover:bg-blue-50 transition-colors"
              >
                <AlertIcon size={16} className="text-orange-500" />
                <span className="text-sm font-medium">Add Device Issues</span>
              </button>
              
              <button
                type="button"
                onClick={() => {
                  if (selectedCustomer) {
                    // Open WhatsApp with pre-filled message
                    const message = `Hi ${selectedCustomer.name}, we've received your device for repair. We'll keep you updated on the progress.`;
                    window.open(`https://wa.me/${selectedCustomer.phone.replace(/\D/g, '')}?text=${encodeURIComponent(message)}`, '_blank');
                  }
                }}
                disabled={!selectedCustomer}
                className="flex items-center gap-2 p-3 bg-white rounded-lg border border-blue-200 hover:bg-blue-50 transition-colors disabled:opacity-50"
              >
                <MessageCircle size={16} className="text-green-500" />
                <span className="text-sm font-medium">Send WhatsApp</span>
              </button>
              
              <button
                type="button"
                onClick={() => {
                  setSubmittedDevice({
                    id: `preview-${Date.now()}`,
                    brand: formData.brand,
                    model: formData.model,
                    serialNumber: imeiOrSerial,
                    unlockCode: formData.unlockCode,
                    customerName: selectedCustomer?.name,
                    phoneNumber: selectedCustomer?.phone,
                    expectedReturnDate: formData.expectedReturnDate,
                    status: 'assigned' as DeviceStatus,
                    issueDescription: formData.issueDescription,
                    conditions: selectedConditions,
                    otherText: otherConditionText
                  });
                  setShowQRPrint(true);
                }}
                disabled={!formData.brand || !formData.model || !imeiOrSerial}
                className="flex items-center gap-2 p-3 bg-white rounded-lg border border-blue-200 hover:bg-blue-50 transition-colors disabled:opacity-50"
              >
                <Smartphone size={16} className="text-purple-500" />
                <span className="text-sm font-medium">Print QR Code</span>
              </button>
            </div>
          </div>
        )}

        {!submittedDevice && (
        <GlassCard className="mb-6">
          {/* Unified Customer and Device Form */}
          <div className="space-y-6">
            {/* Customer Section */}
            <div className="border-b border-gray-200 pb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <User size={20} className="text-blue-600" />
                Customer Information
              </h3>
              
              {!selectedCustomer ? (
                <div className="space-y-4">
                  <label className="block text-gray-700 mb-3 font-semibold">Search Customer</label>
                  <div className="flex items-center gap-3">
                    <div className="relative flex-1">
                      <input
                        type="text"
                        value={customerSearch}
                        onChange={e => {
                          setCustomerSearch(e.target.value);
                          setShowSuggestions(true);
                        }}
                        onFocus={() => setShowSuggestions(true)}
                        className="w-full py-3 pl-10 pr-4 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        placeholder="Type name or phone..."
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck={false}
                      />
                      <User className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                      {showSuggestions && (
                        <div className="w-full bg-white/95 backdrop-blur-md border border-gray-300 rounded-lg shadow-xl mb-4">
                          {filteredCustomers.length > 0 ? (
                            <div className="overflow-x-auto">
                              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                                <span className="text-sm text-gray-600">{filteredCustomers.length} customer(s) found</span>
                                <button
                                  type="button"
                                  onClick={() => setShowCreateCustomer(!showCreateCustomer)}
                                  className="text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center gap-1"
                                >
                                  <UserPlus size={14} />
                                  {showCreateCustomer ? 'Cancel' : 'Create New Customer'}
                                </button>
                              </div>
                              
                              {showCreateCustomer && (
                                <div className="p-4 bg-gray-50 border-b border-gray-200">
                                  <h4 className="font-semibold text-gray-900 mb-3">Create New Customer</h4>
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                    <div>
                                      <label className="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                                      <input
                                        type="text"
                                        value={newCustomerData.name}
                                        onChange={e => setNewCustomerData(prev => ({ ...prev, name: e.target.value }))}
                                        className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                        placeholder="Enter customer name"
                                      />
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-700 mb-1">Phone *</label>
                                      <input
                                        type="tel"
                                        value={newCustomerData.phone}
                                        onChange={e => setNewCustomerData(prev => ({ ...prev, phone: e.target.value }))}
                                        className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                        placeholder="Enter phone number"
                                      />
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                      <input
                                        type="email"
                                        value={newCustomerData.email}
                                        onChange={e => setNewCustomerData(prev => ({ ...prev, email: e.target.value }))}
                                        className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                        placeholder="Enter email (optional)"
                                      />
                                    </div>
                                    <div>
                                      <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                                      <input
                                        type="text"
                                        value={newCustomerData.city}
                                        onChange={e => setNewCustomerData(prev => ({ ...prev, city: e.target.value }))}
                                        className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                        placeholder="Enter city (optional)"
                                      />
                                    </div>
                                  </div>
                                  
                                  <div className="flex gap-4">
                                    <button
                                      type="button"
                                      onClick={handleCreateCustomer}
                                      disabled={creatingCustomer || !newCustomerData.name.trim() || !newCustomerData.phone.trim()}
                                      className="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                      {creatingCustomer ? 'Creating...' : 'Create Customer'}
                                    </button>
                                    <button
                                      type="button"
                                      onClick={() => setShowCreateCustomer(false)}
                                      className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300"
                                    >
                                      Cancel
                                    </button>
                                  </div>
                                </div>
                              )}
                              
                              <table className="w-full">
                                <thead>
                                  <tr className="border-b border-gray-200/50">
                                    <th className="text-left py-3 px-4 font-medium text-gray-700"> </th>
                                    <th className="text-left py-3 px-4 font-medium text-gray-700">Customer</th>
                                    <th className="text-left py-3 px-4 font-medium text-gray-700">Contact</th>
                                    <th className="text-right py-3 px-4 font-medium text-gray-700">Points</th>
                                    <th className="text-center py-3 px-4 font-medium text-gray-700">Loyalty</th>
                                    <th className="text-center py-3 px-4 font-medium text-gray-700">Tag</th>
                                    <th className="text-center py-3 px-4 font-medium text-gray-700">Actions</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {filteredCustomers.map(c => (
                                    <tr
                                      key={c.id}
                                      className="border-b border-gray-200/30 hover:bg-white/30 transition-colors cursor-pointer"
                                      onClick={() => {
                                        setSelectedCustomer(c);
                                        setCardVisible(true);
                                        setCustomerSearch('');
                                        setShowSuggestions(false);
                                        // Form will be auto-loaded from draft for this customer
                                      }}
                                    >
                                      <td className="py-3 px-4">
                                        <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-semibold">
                                          {c.name.charAt(0)}
                                        </div>
                                      </td>
                                      <td className="py-3 px-4">
                                        <div>
                                          <p className="font-medium text-gray-900">{c.name}</p>
                                          <p className="text-sm text-gray-600">{c.city}</p>
                                        </div>
                                      </td>
                                      <td className="py-3 px-4">
                                        <div className="space-y-1">
                                          <div className="flex items-center gap-1 text-sm">
                                            <Phone className="w-3 h-3 text-gray-500" />
                                            <span className="text-gray-900">{c.phone}</span>
                                          </div>
                                          {c.email && (
                                            <div className="flex items-center gap-1 text-sm">
                                              <Mail className="w-3 h-3 text-gray-500" />
                                              <span className="text-gray-600">{c.email}</span>
                                            </div>
                                          )}
                                        </div>
                                      </td>
                                      <td className="py-3 px-4 text-right">
                                        <span className="text-gray-900 font-semibold">{c.points}</span>
                                      </td>
                                      <td className="py-3 px-4 text-center">
                                        <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm border ${c.loyaltyLevel === 'platinum' ? 'bg-purple-500/20 text-purple-700 border-purple-300/30' : c.loyaltyLevel === 'gold' ? 'bg-amber-500/20 text-amber-700 border-amber-300/30' : c.loyaltyLevel === 'silver' ? 'bg-gray-400/20 text-gray-700 border-gray-300/30' : 'bg-orange-500/20 text-orange-700 border-orange-300/30'}`}>
                                          <Star size={14} />
                                          <span className="capitalize">{c.loyaltyLevel}</span>
                                        </div>
                                      </td>
                                      <td className="py-3 px-4 text-center">
                                                                              <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm border ${c.colorTag === 'vip' ? 'bg-emerald-500/20 text-emerald-700 border-emerald-300/30' : c.colorTag === 'complainer' ? 'bg-rose-500/20 text-rose-700 border-rose-300/30' : c.colorTag === 'purchased' ? 'bg-blue-500/20 text-blue-700 border-blue-300/30' : c.colorTag === 'new' ? 'bg-purple-500/20 text-purple-700 border-purple-300/30' : 'bg-gray-500/20 text-gray-700 border-gray-300/30'}`}>
                                        {c.colorTag}
                                      </div>
                                      </td>
                                      <td className="py-3 px-4 text-center">
                                        <div className="flex items-center justify-center gap-2">
                                          <button
                                            type="button"
                                            onClick={e => { e.stopPropagation(); }}
                                            className="p-1 text-gray-500 hover:text-blue-600 transition-colors"
                                            title="View Details"
                                          >
                                            <Eye size={16} />
                                          </button>
                                          <button
                                            type="button"
                                            onClick={e => { e.stopPropagation(); }}
                                            className="p-1 text-gray-500 hover:text-green-600 transition-colors"
                                            title="Edit Customer"
                                          >
                                            <Edit size={16} />
                                          </button>
                                          <button
                                            type="button"
                                            onClick={e => { e.stopPropagation(); }}
                                            className="p-1 text-gray-500 hover:text-purple-600 transition-colors"
                                            title="Send Message"
                                          >
                                            <MessageCircle size={16} />
                                          </button>
                                        </div>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          ) : (
                            <div className="p-6">
                              <div className="text-center mb-4">
                                <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                                <h3 className="text-lg font-semibold text-gray-900 mb-2">No customers found</h3>
                                <p className="text-gray-600 mb-4">Try adjusting your search or create a new customer</p>
                              </div>
                              
                              {/* Inline Customer Creation Form */}
                              <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                                <div className="flex items-center justify-between mb-4">
                                  <h4 className="font-semibold text-gray-900">Create New Customer</h4>
                                  <button
                                    type="button"
                                    onClick={() => setShowCreateCustomer(!showCreateCustomer)}
                                    className="text-blue-600 hover:text-blue-700 font-medium text-sm"
                                  >
                                    {showCreateCustomer ? 'Cancel' : 'Add Customer'}
                                  </button>
                                </div>
                                
                                {showCreateCustomer && (
                                  <div className="space-y-4">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                                        <input
                                          type="text"
                                          value={newCustomerData.name}
                                          onChange={e => setNewCustomerData(prev => ({ ...prev, name: e.target.value }))}
                                          className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                          placeholder="Enter customer name"
                                        />
                                      </div>
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone *</label>
                                        <input
                                          type="tel"
                                          value={newCustomerData.phone}
                                          onChange={e => setNewCustomerData(prev => ({ ...prev, phone: e.target.value }))}
                                          className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                          placeholder="Enter phone number"
                                        />
                                      </div>
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                        <input
                                          type="email"
                                          value={newCustomerData.email}
                                          onChange={e => setNewCustomerData(prev => ({ ...prev, email: e.target.value }))}
                                          className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                          placeholder="Enter email (optional)"
                                        />
                                      </div>
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                                        <input
                                          type="text"
                                          value={newCustomerData.city}
                                          onChange={e => setNewCustomerData(prev => ({ ...prev, city: e.target.value }))}
                                          className="w-full py-2 px-3 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                                          placeholder="Enter city (optional)"
                                        />
                                      </div>
                                    </div>
                                    
                                    <div className="flex gap-4">
                                      <button
                                        type="button"
                                        onClick={handleCreateCustomer}
                                        disabled={creatingCustomer || !newCustomerData.name.trim() || !newCustomerData.phone.trim()}
                                        className="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                                      >
                                        {creatingCustomer ? 'Creating...' : 'Create Customer'}
                                      </button>
                                      <button
                                        type="button"
                                        onClick={() => setShowCreateCustomer(false)}
                                        className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300"
                                      >
                                        Cancel
                                      </button>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                    <button
                      type="button"
                      onClick={() => {
                        setShowAddCustomerModal(true);
                      }}
                      className="w-12 h-12 flex items-center justify-center rounded-xl bg-white/30 backdrop-blur border border-gray-200 shadow-md hover:bg-white/50 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400"
                      aria-label="Add new customer"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="text-blue-500">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v12m6-6H6" />
                      </svg>
                    </button>
                  </div>
                </div>
              ) : (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-br from-green-500 to-green-600 flex items-center justify-center text-white font-semibold">
                        {selectedCustomer.name.charAt(0)}
                      </div>
                      <div>
                        <h4 className="font-semibold text-gray-900">{selectedCustomer.name}</h4>
                        <p className="text-sm text-gray-600">{selectedCustomer.phone}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <button
                        type="button"
                        onClick={() => setCustomerCardMinimized(!customerCardMinimized)}
                        className="text-gray-500 hover:text-gray-700 p-1"
                        title={customerCardMinimized ? "Expand" : "Minimize"}
                      >
                        {customerCardMinimized ? (
                          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        ) : (
                          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                          </svg>
                        )}
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          setSelectedCustomer(null);
                          setFormData(initialForm);
                          setSelectedConditions([]);
                          setOtherConditionText('');
                          clearDraft();
                        }}
                        className="text-gray-500 hover:text-gray-700 text-sm"
                      >
                        Change
                      </button>
                    </div>
                  </div>
                  
                  {!customerCardMinimized && (
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-3 border-t border-green-200">
                      <div className="flex items-center gap-2">
                        <Star size={14} className="text-yellow-500" />
                        <div>
                          <p className="text-xs text-gray-500">Loyalty</p>
                          <p className="text-sm font-medium text-gray-900 capitalize">
                            {selectedCustomer.loyaltyLevel || 'Bronze'}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                        <div>
                          <p className="text-xs text-gray-500">Points</p>
                          <p className="text-sm font-medium text-gray-900">
                            {selectedCustomer.points || 0}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <DollarSign size={14} className="text-green-500" />
                        <div>
                          <p className="text-xs text-gray-500">Total Spent</p>
                          <p className="text-sm font-medium text-gray-900">
                            {selectedCustomer.totalSpent ? `Tsh ${selectedCustomer.totalSpent.toLocaleString()}` : 'Tsh 0'}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Calendar size={14} className="text-purple-500" />
                        <div>
                          <p className="text-xs text-gray-500">Last Visit</p>
                          <p className="text-sm font-medium text-gray-900">
                            {selectedCustomer.lastVisit ? new Date(selectedCustomer.lastVisit).toLocaleDateString() : 'Never'}
                          </p>
                        </div>
                      </div>
                      
                      {selectedCustomer.city && (
                        <div className="flex items-center gap-2 md:col-span-2">
                          <MapPin size={14} className="text-red-500" />
                          <div>
                            <p className="text-xs text-gray-500">Location</p>
                            <p className="text-sm font-medium text-gray-900">{selectedCustomer.city}</p>
                          </div>
                        </div>
                      )}
                      
                      {selectedCustomer.colorTag && selectedCustomer.colorTag !== 'regular' && (
                        <div className="flex items-center gap-2 md:col-span-2">
                          <Tag size={14} className="text-orange-500" />
                          <div>
                            <p className="text-xs text-gray-500">Tag</p>
                            <p className="text-sm font-medium text-gray-900 capitalize">{selectedCustomer.colorTag}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Device Form Section */}
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Smartphone size={20} className="text-blue-600" />
                Device Information
              </h3>
              
              <form className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Brand */}
                  <div>
                    <label className={`block mb-2 font-medium ${fieldErrors.brand ? 'text-red-600' : 'text-gray-700'}`}>
                      Brand *
                      {!formData.brand && <span className="text-xs text-gray-400 ml-2">(Required)</span>}
                    </label>
                    <BrandSuggestionInput
                      value={formData.brand}
                      onChange={val => setFormData(prev => ({ ...prev, brand: val }))}
                      placeholder="Enter brand"
                      required
                      className={`w-full ${!formData.brand ? 'ring-2 ring-yellow-200' : ''}`}
                    />
                  </div>
                  {/* Model */}
                  <div>
                    <label className={`block mb-2 font-medium ${fieldErrors.model ? 'text-red-600' : 'text-gray-700'}`}>
                      Model *
                      {!formData.model && <span className="text-xs text-gray-400 ml-2">(Required)</span>}
                    </label>
                    <ModelSuggestionInput
                      value={formData.model}
                      onChange={val => setFormData(prev => ({ ...prev, model: val }))}
                      placeholder="Enter model or model number"
                      required
                      className={`w-full ${!formData.model ? 'ring-2 ring-yellow-200' : ''}`}
                      modelLogos={modelLogos}
                      brand={formData.brand}
                    />
                  </div>
                  {/* IMEI or Serial Number */}
                  <div>
                    <label className={`block mb-2 font-medium ${fieldErrors.imeiOrSerial ? 'text-red-600' : 'text-gray-700'}`}>
                      IMEI or Serial Number *
                      {!imeiOrSerial && <span className="text-xs text-gray-400 ml-2">(Required)</span>}
                    </label>
                    <div className="relative">
                      <input
                        type="text"
                        className={`w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none ${fieldErrors.imeiOrSerial ? 'border-red-500 focus:border-red-600' : !imeiOrSerial ? 'border-yellow-300 focus:border-yellow-500' : 'border-gray-300 focus:border-blue-500'}`}
                        placeholder="Enter IMEI or Serial Number (min 12 digits)"
                        value={imeiOrSerial || ''}
                        onChange={e => {
                          const newValue = e.target.value.toUpperCase();
                          setImeiOrSerial(newValue);
                          
                          // Real-time validation feedback
                          if (newValue.length > 0) {
                            const validation = validateImeiOrSerial(newValue);
                            if (!validation.isValid) {
                              setFieldErrors(prev => ({ ...prev, imeiOrSerial: true }));
                            } else {
                              setFieldErrors(prev => ({ ...prev, imeiOrSerial: false }));
                            }
                          }
                        }}
                        onBlur={() => {
                          const validation = validateImeiOrSerial(imeiOrSerial);
                          if (!validation.isValid) {
                            setFieldErrors(prev => ({ ...prev, imeiOrSerial: true }));
                          } else {
                            setFieldErrors(prev => ({ ...prev, imeiOrSerial: false }));
                          }
                        }}
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck={false}
                      />
                      <Hash className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                    </div>
                    {fieldErrors.imeiOrSerial && imeiOrSerial && (
                      <div className="text-red-500 text-xs mt-1">
                        {validateImeiOrSerial(imeiOrSerial).error || 'Please enter a valid IMEI or Serial Number'}
                      </div>
                    )}
                    {fieldErrors.imeiOrSerial && imeiOrSerial && (
                      <div className="text-xs text-gray-500 mt-1">
                        💡 Tip: Enter the actual IMEI or Serial Number from the device, not the model name
                        <br />
                        📱 Examples: 123456789012345 (IMEI) or G9566RL4YC (Serial)
                      </div>
                    )}
                  </div>
                  {/* Estimated Completion Section */}
                  <div className="relative">
                    <label className={`block mb-2 font-medium text-gray-700`}>Estimated Completion</label>
                    <div className="relative">
                      <button
                        type="button"
                        className="w-full py-3 pl-4 pr-10 bg-white border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none flex items-center"
                        onClick={() => setDropdownOpen((open) => !open)}
                        tabIndex={0}
                      >
                        <span className="flex items-center gap-2 w-full justify-start">
                          {optionIcons[completionOption as keyof typeof optionIcons]}
                          <span className="text-gray-800 whitespace-nowrap">{completionOptions.find(opt => opt.value === completionOption)?.label}</span>
                        </span>
                        <ChevronDown className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500" size={20} />
                      </button>
                      {dropdownOpen && (
                        <div data-dropdown="completion" className="absolute z-50 left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 p-4 grid grid-cols-2 gap-3">
                          {completionOptions.map(opt => (
                            <button
                              key={opt.value}
                              type="button"
                              className={`flex items-center gap-3 px-4 py-4 rounded-lg transition hover:bg-blue-50 w-full text-left text-base ${completionOption === opt.value ? 'bg-blue-100' : ''}`}
                              onClick={() => handleDropdownSelect(opt.value)}
                            >
                              {optionIcons[opt.value as keyof typeof optionIcons]}
                              <span>{opt.label}</span>
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                    {completionOption === 'custom' && (
                      <div className="relative mt-2">
                        <Calendar className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                        <input
                          type="date"
                          name="expectedReturnDate"
                          value={formData.expectedReturnDate}
                          onChange={handleInputChange}
                          className="w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                          required
                          autoComplete="off"
                          autoCorrect="off"
                          spellCheck={false}
                        />
                      </div>
                    )}
                  </div>
                  {/* Unlock Code/Password */}
                  <div>
                    <label className="block text-gray-700 mb-2 font-medium">Unlock Code / Password</label>
                    <div className="relative">
                      <input
                        type="text"
                        name="unlockCode"
                        value={formData.unlockCode}
                        onChange={handleInputChange}
                        className="w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        placeholder="Enter unlock code or password (optional)"
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck={false}
                      />
                      <Key className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                    </div>
                  </div>
                  {/* Repair Cost */}
                  <div>
                    <label className="block text-gray-700 mb-2 font-medium">Estimated Repair Cost</label>
                    <div className="relative">
                      <input
                        type="number"
                        name="repairCost"
                        value={formData.repairCost}
                        onChange={handleInputChange}
                        className="w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        placeholder="Enter estimated cost"
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck={false}
                      />
                      <DollarSign className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                    </div>
                  </div>
                  {/* Technician Assignment */}
                  <div>
                    <label className={`block mb-2 font-medium ${fieldErrors.assignedTo ? 'text-red-600' : 'text-gray-700'}`}>Assign Technician *</label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                      {technicians.map(tech => {
                        const initials = (tech.name || tech.email || '').split(' ').map((w: string) => w[0]).join('').slice(0,2).toUpperCase();
                        const selected = formData.assignedTo === tech.id;
                        return (
                          <button
                            key={tech.id}
                            type="button"
                            onClick={() => setFormData(prev => ({ ...prev, assignedTo: tech.id }))}
                            className={`relative flex flex-col items-center justify-center p-5 border rounded-xl shadow-md transition-all duration-200 focus:outline-none
                              ${selected ? 'bg-gradient-to-br from-blue-100 to-blue-200 border-blue-500 ring-2 ring-blue-400 scale-105' : 'bg-white border-gray-200 hover:shadow-lg hover:scale-105'}
                            `}
                          >
                            {/* Avatar */}
                            <div className={`w-12 h-12 rounded-full flex items-center justify-center text-lg font-bold mb-2 transition-all duration-200
                              ${selected ? 'bg-blue-500 text-white shadow' : 'bg-gray-200 text-gray-700'}`}
                            >
                              {initials}
                            </div>
                            {/* Name */}
                            <span className="font-semibold text-base mb-1 text-gray-900 text-center">{tech.name || tech.email}</span>
                            {/* Checkmark for selected */}
                            {selected && (
                              <span className="absolute top-2 right-2 bg-blue-500 text-white rounded-full p-1 shadow">
                                <svg width="18" height="18" fill="none" viewBox="0 0 24 24"><path d="M5 13l4 4L19 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
                              </span>
                            )}
                          </button>
                        );
                      })}
                    </div>
                    {fieldErrors.assignedTo && <div className="text-red-500 text-xs mt-1">Please select a technician</div>}
                  </div>
                  {/* Deposit Field Toggle */}
                  {/* Arrange toggles vertically as a list */}
                  <div className="space-y-4">
                    {/* Deposit Toggle */}
                    <div className="relative flex items-center" style={{ minHeight: '2.5rem' }}>
                      <label
                        className="text-gray-700 font-medium cursor-pointer flex-1 z-10 relative px-4 bg-transparent"
                        onClick={() => setShowDepositField(!showDepositField)}
                      >
                        Request Deposit
                      </label>
                      <button
                        type="button"
                        onClick={() => setShowDepositField(!showDepositField)}
                        className={`absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${showDepositField ? 'bg-blue-600' : 'bg-gray-200'}`}
                        style={{ zIndex: 0 }}
                      >
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${showDepositField ? 'translate-x-6' : 'translate-x-1'}`}
                        />
                      </button>
                    </div>
                    {/* Diagnosis Toggle */}
                    <div className="relative flex items-center" style={{ minHeight: '2.5rem' }}>
                      <label
                        className="text-gray-700 font-medium cursor-pointer flex-1 z-10 relative px-4 bg-transparent"
                        onClick={() => setFormData(prev => ({ ...prev, diagnosisRequired: !prev.diagnosisRequired }))}
                      >
                        Diagnosis Required
                      </label>
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, diagnosisRequired: !prev.diagnosisRequired }))}
                        className={`absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${formData.diagnosisRequired ? 'bg-blue-600' : 'bg-gray-200'}`}
                        style={{ zIndex: 0 }}
                      >
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${formData.diagnosisRequired ? 'translate-x-6' : 'translate-x-1'}`}
                        />
                      </button>
                    </div>
                  </div>
                  {/* Deposit Amount Field */}
                  {showDepositField && !formData.diagnosisRequired && (
                    <div className="md:col-span-2">
                      <div className="relative">
                        <input
                          type="number"
                          name="depositAmount"
                          value={formData.depositAmount}
                          onChange={handleInputChange}
                          className="w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                          placeholder="Enter deposit amount"
                          autoComplete="off"
                          autoCorrect="off"
                          spellCheck={false}
                        />
                        <DollarSign className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                      </div>
                    </div>
                  )}
                </div>
                {/* Issue Description */}
                <div className="md:col-span-2">
                  <label className={`block mb-2 font-medium ${fieldErrors.issueDescription ? 'text-red-600' : 'text-gray-700'}`}>Issue Description *</label>
                  <textarea
                    name="issueDescription"
                    value={formData.issueDescription}
                    onChange={e => {
                      handleInputChange(e);
                      setIssueDescriptionTouched(true);
                    }}
                    onBlur={() => setIssueDescriptionTouched(true)}
                    className={`w-full py-3 pl-4 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none resize-none ${fieldErrors.issueDescription ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'}`}
                    placeholder="Describe the issue in detail (at least 5 words)"
                    rows={3}
                    required
                    autoComplete="off"
                    autoCorrect="off"
                    spellCheck={false}
                  />
                  {/* Validation message */}
                  {issueDescriptionTouched && !isIssueDescriptionValid && (
                    <div className="text-red-600 text-xs mt-1">Please enter at least 5 words in the Issue Description.</div>
                  )}
                </div>
                {/* Device Condition Checklist */}
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2 font-medium">Device Condition Assessment</label>
                  <div className="flex flex-wrap gap-2">
                    <button
                      type="button"
                      className={`px-4 py-2 rounded-lg border text-sm font-medium transition-all flex items-center gap-2 ${
                        selectedConditions.length > 0 || otherConditionText.trim() 
                          ? 'bg-blue-500 text-white border-blue-500' 
                          : 'bg-gray-100 text-gray-600 border-gray-300 hover:bg-blue-50'
                      }`}
                      onClick={() => setShowConditionAssessment(true)}
                    >
                      <AlertIcon size={16} />
                      {selectedConditions.length > 0 || otherConditionText.trim() 
                        ? `${selectedConditions.length + (otherConditionText.trim() ? 1 : 0)} issue(s) selected`
                        : 'Select Issues'
                      }
                    </button>
                    
                    {/* Show selected conditions as chips */}
                    {selectedConditions.map((condition, idx) => (
                      <span key={condition + idx} className="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-xs font-semibold flex items-center gap-1">
                        {condition}
                      </span>
                    ))}
                    {otherConditionText && (
                      <span className="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-xs font-semibold flex items-center gap-1">
                        {otherConditionText}
                      </span>
                    )}
                  </div>
                  {fieldErrors.conditionAssessment && (
                    <div className="text-red-500 text-xs mt-2">Please select at least one condition in the assessment.</div>
                  )}
                </div>
                {/* Submit Button */}
                <div className="flex justify-end gap-2 mt-6">
                  <button
                    type="button"
                    className="px-6 py-3 rounded-lg bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition"
                    onClick={() => navigate(-1)}
                    disabled={isLoading || isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    className={`px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${
                      completionPercentage === 100 
                        ? 'bg-green-600 text-white hover:bg-green-700 shadow-lg' 
                        : completionPercentage >= 70
                        ? 'bg-blue-600 text-white hover:bg-blue-700'
                        : 'bg-gray-400 text-gray-600 cursor-not-allowed'
                    }`}
                    onClick={async () => {
                      if (validateForm()) {
                        setIsSubmitting(true);
                        setIsLoading(true);
                        const newDevice = {
                          brand: formData.brand,
                          model: formData.model,
                          serialNumber: imeiOrSerial,
                          unlockCode: formData.unlockCode,
                          customerId: selectedCustomer?.id,
                          customerName: selectedCustomer?.name || '',
                          phoneNumber: selectedCustomer?.phone || '',
                          expectedReturnDate: formData.expectedReturnDate,
                          status: 'assigned' as DeviceStatus,
                          issueDescription: formData.issueDescription,
                          conditions: selectedConditions,
                          otherText: otherConditionText,
                          depositAmount: showDepositField && !formData.diagnosisRequired ? formData.depositAmount : undefined,
                          repairCost: formData.repairCost,
                          assignedTo: formData.assignedTo,
                          createdBy: currentUser?.id,
                          createdAt: new Date().toISOString(),
                          updatedAt: new Date().toISOString(),
                        };
                        if (!navigator.onLine) {
                          await saveActionOffline({ type: 'addDevice', payload: newDevice });
                          setOfflineSuccess(true);
                          setFormData(initialForm);
                          setIsSubmitting(false);
                          setIsLoading(false);
                          setTimeout(() => setOfflineSuccess(false), 3000);
                          return;
                        }
                        addDevice(newDevice)
                          .then(async (device) => {
                            if (device) {
                              toast.success('Device intake created successfully!');
                              // Send WhatsApp message to your number
                              whatsappService.sendMessage('255746605561@c.us', `New device created: ${device.model || ''} ${device.serialNumber || ''}`, 'text');
                              setIsSubmitting(false);
                              setIsLoading(false);
                              navigate(`/device/${device.id}`);
                            } else {
                              toast.error('Failed to create device intake.');
                              setIsSubmitting(false);
                              setIsLoading(false);
                            }
                          })
                          .catch(error => {
                            toast.error(`Error: ${error.message}`);
                            setIsSubmitting(false);
                            setIsLoading(false);
                          });
                      }
                    }}
                    disabled={isLoading || isSubmitting || completionPercentage < 100}
                  >
                    {isLoading || isSubmitting ? (
                      <div className="flex items-center gap-2">
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        Submitting...
                      </div>
                    ) : completionPercentage === 100 ? (
                      <div className="flex items-center gap-2">
                        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Submit Device Intake
                      </div>
                    ) : completionPercentage >= 70 ? (
                      <div className="flex items-center gap-2">
                        <span>Almost Ready ({completionPercentage}%)</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <span>Complete Form ({completionPercentage}%)</span>
                      </div>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </GlassCard>
      )}
      {showConditionAssessment && (
        <Modal
          isOpen={showConditionAssessment}
          onClose={() => setShowConditionAssessment(false)}
          title="Device Condition Assessment"
        >
          <ConditionAssessment
            isOpen={showConditionAssessment}
            onClose={() => setShowConditionAssessment(false)}
            selectedConditions={selectedConditions}
            onConditionsChange={setSelectedConditions}
            otherText={otherConditionText}
            onOtherTextChange={setOtherConditionText}
          />
          <div className="flex justify-end gap-2 mt-4">
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition"
              onClick={() => setShowConditionAssessment(false)}
            >
              Cancel
            </button>
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
              onClick={() => {
                setSelectedConditions(selectedConditions.filter(c => c !== 'other'));
                setOtherConditionText('');
                setShowConditionAssessment(false);
              }}
            >
              Clear All
            </button>
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
              onClick={() => {
                setSelectedConditions(selectedConditions.filter(c => c !== 'other'));
                setOtherConditionText('');
                setShowConditionAssessment(false);
              }}
            >
              Done
            </button>
          </div>
        </Modal>
      )}
      {showQRPrint && submittedDevice && (
        <Modal
          isOpen={showQRPrint}
          onClose={() => setShowQRPrint(false)}
          title="Print QR Code"
        >
          <div ref={qrPrintRef} className="print-area">
            <DeviceQRCodePrint
              isOpen={showQRPrint}
              onClose={() => setShowQRPrint(false)}
              device={submittedDevice}
            />
          </div>
          <div className="flex justify-end gap-2 mt-4 no-print">
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
              onClick={() => {
                if (qrPrintRef.current) {
                  const printContents = qrPrintRef.current.innerHTML;
                  const printWindow = window.open('', '', 'height=600,width=400');
                  if (printWindow) {
                    printWindow.document.write('<html><head><title>Print QR Code</title>');
                    printWindow.document.write('<style>@media print { body { margin: 0; } }</style>');
                    printWindow.document.write('</head><body >');
                    printWindow.document.write(printContents);
                    printWindow.document.write('</body></html>');
                    printWindow.document.close();
                    printWindow.focus();
                    setTimeout(() => {
                      printWindow.print();
                      printWindow.close();
                    }, 300);
                  }
                }
              }}
            >
              Print
            </button>
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition"
              onClick={() => setShowQRPrint(false)}
            >
              Close
            </button>
          </div>
        </Modal>
      )}
      {showAddCustomerModal && (
        <AddCustomerModal
          isOpen={showAddCustomerModal}
          onClose={() => setShowAddCustomerModal(false)}
          onCustomerCreated={(customer: any) => {
            setSelectedCustomer(customer);
            setShowAddCustomerModal(false);
            setCustomerSearch('');
            setShowSuggestions(false);
            // Clear form for new customer - will be auto-loaded from draft if exists
            setFormData(initialForm);
            setSelectedConditions([]);
            setOtherConditionText('');
          }}
        />
      )}
      {showNoteModal && (
        <Modal
          isOpen={showNoteModal}
          onClose={() => setShowNoteModal(false)}
          title="Add Note"
        >
          <textarea
            className="w-full py-3 pl-4 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none resize-none"
            placeholder="Add a note (optional)"
            value={note}
            onChange={e => setNote(e.target.value)}
          />
          <div className="flex justify-end gap-2 mt-4">
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition"
              onClick={() => setShowNoteModal(false)}
            >
              Cancel
            </button>
            <button
              type="button"
              className="px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
              onClick={() => {
                setShowNoteModal(false);
                setNote('');
              }}
            >
              Save Note
            </button>
          </div>
        </Modal>
      )}
      {offlineSuccess && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg text-center text-base font-semibold animate-fade-in">
          Device saved offline! Will sync when you are back online.
        </div>
      )}
    </div>
  );
};

export default DeviceIntakeUnifiedPage;