import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import GlassCard from '../../shared/components/ui/GlassCard';
import GlassButton from '../../shared/components/ui/GlassButton';
import { SimpleBackButton as BackButton } from '../../shared/components/ui/SimpleBackButton';
import { toast } from '../../../lib/toastUtils';
import { 
  ArrowLeft, 
  MessageCircle, 
  Settings, 
  Users, 
  BarChart3, 
  Send, 
  Plus, 
  Edit, 
  Trash2, 
  Eye, 
  CheckCircle, 
  XCircle, 
  Clock, 
  AlertTriangle,
  Wifi,
  WifiOff,
  RefreshCw,
  Zap,
  Shield,
  Database,
  FileText,
  Calendar,
  Target,
  TrendingUp,
  Activity,
  Download,
  LogOut,
  Upload
} from 'lucide-react';
import { supabase } from '../../../lib/supabaseClient';
import { useAuth } from '../../../context/AuthContext';
import Modal from '../../shared/components/ui/Modal';

// Types
interface GreenApiInstance {
  id: string;
  instance_id: string;
  green_api_instance_id: string;
  green_api_token: string;
  api_token?: string;
  green_api_host: string;
  phone_number: string;
  status: 'connected' | 'disconnected' | 'connecting' | 'error';
  qr_code?: string;
  webhook_url?: string;
  webhook_secret?: string;
  is_green_api: boolean;
  last_connection_check?: string;
  connection_error?: string;
  created_at: string;
  updated_at: string;
}

interface GreenApiMessage {
  id: string;
  instance_id: string;
  chat_id: string;
  message_type: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'sticker' | 'poll';
  content: string;
  metadata?: any;
  priority: number;
  status: 'pending' | 'sending' | 'sent' | 'delivered' | 'read' | 'failed' | 'rate_limited';
  retry_count: number;
  max_retries: number;
  scheduled_at: string;
  sent_at?: string;
  delivered_at?: string;
  read_at?: string;
  error_message?: string;
  green_api_message_id?: string;
  created_at: string;
  updated_at: string;
}

interface GreenApiBulkCampaign {
  id: string;
  name: string;
  description?: string;
  instance_id: string;
  template_id?: string;
  target_audience: any[];
  message_content: string;
  status: 'draft' | 'scheduled' | 'sending' | 'completed' | 'failed' | 'paused';
  scheduled_at?: string;
  started_at?: string;
  completed_at?: string;
  total_recipients: number;
  sent_count: number;
  delivered_count: number;
  failed_count: number;
  created_by?: string;
  created_at: string;
  updated_at: string;
}

const GreenApiManagementPage: React.FC = () => {
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  
  // State
  const [activeTab, setActiveTab] = useState<'instances' | 'messages' | 'campaigns' | 'analytics' | 'settings'>('instances');
  const [instances, setInstances] = useState<GreenApiInstance[]>([]);
  const [messages, setMessages] = useState<GreenApiMessage[]>([]);
  const [campaigns, setCampaigns] = useState<GreenApiBulkCampaign[]>([]);
  const [webhookEvents, setWebhookEvents] = useState<any[]>([]);
  const [templates, setTemplates] = useState<any[]>([]);
  const [campaignResults, setCampaignResults] = useState<any[]>([]);
  const [settings, setSettings] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddInstance, setShowAddInstance] = useState(false);
  const [showAddCampaign, setShowAddCampaign] = useState(false);
  
  // Real-time refresh
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  
  // Search and filtering
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [dateFilter, setDateFilter] = useState('all');
  
  // Bulk operations
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  const [bulkAction, setBulkAction] = useState<string>('');
  
  // Analytics data
  const [analyticsData, setAnalyticsData] = useState<any>(null);
  
  // Configuration management
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [editingSetting, setEditingSetting] = useState<any>(null);

  // Instance management
  const [showEditInstance, setShowEditInstance] = useState(false);
  const [editingInstance, setEditingInstance] = useState<GreenApiInstance | null>(null);





  // Instance management functions
  const handleEditInstance = (instance: GreenApiInstance) => {
    setEditingInstance(instance);
    setShowEditInstance(true);
  };

  const handleDeleteInstance = async (instanceId: string) => {
    if (!confirm('Are you sure you want to delete this instance? This action cannot be undone.')) {
      return;
    }

    try {
      const { error } = await supabase!
        .from('whatsapp_instances')
        .delete()
        .eq('id', instanceId);

      if (error) {
        console.error('Error deleting instance:', error);
        toast.error(`Failed to delete instance: ${error.message}`);
        return;
      }

      setInstances(prev => prev.filter(i => i.id !== instanceId));
      toast.success('Instance deleted successfully');
    } catch (error: any) {
      console.error('Error deleting instance:', error);
      toast.error(`Failed to delete instance: ${error.message}`);
    }
  };

  const handleUpdateInstance = async (updatedInstance: Partial<GreenApiInstance>) => {
    if (!editingInstance) return;

    try {
      const { error } = await supabase!
        .from('whatsapp_instances')
        .update(updatedInstance)
        .eq('id', editingInstance.id);

      if (error) {
        console.error('Error updating instance:', error);
        toast.error(`Failed to update instance: ${error.message}`);
        return;
      }

      setInstances(prev => prev.map(i => 
        i.id === editingInstance.id 
          ? { ...i, ...updatedInstance }
          : i
      ));
      
      setShowEditInstance(false);
      setEditingInstance(null);
      toast.success('Instance updated successfully');
    } catch (error: any) {
      console.error('Error updating instance:', error);
      toast.error(`Failed to update instance: ${error.message}`);
    }
  };

  // QR Code and Device Linking Functions
  const [qrCodeData, setQrCodeData] = useState<string | null>(null);
  const [showQrModal, setShowQrModal] = useState(false);
  const [selectedInstanceForQr, setSelectedInstanceForQr] = useState<GreenApiInstance | null>(null);
  const [qrLoading, setQrLoading] = useState(false);

  const generateQrCode = async (instance: GreenApiInstance) => {
    setQrLoading(true);
    setSelectedInstanceForQr(instance);
    setShowQrModal(true);

    try {
      // Call Green API to get QR code
      const response = await fetch(`https://api.green-api.com/waInstance${instance.instance_id}/getQrCode/${instance.green_api_token}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.qrCode) {
        setQrCodeData(data.qrCode);
        toast.success('QR Code generated successfully');
      } else {
        throw new Error('No QR code received from Green API');
      }
    } catch (error: any) {
      console.error('Error generating QR code:', error);
      toast.error(`Failed to generate QR code: ${error.message}`);
      setQrCodeData(null);
    } finally {
      setQrLoading(false);
    }
  };

      const checkInstanceState = async (instance: GreenApiInstance) => {
      try {
        let response;
        try {
          response = await fetch('/.netlify/functions/whatsapp-proxy', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'getStateInstance',
              instanceId: instance.instance_id,
              apiToken: instance.green_api_token || instance.api_token,
              apiUrl: instance.green_api_host || 'https://api.green-api.com'
            })
          });
        } catch (proxyError) {
          
          // Fallback to direct API call
          const directApiUrl = instance.green_api_host || 'https://api.green-api.com';
          const directApiToken = instance.green_api_token || instance.api_token;
          
          response = await fetch(`${directApiUrl}/waInstance${instance.instance_id}/getStateInstance/${directApiToken}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
          });
        }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      const data = result.data;
      
      // Update instance status based on Green API response
      const newStatus = data.stateInstance === 'authorized' ? 'connected' : 
                       data.stateInstance === 'notAuthorized' ? 'disconnected' : 
                       data.stateInstance === 'blocked' ? 'error' : 'connecting';

      if (newStatus !== instance.status) {
        const { error } = await supabase!
          .from('whatsapp_instances')
          .update({ status: newStatus })
          .eq('id', instance.id);

        if (!error) {
          setInstances(prev => prev.map(i => 
            i.id === instance.id ? { ...i, status: newStatus } : i
          ));
        }
      }

      return data.stateInstance;
    } catch (error: any) {
      console.error('Error checking instance state:', error);
      return null;
    }
  };

  const logoutInstance = async (instance: GreenApiInstance) => {
    if (!confirm('Are you sure you want to logout this instance? This will disconnect the WhatsApp device.')) {
      return;
    }

    try {
      // Use direct API call by default
      const directApiUrl = instance.green_api_host || 'https://api.green-api.com';
      const directApiToken = instance.green_api_token || instance.api_token;
      
      const response = await fetch(`${directApiUrl}/waInstance${instance.instance_id}/logout/${directApiToken}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Update instance status to disconnected
      const { error } = await supabase!
        .from('whatsapp_instances')
        .update({ status: 'disconnected' })
        .eq('id', instance.id);

      if (!error) {
        setInstances(prev => prev.map(i => 
          i.id === instance.id ? { ...i, status: 'disconnected' } : i
        ));
        toast.success('Instance logged out successfully');
      }
    } catch (error: any) {
      console.error('Error logging out instance:', error);
      toast.error(`Failed to logout instance: ${error.message}`);
    }
  };

  // Redirect non-admin users
  useEffect(() => {
    if (currentUser && currentUser.role !== 'admin') {
      navigate('/dashboard');
    }
  }, [currentUser, navigate]);

  // Load data function
  const loadData = useCallback(async () => {
    setLoading(true);
    try {
      // Check authentication status
      const { data: { user } } = await supabase!.auth.getUser();
      
      // Load all instances (not just Green API ones)
      const { data: instancesData, error: instancesError } = await supabase!
        .from('whatsapp_instances')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (instancesError) {
        console.error('❌ Error loading instances:', instancesError);
        console.error('Error details:', {
          code: instancesError.code,
          message: instancesError.message,
          details: instancesError.details,
          hint: instancesError.hint
        });
        
        // Show more specific error message
        if (instancesError.code === 'PGRST116') {
          toast.error('Permission denied: Check RLS policies');
        } else if (instancesError.code === 'PGRST301') {
          toast.error('Table not found: whatsapp_instances');
        } else {
          toast.error(`Failed to load instances: ${instancesError.message}`);
        }
      } else {

        setInstances(instancesData || []);
        

      }

      // Load all messages from queue
      const { data: messagesData, error: messagesError } = await supabase!
        .from('green_api_message_queue')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (messagesError) {
        console.error('Error loading messages:', messagesError);
        toast.error('Failed to load messages');
      } else {
        setMessages(messagesData || []);
      }

      // Load all campaigns
      const { data: campaignsData, error: campaignsError } = await supabase!
        .from('green_api_bulk_campaigns')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (campaignsError) {
        console.error('Error loading campaigns:', campaignsError);
        toast.error('Failed to load campaigns');
      } else {
        setCampaigns(campaignsData || []);
      }

      // Load webhook events
      const { data: webhookEventsData, error: webhookEventsError } = await supabase!
        .from('green_api_webhook_events')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(100);
      
      if (webhookEventsError) {
        console.error('Error loading webhook events:', webhookEventsError);
        toast.error('Failed to load webhook events');
      } else {
        setWebhookEvents(webhookEventsData || []);
      }

      // Load message templates
      const { data: templatesData, error: templatesError } = await supabase!
        .from('green_api_message_templates')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (templatesError) {
        console.error('Error loading message templates:', templatesError);
        toast.error('Failed to load templates');
      } else {
        setTemplates(templatesData || []);
      }

      // Load campaign results
      const { data: campaignResultsData, error: campaignResultsError } = await supabase!
        .from('green_api_bulk_campaign_results')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(200);
      
      if (campaignResultsError) {
        console.error('Error loading campaign results:', campaignResultsError);
        toast.error('Failed to load campaign results');
      } else {
        setCampaignResults(campaignResultsData || []);
      }

      // Load settings
      const { data: settingsData, error: settingsError } = await supabase!
        .from('green_api_settings')
        .select('*')
        .order('setting_key', { ascending: true });
      
      if (settingsError) {
        console.error('Error loading settings:', settingsError);
        toast.error('Failed to load settings');
      } else {
        setSettings(settingsData || []);
      }

      // Calculate analytics data
      const analytics = calculateAnalytics({
        instances: instancesData || [],
        messages: messagesData || [],
        campaigns: campaignsData || [],
        webhookEvents: webhookEventsData || [],
        templates: templatesData || [],
        campaignResults: campaignResultsData || []
      });
      setAnalyticsData(analytics);

      setLastRefresh(new Date());


    } catch (error) {
      console.error('Error loading Green API data:', error);
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  }, []);

  // Load data on mount
  useEffect(() => {
    loadData();
  }, [loadData]);

  // Real-time refresh
  useEffect(() => {
    if (!autoRefresh) return;
    
    const interval = setInterval(() => {
      loadData();
    }, refreshInterval);
    
    return () => clearInterval(interval);
  }, [autoRefresh, refreshInterval, loadData]);

  // Analytics calculation function
  const calculateAnalytics = useCallback((data: any) => {
    const { instances, messages, campaigns, webhookEvents, templates, campaignResults } = data;
    
    return {
      // Message analytics
      totalMessages: messages.length,
      deliveredMessages: messages.filter((m: any) => ['sent', 'delivered', 'read'].includes(m.status)).length,
      failedMessages: messages.filter((m: any) => ['failed', 'rate_limited'].includes(m.status)).length,
      deliveryRate: messages.length > 0 ? Math.round((messages.filter((m: any) => ['sent', 'delivered', 'read'].includes(m.status)).length / messages.length) * 100) : 0,
      
      // Campaign analytics
      totalCampaigns: campaigns.length,
      activeCampaigns: campaigns.filter((c: any) => c.status === 'sending').length,
      completedCampaigns: campaigns.filter((c: any) => c.status === 'completed').length,
      campaignSuccessRate: campaignResults.length > 0 ? Math.round((campaignResults.filter((r: any) => ['sent', 'delivered', 'read'].includes(r.status)).length / campaignResults.length) * 100) : 0,
      
      // Instance analytics
      totalInstances: instances.length,
      connectedInstances: instances.filter((i: any) => i.status === 'connected').length,
      greenApiInstances: instances.filter((i: any) => i.is_green_api).length,
      
      // Template analytics
      totalTemplates: templates.length,
      activeTemplates: templates.filter((t: any) => t.is_active).length,
      templateCategories: new Set(templates.map((t: any) => t.category)).size,
      
      // Webhook analytics
      totalWebhooks: webhookEvents.length,
      recentWebhooks: webhookEvents.filter((e: any) => new Date(e.created_at) > new Date(Date.now() - 24*60*60*1000)).length,
      unprocessedWebhooks: webhookEvents.filter((e: any) => !e.processed).length,
      errorWebhooks: webhookEvents.filter((e: any) => e.error_message).length,
      
      // Performance metrics
      averageDeliveryTime: calculateAverageDeliveryTime(messages),
      peakActivityHour: calculatePeakActivityHour(webhookEvents),
      topRecipients: getTopRecipients(messages, 5)
    };
  }, []);

  const calculateAverageDeliveryTime = (messages: any[]) => {
    const deliveredMessages = messages.filter(m => m.sent_at && m.delivered_at);
    if (deliveredMessages.length === 0) return '-';
    
    const totalTime = deliveredMessages.reduce((sum, m) => {
      const sentTime = new Date(m.sent_at).getTime();
      const deliveredTime = new Date(m.delivered_at).getTime();
      return sum + (deliveredTime - sentTime);
    }, 0);
    
    const averageMs = totalTime / deliveredMessages.length;
    return `${Math.round(averageMs / 1000)}s`;
  };

  const calculatePeakActivityHour = (webhookEvents: any[]) => {
    if (webhookEvents.length === 0) return '-';
    
    const hourlyCounts = new Array(24).fill(0);
    webhookEvents.forEach(event => {
      const hour = new Date(event.created_at).getHours();
      hourlyCounts[hour]++;
    });
    
    const peakHour = hourlyCounts.indexOf(Math.max(...hourlyCounts));
    return `${peakHour}:00`;
  };

  const getTopRecipients = (messages: any[], limit: number) => {
    const recipientCounts = messages.reduce((acc, message) => {
      acc[message.chat_id] = (acc[message.chat_id] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return Object.entries(recipientCounts)
      .sort(([,a], [,b]) => (b as number) - (a as number))
      .slice(0, limit)
      .map(([recipient, count]) => ({ recipient, count }));
  };

  return (
    <div className="p-4 sm:p-6 h-full overflow-y-auto pt-8">
      <div className="max-w-6xl mx-auto space-y-4 sm:space-y-6">
        {/* Header */}
        <GlassCard className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <BackButton />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Green API Management</h1>
                <p className="text-gray-600">Manage WhatsApp integration and messaging</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              {/* Auto-refresh controls */}
              <div className="flex items-center gap-2">
                <label className="flex items-center gap-2 text-sm">
                  <input
                    type="checkbox"
                    checked={autoRefresh}
                    onChange={(e) => setAutoRefresh(e.target.checked)}
                    className="rounded"
                  />
                  Auto-refresh
                </label>
                {autoRefresh && (
                  <select
                    value={refreshInterval}
                    onChange={(e) => setRefreshInterval(Number(e.target.value))}
                    className="text-sm border rounded px-2 py-1"
                  >
                    <option value={10000}>10s</option>
                    <option value={30000}>30s</option>
                    <option value={60000}>1m</option>
                    <option value={300000}>5m</option>
                  </select>
                )}
              </div>
              
              {/* Last refresh indicator */}
              <div className="text-sm text-gray-500">
                Last: {lastRefresh.toLocaleTimeString()}
              </div>
              
              {/* Connection status */}
              <div className={`flex items-center gap-2 px-3 py-2 rounded-lg ${
                instances.length > 0 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-gray-100 text-gray-800'
              }`}>
                {instances.length > 0 ? (
                  <>
                    <Wifi size={16} />
                    <span className="text-sm font-medium">Connected ({instances.length} instances)</span>
                  </>
                ) : (
                  <>
                    <WifiOff size={16} />
                    <span className="text-sm font-medium">Not Connected</span>
                  </>
                )}
              </div>
              

            </div>
          </div>

          {/* Search and Filter Bar */}
          <div className="flex items-center gap-4 mb-6 p-4 bg-white rounded-lg border">
            <div className="flex-1">
              <input
                type="text"
                placeholder="Search instances, messages, campaigns..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              />
            </div>
            
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            >
              <option value="all">All Status</option>
              <option value="connected">Connected</option>
              <option value="disconnected">Disconnected</option>
              <option value="sent">Sent</option>
              <option value="delivered">Delivered</option>
              <option value="failed">Failed</option>
              <option value="sending">Sending</option>
              <option value="completed">Completed</option>
            </select>
            
            <select
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            >
              <option value="all">All Time</option>
              <option value="today">Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
            </select>
            
            <button
              onClick={loadData}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Refresh
            </button>
          </div>

          {/* Tab Navigation */}
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
            <button
              onClick={() => setActiveTab('instances')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'instances' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <MessageCircle size={16} />
              Instances
            </button>
            <button
              onClick={() => setActiveTab('messages')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'messages' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <Send size={16} />
              Messages
            </button>
            <button
              onClick={() => setActiveTab('campaigns')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'campaigns' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <Target size={16} />
              Campaigns
            </button>
            <button
              onClick={() => setActiveTab('analytics')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'analytics' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <BarChart3 size={16} />
              Analytics
            </button>

            <button
              onClick={() => setActiveTab('settings')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'settings' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <Settings size={16} />
              Settings
            </button>
          </div>
        </GlassCard>

        {/* Content Area */}
        <div className="min-h-[600px]">
          {activeTab === 'instances' && (
            <InstancesTab 
              instances={instances}
              loading={loading}
              onAddInstance={() => setShowAddInstance(true)}
              onEditInstance={handleEditInstance}
              onDeleteInstance={handleDeleteInstance}
              onGenerateQrCode={generateQrCode}
              onCheckState={checkInstanceState}
              onLogout={logoutInstance}
              selectedItems={selectedItems}
              onSelectItem={(id) => {
                setSelectedItems(prev => 
                  prev.includes(id) 
                    ? prev.filter(item => item !== id)
                    : [...prev, id]
                );
              }}
              onSelectAll={() => {
                setSelectedItems(prev => 
                  prev.length === instances.length 
                    ? [] 
                    : instances.map(i => i.id)
                );
              }}
              onBulkAction={async (action) => {
                if (selectedItems.length === 0) {
                  toast.error('Please select items first');
                  return;
                }

                try {
                  switch (action) {
                    case 'delete':
                      const { error: deleteError } = await supabase!
                        .from('whatsapp_instances')
                        .delete()
                        .in('id', selectedItems);
                      
                      if (deleteError) throw deleteError;
                      
                      setInstances(prev => prev.filter(i => !selectedItems.includes(i.id)));
                      setSelectedItems([]);
                      toast.success(`${selectedItems.length} instances deleted`);
                      break;
                    
                    case 'connect':
                      const { error: connectError } = await supabase!
                        .from('whatsapp_instances')
                        .update({ status: 'connecting' })
                        .in('id', selectedItems);
                      
                      if (connectError) throw connectError;
                      
                      setInstances(prev => prev.map(i => 
                        selectedItems.includes(i.id) 
                          ? { ...i, status: 'connecting' }
                          : i
                      ));
                      setSelectedItems([]);
                      toast.success(`Connecting ${selectedItems.length} instances`);
                      break;
                    
                    case 'disconnect':
                      const { error: disconnectError } = await supabase!
                        .from('whatsapp_instances')
                        .update({ status: 'disconnected' })
                        .in('id', selectedItems);
                      
                      if (disconnectError) throw disconnectError;
                      
                      setInstances(prev => prev.map(i => 
                        selectedItems.includes(i.id) 
                          ? { ...i, status: 'disconnected' }
                          : i
                      ));
                      setSelectedItems([]);
                      toast.success(`Disconnected ${selectedItems.length} instances`);
                      break;
                    
                    default:
                      toast.error('Invalid action');
                  }
                } catch (error: any) {
                  console.error('Error performing bulk action:', error);
                  toast.error(`Failed to perform bulk action: ${error.message}`);
                }
              }}
            />
          )}
          
          {activeTab === 'messages' && (
            <MessagesTab 
              messages={messages}
              loading={loading}
            />
          )}
          
          {activeTab === 'campaigns' && (
            <CampaignsTab 
              campaigns={campaigns}
              loading={loading}
              onAddCampaign={() => setShowAddCampaign(true)}
            />
          )}
          
          {activeTab === 'analytics' && (
            <AnalyticsTab 
              analyticsData={analyticsData}
              loading={loading}
            />
          )}
          

          
          {activeTab === 'settings' && (
            <SettingsTab 
              settings={settings}
              templates={templates}
              webhookEvents={webhookEvents}
              campaignResults={campaignResults}
              onEditSetting={(setting) => {
                setEditingSetting(setting);
                setShowSettingsModal(true);
              }}
            />
          )}
        </div>
      </div>

      {/* Add Instance Modal */}
      {showAddInstance && (
        <AddInstanceModal
          isOpen={showAddInstance}
          onClose={() => setShowAddInstance(false)}
          onSuccess={(newInstance) => {
            setInstances(prev => [newInstance, ...prev]);
            setShowAddInstance(false);
            toast.success('Instance added successfully');
          }}
        />
      )}

      {/* Add Campaign Modal */}
      {showAddCampaign && (
        <AddCampaignModal
          isOpen={showAddCampaign}
          onClose={() => setShowAddCampaign(false)}
          instances={instances}
          onSuccess={(newCampaign) => {
            setCampaigns(prev => [newCampaign, ...prev]);
            setShowAddCampaign(false);
            toast.success('Campaign created successfully');
          }}
        />
      )}

      {/* Settings Configuration Modal */}
      {showSettingsModal && editingSetting && (
        <SettingsConfigurationModal
          isOpen={showSettingsModal}
          onClose={() => {
            setShowSettingsModal(false);
            setEditingSetting(null);
          }}
          setting={editingSetting}
          onSave={async (updatedSetting) => {
            try {
              const { error } = await supabase!
                .from('green_api_settings')
                .update({
                  setting_value: updatedSetting.setting_value,
                  description: updatedSetting.description
                })
                .eq('id', updatedSetting.id);

              if (error) throw error;

              toast.success('Setting updated successfully');
              setShowSettingsModal(false);
              setEditingSetting(null);
              loadData(); // Refresh data
            } catch (error: any) {
              console.error('Error updating setting:', error);
              toast.error(`Failed to update setting: ${error.message}`);
            }
          }}
        />
      )}

              {/* Edit Instance Modal */}
        {showEditInstance && editingInstance && (
          <EditInstanceModal
            isOpen={showEditInstance}
            onClose={() => {
              setShowEditInstance(false);
              setEditingInstance(null);
            }}
            instance={editingInstance}
            onSave={handleUpdateInstance}
          />
        )}

        {/* QR Code Modal */}
        {showQrModal && selectedInstanceForQr && (
          <Modal
            isOpen={showQrModal}
            onClose={() => {
              setShowQrModal(false);
              setSelectedInstanceForQr(null);
              setQrCodeData(null);
            }}
            title="QR Code for WhatsApp Linking"
          >
            <div className="space-y-6">
              <div className="text-center">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  Link WhatsApp Device
                </h3>
                <p className="text-gray-600 mb-4">
                  Scan this QR code with your WhatsApp mobile app to link your device to the instance.
                </p>
                
                {qrLoading ? (
                  <div className="flex items-center justify-center h-64">
                    <div className="flex items-center gap-3">
                      <RefreshCw size={20} className="animate-spin text-blue-600" />
                      <span className="text-gray-600">Generating QR Code...</span>
                    </div>
                  </div>
                ) : qrCodeData ? (
                  <div className="flex flex-col items-center">
                    <div className="bg-white p-4 rounded-lg border">
                      <img 
                        src={`data:image/png;base64,${qrCodeData}`} 
                        alt="WhatsApp QR Code"
                        className="w-64 h-64"
                      />
                    </div>
                    <p className="text-sm text-gray-500 mt-4">
                      Instance: {selectedInstanceForQr.phone_number}
                    </p>
                  </div>
                ) : (
                  <div className="text-center text-red-600">
                    Failed to generate QR code. Please try again.
                  </div>
                )}
              </div>

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => {
                    setShowQrModal(false);
                    setSelectedInstanceForQr(null);
                    setQrCodeData(null);
                  }}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Close
                </button>
                {!qrCodeData && !qrLoading && (
                  <button
                    onClick={() => generateQrCode(selectedInstanceForQr)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    Retry
                  </button>
                )}
              </div>
            </div>
          </Modal>
        )}
      </div>
    );
  };

// Instances Tab Component
const InstancesTab: React.FC<{
  instances: GreenApiInstance[];
  loading: boolean;
  onAddInstance: () => void;
  onEditInstance: (instance: GreenApiInstance) => void;
  onDeleteInstance: (instanceId: string) => Promise<void>;
  onGenerateQrCode: (instance: GreenApiInstance) => Promise<void>;
  onCheckState: (instance: GreenApiInstance) => Promise<string | null>;
  onLogout: (instance: GreenApiInstance) => Promise<void>;
  selectedItems: string[];
  onSelectItem: (id: string) => void;
  onSelectAll: () => void;
  onBulkAction: (action: string) => void;
}> = ({ instances, loading, onAddInstance, onEditInstance, onDeleteInstance, onGenerateQrCode, onCheckState, onLogout, selectedItems, onSelectItem, onSelectAll, onBulkAction }) => {
  const [selectedInstance, setSelectedInstance] = useState<GreenApiInstance | null>(null);
  const [showDetails, setShowDetails] = useState(false);
  const [filterType, setFilterType] = useState<'all' | 'green-api' | 'other'>('all');

  // Filter instances based on type
  const filteredInstances = instances.filter(instance => {
    if (filterType === 'all') return true;
    if (filterType === 'green-api') return instance.is_green_api === true;
    if (filterType === 'other') return instance.is_green_api !== true;
    return true;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-100 text-green-800';
      case 'disconnected': return 'bg-gray-100 text-gray-800';
      case 'connecting': return 'bg-yellow-100 text-yellow-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return <Wifi size={16} />;
      case 'disconnected': return <WifiOff size={16} />;
      case 'connecting': return <RefreshCw size={16} className="animate-spin" />;
      case 'error': return <AlertTriangle size={16} />;
      default: return <WifiOff size={16} />;
    }
  };

  if (loading) {
    return (
      <GlassCard className="p-6">
        <div className="flex items-center justify-center h-64">
          <div className="flex items-center gap-3">
            <RefreshCw size={20} className="animate-spin text-blue-600" />
            <span className="text-gray-600">Loading instances...</span>
          </div>
        </div>
      </GlassCard>
    );
  }

  return (
    <GlassCard className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">WhatsApp Instances</h2>
          <p className="text-gray-600">Manage your WhatsApp instances ({instances.length} total)</p>
        </div>
        <div className="flex items-center gap-3">
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setFilterType('all')}
              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                filterType === 'all' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              All ({instances.length})
            </button>
            <button
              onClick={() => setFilterType('green-api')}
              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                filterType === 'green-api' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Green API ({instances.filter(i => i.is_green_api).length})
            </button>
            <button
              onClick={() => setFilterType('other')}
              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                filterType === 'other' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Other ({instances.filter(i => !i.is_green_api).length})
            </button>
          </div>
          <GlassButton
            onClick={onAddInstance}
            className="flex items-center gap-2"
          >
            <Plus size={16} />
            Add Instance
          </GlassButton>
        </div>
      </div>

      {/* Bulk Operations */}
      {selectedItems.length > 0 && (
        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                checked={selectedItems.length === filteredInstances.length}
                onChange={onSelectAll}
                className="rounded"
              />
              <span className="text-sm font-medium text-blue-900">
                {selectedItems.length} instance{selectedItems.length !== 1 ? 's' : ''} selected
              </span>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => onBulkAction('connect')}
                className="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700"
              >
                Connect
              </button>
              <button
                onClick={() => onBulkAction('disconnect')}
                className="px-3 py-1 text-sm bg-gray-600 text-white rounded hover:bg-gray-700"
              >
                Disconnect
              </button>
              <button
                onClick={() => onBulkAction('delete')}
                className="px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {filteredInstances.length === 0 ? (
        <div className="text-center py-12">
          <MessageCircle size={48} className="text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No instances found</h3>
          <p className="text-gray-600 mb-6">
            {filterType === 'all' 
              ? 'Get started by adding your first WhatsApp instance'
              : filterType === 'green-api'
              ? 'No Green API instances found. Add one to get started.'
              : 'No other WhatsApp instances found.'
            }
          </p>
          {filterType === 'all' || filterType === 'green-api' ? (
            <GlassButton onClick={onAddInstance}>
              <Plus size={16} />
              Add First Instance
            </GlassButton>
          ) : null}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {filteredInstances.map((instance) => (
            <div
              key={instance.id}
              className="group relative bg-gradient-to-br from-white to-gray-50 border border-gray-200 rounded-xl p-6 hover:shadow-xl hover:-translate-y-1 transition-all duration-300 hover:border-blue-300"
            >
              {/* Selection Checkbox - Top Left */}
              <div className="absolute top-4 left-4">
                <input
                  type="checkbox"
                  checked={selectedItems.includes(instance.id)}
                  onChange={(e) => {
                    e.stopPropagation();
                    onSelectItem(instance.id);
                  }}
                  className="w-4 h-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 focus:ring-2"
                />
              </div>

              {/* Status Badge - Top Right */}
              <div className="absolute top-4 right-4">
                <div className={`flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-semibold shadow-sm ${getStatusColor(instance.status)}`}>
                  {getStatusIcon(instance.status)}
                  <span className="capitalize">{instance.status}</span>
                </div>
              </div>

              {/* Header */}
              <div className="mt-8 mb-6">
                <div className="flex items-center gap-4 mb-3">
                  <div className="w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                    <MessageCircle size={24} className="text-white" />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-lg font-bold text-gray-900 mb-1">{instance.phone_number}</h3>
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-gray-500">ID:</span>
                      <code className="text-sm font-mono bg-gray-100 px-2 py-0.5 rounded text-gray-700">
                        {instance.instance_id}
                      </code>
                    </div>
                  </div>
                </div>

                {/* Green API Badge */}
                {instance.is_green_api && (
                  <div className="inline-flex items-center gap-1 px-2 py-1 bg-green-50 border border-green-200 rounded-md">
                    <Zap size={12} className="text-green-600" />
                    <span className="text-xs font-medium text-green-700">Green API</span>
                  </div>
                )}
              </div>

              {/* Info Grid */}
              <div className="space-y-3 mb-6">
                <div className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                  <div className="w-6 h-6 bg-blue-100 rounded-md flex items-center justify-center">
                    <Database size={12} className="text-blue-600" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Host</p>
                    <p className="text-sm text-gray-900 truncate">{instance.green_api_host || 'Default'}</p>
                  </div>
                </div>

                <div className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                  <div className="w-6 h-6 bg-green-100 rounded-md flex items-center justify-center">
                    <Calendar size={12} className="text-green-600" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Created</p>
                    <p className="text-sm text-gray-900">{new Date(instance.created_at).toLocaleDateString()}</p>
                  </div>
                </div>

                {instance.last_connection_check && (
                  <div className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                    <div className="w-6 h-6 bg-purple-100 rounded-md flex items-center justify-center">
                      <Clock size={12} className="text-purple-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Last Check</p>
                      <p className="text-sm text-gray-900">{new Date(instance.last_connection_check).toLocaleString()}</p>
                    </div>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="space-y-2">
                {/* Primary Actions Row */}
                <div className="grid grid-cols-2 gap-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onGenerateQrCode(instance);
                    }}
                    className="flex items-center justify-center gap-1.5 px-2 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all font-medium text-xs shadow-lg hover:shadow-xl"
                  >
                    <Download size={14} />
                    QR Code
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onCheckState(instance);
                    }}
                    className="flex items-center justify-center gap-1.5 px-2 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all font-medium text-xs shadow-lg hover:shadow-xl"
                  >
                    <RefreshCw size={14} />
                    Status
                  </button>
                </div>

                {/* Secondary Actions Grid */}
                <div className="grid grid-cols-4 gap-1.5">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedInstance(instance);
                      setShowDetails(true);
                    }}
                    className="flex items-center justify-center gap-1 px-2 py-1.5 bg-white border border-gray-200 text-gray-700 rounded-md hover:bg-gray-50 hover:border-gray-300 transition-all text-xs font-medium"
                    title="View Details"
                  >
                    <Eye size={12} />
                    <span className="hidden sm:inline">View</span>
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onEditInstance(instance);
                    }}
                    className="flex items-center justify-center gap-1 px-2 py-1.5 bg-white border border-gray-200 text-gray-700 rounded-md hover:bg-gray-50 hover:border-gray-300 transition-all text-xs font-medium"
                    title="Edit Instance"
                  >
                    <Edit size={12} />
                    <span className="hidden sm:inline">Edit</span>
                  </button>
                  {instance.status === 'connected' ? (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onLogout(instance);
                      }}
                      className="flex items-center justify-center gap-1 px-2 py-1.5 bg-orange-50 border border-orange-200 text-orange-700 rounded-md hover:bg-orange-100 hover:border-orange-300 transition-all text-xs font-medium"
                      title="Logout Instance"
                    >
                      <LogOut size={12} />
                      <span className="hidden sm:inline">Logout</span>
                    </button>
                  ) : (
                    <div className="opacity-50">
                      <button
                        disabled
                        className="flex items-center justify-center gap-1 px-2 py-1.5 bg-gray-50 border border-gray-200 text-gray-400 rounded-md cursor-not-allowed text-xs font-medium"
                        title="Not Connected"
                      >
                        <LogOut size={12} />
                        <span className="hidden sm:inline">Logout</span>
                      </button>
                    </div>
                  )}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onDeleteInstance(instance.id);
                    }}
                    className="flex items-center justify-center gap-1 px-2 py-1.5 bg-red-50 border border-red-200 text-red-700 rounded-md hover:bg-red-100 hover:border-red-300 transition-all text-xs font-medium"
                    title="Delete Instance"
                  >
                    <Trash2 size={12} />
                    <span className="hidden sm:inline">Delete</span>
                  </button>
                </div>
              </div>

              {/* Hover Effect Overlay */}
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-purple-500/5 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            </div>
          ))}
        </div>
      )}

      {/* Instance Details Modal */}
      {showDetails && selectedInstance && (
        <Modal
          isOpen={showDetails}
          onClose={() => setShowDetails(false)}
          title="Instance Details"
        >
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                <p className="text-gray-900 font-medium">{selectedInstance.phone_number}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Instance ID</label>
                <p className="text-gray-900 font-medium">{selectedInstance.instance_id}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm font-medium ${getStatusColor(selectedInstance.status)}`}>
                  {getStatusIcon(selectedInstance.status)}
                  <span className="capitalize">{selectedInstance.status}</span>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">API Host</label>
                <p className="text-gray-900 font-medium">{selectedInstance.green_api_host}</p>
              </div>
            </div>

            {selectedInstance.connection_error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h4 className="font-semibold text-red-900 mb-2 flex items-center gap-2">
                  <AlertTriangle size={16} />
                  Connection Error
                </h4>
                <p className="text-red-800 text-sm">{selectedInstance.connection_error}</p>
              </div>
            )}

            <div className="flex justify-end gap-2 pt-4 border-t border-gray-200">
              <button
                onClick={() => setShowDetails(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Close
              </button>
              <button
                onClick={() => {
                  // Handle test connection
                  setShowDetails(false);
                }}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Test Connection
              </button>
            </div>
          </div>
        </Modal>
      )}
    </GlassCard>
  );
};

// Messages Tab Component
const MessagesTab: React.FC<{
  messages: GreenApiMessage[];
  loading: boolean;
}> = ({ messages, loading }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'sent': return 'bg-green-100 text-green-800';
      case 'delivered': return 'bg-blue-100 text-blue-800';
      case 'read': return 'bg-purple-100 text-purple-800';
      case 'failed': return 'bg-red-100 text-red-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'rate_limited': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <GlassCard className="p-6">
        <div className="flex items-center justify-center h-64">
          <div className="flex items-center gap-3">
            <RefreshCw size={20} className="animate-spin text-blue-600" />
            <span className="text-gray-600">Loading messages...</span>
          </div>
        </div>
      </GlassCard>
    );
  }

  return (
    <GlassCard className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">Message Queue</h2>
          <p className="text-gray-600">Monitor and manage message delivery status</p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-2 px-3 py-2 bg-blue-100 text-blue-800 rounded-lg">
            <Activity size={16} />
            <span className="text-sm font-medium">{messages.length} messages</span>
          </div>
          <div className="flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg">
            <CheckCircle size={16} />
            <span className="text-sm font-medium">
              {messages.filter(m => m.status === 'sent' || m.status === 'delivered' || m.status === 'read').length} delivered
            </span>
          </div>
          <div className="flex items-center gap-2 px-3 py-2 bg-red-100 text-red-800 rounded-lg">
            <XCircle size={16} />
            <span className="text-sm font-medium">
              {messages.filter(m => m.status === 'failed' || m.status === 'rate_limited').length} failed
            </span>
          </div>
        </div>
      </div>

      {messages.length === 0 ? (
        <div className="text-center py-12">
          <Send size={48} className="text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No messages in queue</h3>
          <p className="text-gray-600">Messages will appear here when sent through the system</p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-medium text-gray-700">Recipient</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Message</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Type</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Status</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Created</th>
                <th className="text-center py-3 px-4 font-medium text-gray-700">Actions</th>
              </tr>
            </thead>
            <tbody>
              {messages.map((message) => (
                <tr key={message.id} className="border-b border-gray-100 hover:bg-gray-50">
                  <td className="py-3 px-4">
                    <div className="font-medium text-gray-900">{message.chat_id}</div>
                  </td>
                  <td className="py-3 px-4">
                    <div className="max-w-xs truncate text-gray-600">
                      {message.content}
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <span className="capitalize text-gray-600">{message.message_type}</span>
                  </td>
                  <td className="py-3 px-4">
                    <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(message.status)}`}>
                      <span className="capitalize">{message.status}</span>
                    </div>
                  </td>
                  <td className="py-3 px-4 text-gray-600">
                    {new Date(message.created_at).toLocaleString()}
                  </td>
                  <td className="py-3 px-4 text-center">
                    <div className="flex items-center justify-center gap-2">
                      <button className="p-1 text-gray-500 hover:text-blue-600 transition-colors">
                        <Eye size={16} />
                      </button>
                      {message.status === 'failed' && (
                        <button className="p-1 text-gray-500 hover:text-green-600 transition-colors">
                          <RefreshCw size={16} />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </GlassCard>
  );
};

// Campaigns Tab Component
const CampaignsTab: React.FC<{
  campaigns: GreenApiBulkCampaign[];
  loading: boolean;
  onAddCampaign: () => void;
}> = ({ campaigns, loading, onAddCampaign }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'sending': return 'bg-blue-100 text-blue-800';
      case 'scheduled': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      case 'draft': return 'bg-gray-100 text-gray-800';
      case 'paused': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <GlassCard className="p-6">
        <div className="flex items-center justify-center h-64">
          <div className="flex items-center gap-3">
            <RefreshCw size={20} className="animate-spin text-blue-600" />
            <span className="text-gray-600">Loading campaigns...</span>
          </div>
        </div>
      </GlassCard>
    );
  }

  return (
    <GlassCard className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">Bulk Campaigns</h2>
          <p className="text-gray-600">Create and manage bulk messaging campaigns</p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-2 px-3 py-2 bg-purple-100 text-purple-800 rounded-lg">
            <Target size={16} />
            <span className="text-sm font-medium">{campaigns.length} campaigns</span>
          </div>
          <div className="flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg">
            <CheckCircle size={16} />
            <span className="text-sm font-medium">
              {campaigns.filter(c => c.status === 'completed').length} completed
            </span>
          </div>
          <div className="flex items-center gap-2 px-3 py-2 bg-blue-100 text-blue-800 rounded-lg">
            <Activity size={16} />
            <span className="text-sm font-medium">
              {campaigns.filter(c => c.status === 'sending').length} active
            </span>
          </div>
          <GlassButton
            onClick={onAddCampaign}
            className="flex items-center gap-2"
          >
            <Plus size={16} />
            New Campaign
          </GlassButton>
        </div>
      </div>

      {campaigns.length === 0 ? (
        <div className="text-center py-12">
          <Target size={48} className="text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No campaigns found</h3>
          <p className="text-gray-600 mb-6">Create your first bulk messaging campaign</p>
          <GlassButton onClick={onAddCampaign}>
            <Plus size={16} />
            Create Campaign
          </GlassButton>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {campaigns.map((campaign) => (
            <div key={campaign.id} className="bg-white border border-gray-200 rounded-lg p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <Target size={20} className="text-purple-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">{campaign.name}</h3>
                    <p className="text-sm text-gray-600">{campaign.description}</p>
                  </div>
                </div>
                <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(campaign.status)}`}>
                  <span className="capitalize">{campaign.status}</span>
                </div>
              </div>

              <div className="space-y-2 text-sm text-gray-600 mb-4">
                <div className="flex items-center justify-between">
                  <span>Recipients:</span>
                  <span className="font-medium">{campaign.total_recipients}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Sent:</span>
                  <span className="font-medium text-green-600">{campaign.sent_count}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Delivered:</span>
                  <span className="font-medium text-blue-600">{campaign.delivered_count}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Failed:</span>
                  <span className="font-medium text-red-600">{campaign.failed_count}</span>
                </div>
              </div>

              <div className="flex items-center gap-2 pt-3 border-t border-gray-100">
                <button className="flex items-center gap-1 text-blue-600 hover:text-blue-700 text-sm font-medium">
                  <Eye size={14} />
                  View Details
                </button>
                <button className="flex items-center gap-1 text-gray-600 hover:text-gray-700 text-sm font-medium">
                  <Edit size={14} />
                  Edit
                </button>
                {campaign.status === 'draft' && (
                  <button className="flex items-center gap-1 text-red-600 hover:text-red-700 text-sm font-medium">
                    <Trash2 size={14} />
                    Delete
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </GlassCard>
  );
};

// TestMessagesTab Component
const TestMessagesTab: React.FC<{
  instances: GreenApiInstance[];
  loading: boolean;
}> = ({ instances, loading }) => {
  const [selectedInstance, setSelectedInstance] = useState<string>('');
  const [recipientNumber, setRecipientNumber] = useState('');
  const [messageContent, setMessageContent] = useState('');
  const [messageType, setMessageType] = useState<'text' | 'image' | 'document' | 'image-url' | 'document-url' | 'interactive-buttons' | 'poll' | 'upload-file' | 'location' | 'contact' | 'interactive-buttons-reply'>('text');
  const [isSending, setIsSending] = useState(false);
  const [testResults, setTestResults] = useState<any[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [linkPreview, setLinkPreview] = useState(false);
  const [typingTime, setTypingTime] = useState<number | undefined>();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState('');
  const [fileCaption, setFileCaption] = useState('');
  const [fileUrl, setFileUrl] = useState('');
  const [urlFileName, setUrlFileName] = useState('');
  const [quotedMessageId, setQuotedMessageId] = useState('');
  const [typingType, setTypingType] = useState<'text' | 'recording'>('text');
  const [buttonHeader, setButtonHeader] = useState('');
  const [buttonBody, setButtonBody] = useState('');
  const [buttonFooter, setButtonFooter] = useState('');
  const [buttons, setButtons] = useState<Array<{
    type: 'copy' | 'call' | 'url';
    buttonId: string;
    buttonText: string;
    copyCode?: string;
    phoneNumber?: string;
    url?: string;
  }>>([]);
  const [pollMessage, setPollMessage] = useState('');
  const [pollOptions, setPollOptions] = useState<string[]>(['', '']);
  const [multipleAnswers, setMultipleAnswers] = useState(false);
  const [uploadedFileUrl, setUploadedFileUrl] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [locationName, setLocationName] = useState('');
  const [locationAddress, setLocationAddress] = useState('');
  const [latitude, setLatitude] = useState('');
  const [longitude, setLongitude] = useState('');
  const [contactPhone, setContactPhone] = useState('');
  const [contactFirstName, setContactFirstName] = useState('');
  const [contactMiddleName, setContactMiddleName] = useState('');
  const [contactLastName, setContactLastName] = useState('');
  const [contactCompany, setContactCompany] = useState('');
  const [replyButtonHeader, setReplyButtonHeader] = useState('');
  const [replyButtonBody, setReplyButtonBody] = useState('');
  const [replyButtonFooter, setReplyButtonFooter] = useState('');
  const [replyButtons, setReplyButtons] = useState<Array<{ buttonId: string; buttonText: string }>>([]);

  // Filter connected instances only
  const connectedInstances = instances.filter(instance => instance.status === 'connected');

  const sendTestMessage = async () => {
    if (!selectedInstance || !recipientNumber) {
      toast.error('Please select an instance and enter a recipient number');
      return;
    }

    // Validate based on message type
    if (messageType === 'text' && !messageContent.trim()) {
      toast.error('Please enter a message');
      return;
    }

    if ((messageType === 'image' || messageType === 'document') && !selectedFile) {
      toast.error('Please select a file to upload');
      return;
    }

    if ((messageType === 'image-url' || messageType === 'document-url') && (!fileUrl || !urlFileName)) {
      toast.error('Please provide both file URL and filename');
      return;
    }

    if (messageType === 'interactive-buttons') {
      if (!buttonBody.trim()) {
        toast.error('Please provide a message body for interactive buttons');
        return;
      }
      if (buttons.length === 0) {
        toast.error('Please add at least one button');
        return;
      }
      
      // Validate each button
      for (let i = 0; i < buttons.length; i++) {
        const button = buttons[i];
        if (!button.buttonText.trim()) {
          toast.error(`Button ${i + 1}: Please provide button text`);
          return;
        }
        if (button.buttonText.length > 25) {
          toast.error(`Button ${i + 1}: Button text must be 25 characters or less`);
          return;
        }
        
        if (button.type === 'copy' && !button.copyCode?.trim()) {
          toast.error(`Button ${i + 1}: Please provide copy code`);
          return;
        }
        if (button.type === 'call' && !button.phoneNumber?.trim()) {
          toast.error(`Button ${i + 1}: Please provide phone number`);
          return;
        }
        if (button.type === 'url' && !button.url?.trim()) {
          toast.error(`Button ${i + 1}: Please provide URL`);
          return;
        }
      }
    }

    if (messageType === 'poll') {
      if (!pollMessage.trim()) {
        toast.error('Please provide a poll question');
        return;
      }
      if (pollMessage.length > 255) {
        toast.error('Poll question must be 255 characters or less');
        return;
      }
      
      const validOptions = pollOptions.filter(option => option.trim() !== '');
      if (validOptions.length < 2) {
        toast.error('Please provide at least 2 poll options');
        return;
      }
      if (validOptions.length > 12) {
        toast.error('Maximum 12 poll options allowed');
        return;
      }
      
      // Check for duplicate options
      const uniqueOptions = new Set(validOptions);
      if (uniqueOptions.size !== validOptions.length) {
        toast.error('Poll options must be unique');
        return;
      }
      
      // Check option length
      for (let i = 0; i < validOptions.length; i++) {
        if (validOptions[i].length > 100) {
          toast.error(`Option ${i + 1}: Must be 100 characters or less`);
          return;
        }
      }
    }

    if (messageType === 'upload-file') {
      if (!uploadedFileUrl) {
        toast.error('Please upload a file first');
        return;
      }
      if (!fileName.trim()) {
        toast.error('Please provide a filename for sending');
        return;
      }
    }

    if (messageType === 'location') {
      if (!latitude.trim() || !longitude.trim()) {
        toast.error('Please provide both latitude and longitude');
        return;
      }
      
      const lat = parseFloat(latitude);
      const lng = parseFloat(longitude);
      
      if (isNaN(lat) || isNaN(lng)) {
        toast.error('Please provide valid numeric coordinates');
        return;
      }
      
      if (lat < -90 || lat > 90) {
        toast.error('Latitude must be between -90 and 90 degrees');
        return;
      }
      
      if (lng < -180 || lng > 180) {
        toast.error('Longitude must be between -180 and 180 degrees');
        return;
      }
    }

    if (messageType === 'contact') {
      if (!contactPhone.trim()) {
        toast.error('Please provide a phone number');
        return;
      }
      
      // Validate phone number format (11-12 digits, no +)
      const phoneRegex = /^\d{11,12}$/;
      if (!phoneRegex.test(contactPhone)) {
        toast.error('Phone number must be 11-12 digits without +');
        return;
      }
      
      // Check if at least one name field or company is provided
      if (!contactFirstName && !contactMiddleName && !contactLastName && !contactCompany) {
        toast.error('Please provide at least one name field or company');
        return;
      }
      
      // Validate phone number is a safe integer
      const phoneNumber = parseInt(contactPhone);
      if (isNaN(phoneNumber) || phoneNumber > Number.MAX_SAFE_INTEGER) {
        toast.error('Phone number is too large or invalid');
        return;
      }
    }

    if (messageType === 'interactive-buttons-reply') {
      if (!replyButtonBody.trim()) {
        toast.error('Please provide a message body');
        return;
      }
      
      if (replyButtons.length === 0) {
        toast.error('Please add at least one button');
        return;
      }
      
      if (replyButtons.length > 3) {
        toast.error('Maximum 3 buttons allowed');
        return;
      }
      
      // Validate each button
      for (let i = 0; i < replyButtons.length; i++) {
        const button = replyButtons[i];
        if (!button.buttonId.trim()) {
          toast.error(`Button ${i + 1}: Please provide a button ID`);
          return;
        }
        if (!button.buttonText.trim()) {
          toast.error(`Button ${i + 1}: Please provide button text`);
          return;
        }
        if (button.buttonText.length > 25) {
          toast.error(`Button ${i + 1}: Button text must be 25 characters or less`);
          return;
        }
      }
      
      // Check for duplicate button IDs
      const buttonIds = replyButtons.map(btn => btn.buttonId.trim());
      const uniqueIds = new Set(buttonIds);
      if (uniqueIds.size !== buttonIds.length) {
        toast.error('Button IDs must be unique');
        return;
      }
    }

    const instance = instances.find(i => i.id === selectedInstance);
    if (!instance) {
      toast.error('Selected instance not found');
      return;
    }

    setIsSending(true);
    setShowResults(false);

    try {
            console.log('📤 Sending test message...', {
        instanceId: instance.instance_id,
        recipient: recipientNumber,
        message: messageContent,
        type: messageType
      });

      // Use direct API call by default (proxy not working locally)
      const directApiUrl = instance.green_api_host || 'https://api.green-api.com';
      const directApiToken = instance.green_api_token || instance.api_token;
      
      let response;
      
      // Handle file uploads using SendFileByUpload endpoint
      if ((messageType === 'image' || messageType === 'document') && selectedFile) {
        const mediaUrl = 'https://media.green-api.com'; // Green API media endpoint
        const uploadUrl = `${mediaUrl}/waInstance${instance.instance_id}/sendFileByUpload/${directApiToken}`;
        
        console.log('📤 Uploading file...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          fileName: selectedFile.name,
          fileSize: selectedFile.size,
          type: messageType
        });
        
        console.log('🔗 Upload URL:', uploadUrl);
        
        // Create FormData for file upload
        const formData = new FormData();
        formData.append('chatId', `${recipientNumber}@c.us`);
        formData.append('file', selectedFile);
        
        if (fileName) {
          formData.append('fileName', fileName);
        }
        
        if (fileCaption) {
          formData.append('caption', fileCaption);
        }
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          formData.append('typingTime', typingTime.toString());
        }
        
        response = await fetch(uploadUrl, {
          method: 'POST',
          body: formData
        });
      } else if ((messageType === 'image-url' || messageType === 'document-url') && fileUrl && urlFileName) {
        // Handle URL-based file sending using SendFileByUrl endpoint
        const sendFileByUrlUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendFileByUrl/${directApiToken}`;
        
        console.log('📤 Sending file by URL...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          fileUrl: fileUrl,
          fileName: urlFileName,
          type: messageType
        });
        
        console.log('🔗 SendFileByUrl URL:', sendFileByUrlUrl);
        
        // Prepare payload according to Green API SendFileByUrl documentation
        const filePayload: any = {
          chatId: `${recipientNumber}@c.us`,
          urlFile: fileUrl,
          fileName: urlFileName
        };
        
        if (fileCaption) {
          filePayload.caption = fileCaption;
        }
        
        if (quotedMessageId) {
          filePayload.quotedMessageId = quotedMessageId;
        }
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          filePayload.typingTime = typingTime;
        }
        
        if (typingType === 'recording') {
          filePayload.typingType = 'recording';
        }
        
        console.log('📦 File payload:', JSON.stringify(filePayload, null, 2));
        
        response = await fetch(sendFileByUrlUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(filePayload)
        });
      } else if (messageType === 'interactive-buttons') {
        // Handle interactive buttons using SendInteractiveButtons endpoint
        const sendInteractiveButtonsUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendInteractiveButtons/${directApiToken}`;
        
        console.log('📤 Sending interactive buttons...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          buttonsCount: buttons.length,
          header: buttonHeader,
          body: buttonBody,
          footer: buttonFooter
        });
        
        console.log('🔗 SendInteractiveButtons URL:', sendInteractiveButtonsUrl);
        
        // Prepare payload according to Green API SendInteractiveButtons documentation
        const buttonsPayload: any = {
          chatId: `${recipientNumber}@c.us`,
          body: buttonBody
        };
        
        if (buttonHeader) {
          buttonsPayload.header = buttonHeader;
        }
        
        if (buttonFooter) {
          buttonsPayload.footer = buttonFooter;
        }
        
        buttonsPayload.buttons = buttons.map((button, index) => {
          const buttonPayload: any = {
            type: button.type,
            buttonId: button.buttonId,
            buttonText: button.buttonText
          };
          
          if (button.type === 'copy' && button.copyCode) {
            buttonPayload.copyCode = button.copyCode;
          } else if (button.type === 'call' && button.phoneNumber) {
            buttonPayload.phoneNumber = button.phoneNumber;
          } else if (button.type === 'url' && button.url) {
            buttonPayload.url = button.url;
          }
          
          return buttonPayload;
        });
        
        console.log('📦 Buttons payload:', JSON.stringify(buttonsPayload, null, 2));
        
        response = await fetch(sendInteractiveButtonsUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(buttonsPayload)
        });
      } else if (messageType === 'poll') {
        // Handle poll sending using SendPoll endpoint
        const sendPollUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendPoll/${directApiToken}`;

        
        console.log('🔗 SendPoll URL:', sendPollUrl);
        
        // Prepare payload according to Green API SendPoll documentation
        const pollPayload: any = {
          chatId: `${recipientNumber}@c.us`,
          message: pollMessage,
          options: pollOptions.map(option => ({ optionName: option })),
          multipleAnswers: multipleAnswers
        };
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          pollPayload.typingTime = typingTime;
        }
        
        console.log('📦 Poll payload:', JSON.stringify(pollPayload, null, 2));
        
        response = await fetch(sendPollUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(pollPayload)
        });
      } else if (messageType === 'upload-file' && uploadedFileUrl) {
        // Handle sending uploaded file using SendFileByUrl endpoint
        const sendFileByUrlUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendFileByUrl/${directApiToken}`;
        
        console.log('📤 Sending uploaded file...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          uploadedUrl: uploadedFileUrl,
          fileName: fileName,
          caption: fileCaption
        });
        
        console.log('🔗 SendFileByUrl URL:', sendFileByUrlUrl);
        
        // Prepare payload according to Green API SendFileByUrl documentation
        const filePayload: any = {
          chatId: `${recipientNumber}@c.us`,
          urlFile: uploadedFileUrl,
          fileName: fileName
        };
        
        if (fileCaption) {
          filePayload.caption = fileCaption;
        }
        
        if (quotedMessageId) {
          filePayload.quotedMessageId = quotedMessageId;
        }
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          filePayload.typingTime = typingTime;
        }
        
        if (typingType === 'recording') {
          filePayload.typingType = 'recording';
        }
        
        console.log('📦 Uploaded file payload:', JSON.stringify(filePayload, null, 2));
        
        response = await fetch(sendFileByUrlUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(filePayload)
        });
      } else if (messageType === 'location') {
        // Handle location sending using SendLocation endpoint
        const sendLocationUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendLocation/${directApiToken}`;
        
        console.log('📍 Sending location...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          nameLocation: locationName,
          address: locationAddress,
          latitude: latitude,
          longitude: longitude
        });
        
        console.log('🔗 SendLocation URL:', sendLocationUrl);
        
        // Prepare payload according to Green API SendLocation documentation
        const locationPayload: any = {
          chatId: `${recipientNumber}@c.us`,
          latitude: parseFloat(latitude),
          longitude: parseFloat(longitude)
        };
        
        if (locationName) {
          locationPayload.nameLocation = locationName;
        }
        
        if (locationAddress) {
          locationPayload.address = locationAddress;
        }
        
        if (quotedMessageId) {
          locationPayload.quotedMessageId = quotedMessageId;
        }
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          locationPayload.typingTime = typingTime;
        }
        
        console.log('📦 Location payload:', JSON.stringify(locationPayload, null, 2));
        
        response = await fetch(sendLocationUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(locationPayload)
        });
      } else if (messageType === 'contact') {
        // Handle contact sending using SendContact endpoint
        const sendContactUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendContact/${directApiToken}`;
        
        console.log('👤 Sending contact...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          contactPhone: contactPhone,
          firstName: contactFirstName,
          middleName: contactMiddleName,
          lastName: contactLastName,
          company: contactCompany
        });
        
        console.log('🔗 SendContact URL:', sendContactUrl);
        
        // Prepare contact object according to Green API SendContact documentation
        const contactObject: any = {
          phoneContact: parseInt(contactPhone)
        };
        
        // Add name fields if provided (at least one is required)
        if (contactFirstName) {
          contactObject.firstName = contactFirstName;
        }
        if (contactMiddleName) {
          contactObject.middleName = contactMiddleName;
        }
        if (contactLastName) {
          contactObject.lastName = contactLastName;
        }
        if (contactCompany) {
          contactObject.company = contactCompany;
        }
        
        // Prepare payload according to Green API SendContact documentation
        const contactPayload: any = {
          chatId: `${recipientNumber}@c.us`,
          contact: contactObject
        };
        
        if (quotedMessageId) {
          contactPayload.quotedMessageId = quotedMessageId;
        }
        
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          contactPayload.typingTime = typingTime;
        }
        
        console.log('📦 Contact payload:', JSON.stringify(contactPayload, null, 2));
        
        response = await fetch(sendContactUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(contactPayload)
        });
      } else if (messageType === 'interactive-buttons-reply') {
        // Handle interactive buttons reply using SendInteractiveButtonsReply endpoint
        const sendInteractiveButtonsReplyUrl = `${directApiUrl}/waInstance${instance.instance_id}/sendInteractiveButtonsReply/${directApiToken}`;
        
        console.log('🔘 Sending interactive buttons reply...', {
          instanceId: instance.instance_id,
          recipient: recipientNumber,
          header: replyButtonHeader,
          body: replyButtonBody,
          footer: replyButtonFooter,
          buttonsCount: replyButtons.length
        });
        
        console.log('🔗 SendInteractiveButtonsReply URL:', sendInteractiveButtonsReplyUrl);
        
        // Prepare payload according to Green API SendInteractiveButtonsReply documentation
        const interactiveButtonsReplyPayload: any = {
          chatId: `${recipientNumber}@c.us`,
          body: replyButtonBody,
          buttons: replyButtons
        };
        
        if (replyButtonHeader) {
          interactiveButtonsReplyPayload.header = replyButtonHeader;
        }
        
        if (replyButtonFooter) {
          interactiveButtonsReplyPayload.footer = replyButtonFooter;
        }
        
        console.log('📦 Interactive Buttons Reply payload:', JSON.stringify(interactiveButtonsReplyPayload, null, 2));
        
        response = await fetch(sendInteractiveButtonsReplyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(interactiveButtonsReplyPayload)
        });
      } else {
        // Regular text message
        console.log('🔗 API URL:', `${directApiUrl}/waInstance${instance.instance_id}/sendMessage/${directApiToken}`);
        
        // Prepare message payload according to Green API documentation
        const messagePayload: any = {
          chatId: `${recipientNumber}@c.us`,
          message: messageContent
        };

        // Add advanced options
        if (linkPreview) {
          messagePayload.linkPreview = true;
        }
        if (typingTime && typingTime >= 1000 && typingTime <= 20000) {
          messagePayload.typingTime = typingTime;
        }

        console.log('📦 Request payload:', JSON.stringify(messagePayload, null, 2));

        response = await fetch(`${directApiUrl}/waInstance${instance.instance_id}/sendMessage/${directApiToken}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(messagePayload)
        });
      }

      let result;
      try {
        // Check if response has content
        const responseText = await response.text();
        console.log('📡 Raw response:', responseText);
        console.log('📡 Response status:', response.status);
        console.log('📡 Response headers:', Object.fromEntries(response.headers.entries()));
        
        if (!responseText || responseText.trim() === '') {
          result = { 
            error: 'Empty response from Green API',
            details: 'The API returned an empty response'
          };
        } else {
          try {
            result = JSON.parse(responseText);
          } catch (parseError) {
            console.error('❌ JSON parsing error:', parseError);
            result = { 
              error: 'Invalid JSON response from Green API',
              details: responseText
            };
          }
        }
      } catch (textError: any) {
        console.error('❌ Could not read response:', textError);
        result = { 
          error: 'Could not read response from Green API',
          details: textError?.message || 'Unknown error'
        };
      }
      
      const testResult = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        instanceId: instance.instance_id,
        phoneNumber: instance.phone_number,
        recipient: recipientNumber,
        message: messageType === 'text' ? messageContent : 
                messageType === 'interactive-buttons' ? buttonBody : 
                messageType === 'poll' ? pollMessage :
                messageType === 'upload-file' ? `Uploaded: ${fileName}` :
                messageType === 'location' ? `${locationName || 'Location'}: ${latitude}, ${longitude}` :
                messageType === 'contact' ? `${contactFirstName || contactMiddleName || contactLastName || contactCompany || 'Contact'}: ${contactPhone}` :
                messageType === 'interactive-buttons-reply' ? replyButtonBody :
                fileCaption || '',
        type: messageType,
        fileName: selectedFile?.name || urlFileName || '',
        fileUrl: fileUrl || '',
        quotedMessageId: quotedMessageId || '',
        typingType: typingType || 'text',
        buttonCount: messageType === 'interactive-buttons' ? buttons.length : undefined,
        pollOptionsCount: messageType === 'poll' ? pollOptions.filter(opt => opt.trim() !== '').length : undefined,
        multipleAnswers: messageType === 'poll' ? multipleAnswers : undefined,
        uploadedFileUrl: messageType === 'upload-file' ? uploadedFileUrl : undefined,
        locationCoordinates: messageType === 'location' ? `${latitude}, ${longitude}` : undefined,
        locationName: messageType === 'location' ? locationName : undefined,
        locationAddress: messageType === 'location' ? locationAddress : undefined,
        contactPhone: messageType === 'contact' ? contactPhone : undefined,
        contactName: messageType === 'contact' ? `${contactFirstName || ''} ${contactMiddleName || ''} ${contactLastName || ''}`.trim() || contactCompany : undefined,
        replyButtonHeader: messageType === 'interactive-buttons-reply' ? replyButtonHeader : undefined,
        replyButtonFooter: messageType === 'interactive-buttons-reply' ? replyButtonFooter : undefined,
        replyButtonsCount: messageType === 'interactive-buttons-reply' ? replyButtons.length : undefined,
        success: response.ok,
        response: result,
        error: !response.ok ? (result?.error || 'Unknown error') : null
      };

      setTestResults(prev => [testResult, ...prev]);
      setShowResults(true);

      if (response.ok) {
        toast.success('Test message sent successfully!');
        // Clear form after successful send
        setMessageContent('');
      } else {
        toast.error(`Failed to send message: ${result.error || 'Unknown error'}`);
      }

    } catch (error: any) {
      console.error('❌ Error sending test message:', error);
      
      const testResult = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        instanceId: instance?.instance_id || 'unknown',
        phoneNumber: instance?.phone_number || 'unknown',
        recipient: recipientNumber,
        message: messageContent,
        type: messageType,
        success: false,
        response: null,
        error: error.message || 'Unknown error occurred'
      };

      setTestResults(prev => [testResult, ...prev]);
      setShowResults(true);
      
      // Show more specific error messages
      if (error.message?.includes('JSON')) {
        toast.error('Invalid response from server - check proxy function');
      } else if (error.message?.includes('fetch')) {
        toast.error('Network error - check internet connection');
      } else {
        toast.error(`Failed to send message: ${error.message || 'Unknown error'}`);
      }
    } finally {
      setIsSending(false);
    }
  };

  const clearResults = () => {
    setTestResults([]);
    setShowResults(false);
  };

  // Auto-detect message type based on content
  const detectMessageType = (content: string): 'text' | 'image' | 'document' | 'image-url' | 'document-url' | 'interactive-buttons' | 'poll' => {
    const lowerContent = content.toLowerCase();
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'];
    const documentExtensions = ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'];
    
    // Check if content contains image URLs
    if (imageExtensions.some(ext => lowerContent.includes(ext)) || 
        lowerContent.includes('image') || 
        lowerContent.includes('photo') ||
        lowerContent.includes('picture')) {
      return 'image';
    }
    
    // Check if content contains document URLs
    if (documentExtensions.some(ext => lowerContent.includes(ext)) || 
        lowerContent.includes('document') || 
        lowerContent.includes('file') ||
        lowerContent.includes('pdf')) {
      return 'document';
    }
    
    return 'text';
  };

  const handleTemplateClick = (template: { name: string; message: string }) => {
    setMessageContent(template.message);
    setMessageType(detectMessageType(template.message));
    
    // Clear file selection when using text templates
    if (template.name !== 'Image Upload' && template.name !== 'Document Upload' && 
        template.name !== 'Image URL' && template.name !== 'Document URL' &&
        template.name !== 'Interactive Buttons' && template.name !== 'Poll') {
      setSelectedFile(null);
      setFileName('');
      setFileCaption('');
      setFileUrl('');
      setUrlFileName('');
      setQuotedMessageId('');
      setTypingType('text');
      setLocationName('');
      setLocationAddress('');
      setLatitude('');
      setLongitude('');
      setContactPhone('');
      setContactFirstName('');
      setContactMiddleName('');
      setContactLastName('');
      setContactCompany('');
      setReplyButtonHeader('');
      setReplyButtonBody('');
      setReplyButtonFooter('');
      setReplyButtons([]);
    }
    
    // Set message type for file templates
    if (template.name === 'Image Upload') {
      setMessageType('image');
    } else if (template.name === 'Document Upload') {
      setMessageType('document');
    } else if (template.name === 'Image URL') {
      setMessageType('image-url');
    } else if (template.name === 'Document URL') {
      setMessageType('document-url');
    } else if (template.name === 'Interactive Buttons') {
      setMessageType('interactive-buttons');
    } else if (template.name === 'Poll') {
      setMessageType('poll');
    } else if (template.name === 'Upload File') {
      setMessageType('upload-file');
    } else if (template.name === 'Location') {
      setMessageType('location');
    } else if (template.name === 'Contact') {
      setMessageType('contact');
    } else if (template.name === 'Interactive Buttons Reply') {
      setMessageType('interactive-buttons-reply');
    }
    
    // Auto-enable link preview for link test template
    if (template.name === 'Link Test') {
      setLinkPreview(true);
    }
  };

  if (loading) {
    return (
      <GlassCard className="p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </GlassCard>
    );
  }

  return (
    <div className="space-y-6">
      {/* Test Message Form */}
      <GlassCard className="p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-900">Send Test Message</h2>
          <p className="text-gray-600">Test your WhatsApp integration by sending messages</p>
        </div>

        <div className="space-y-6">
          {/* Instance Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Select WhatsApp Instance *
            </label>
            <select
              value={selectedInstance}
              onChange={(e) => setSelectedInstance(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              disabled={connectedInstances.length === 0}
            >
              <option value="">Choose a connected instance</option>
              {connectedInstances.map((instance) => (
                <option key={instance.id} value={instance.id}>
                  {instance.phone_number} ({instance.instance_id})
                </option>
              ))}
            </select>
            {connectedInstances.length === 0 && (
              <p className="text-sm text-red-600 mt-2">
                No connected instances available. Please connect an instance first.
              </p>
            )}
          </div>

          {/* Recipient Number */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Recipient Phone Number *
            </label>
            <input
              type="text"
              value={recipientNumber}
              onChange={(e) => setRecipientNumber(e.target.value)}
              placeholder="+1234567890 (with country code)"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            />
            <p className="text-xs text-gray-500 mt-1">
              Include country code (e.g., +1 for US, +44 for UK)
            </p>
          </div>

          {/* Message Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Message Type
            </label>
            <select
              value={messageType}
              onChange={(e) => setMessageType(e.target.value as 'text' | 'image' | 'document' | 'image-url' | 'document-url' | 'interactive-buttons' | 'poll' | 'upload-file' | 'location' | 'contact' | 'interactive-buttons-reply')}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            >
              <option value="text">Text Message</option>
              <option value="image">Image (File Upload)</option>
              <option value="document">Document (File Upload)</option>
              <option value="image-url">Image (URL)</option>
              <option value="document-url">Document (URL)</option>
              <option value="interactive-buttons">Interactive Buttons</option>
              <option value="poll">Poll</option>
              <option value="upload-file">Upload File (2-Step)</option>
              <option value="location">Location</option>
              <option value="contact">Contact</option>
              <option value="interactive-buttons-reply">Interactive Buttons Reply (Beta)</option>
            </select>
            <p className="text-xs text-gray-500 mt-1">
              Choose between file uploads or URL-based file sending
            </p>
          </div>

          {/* File Upload Section */}
          {(messageType === 'image' || messageType === 'document') && (
            <div className="space-y-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h4 className="text-sm font-medium text-blue-900">File Upload</h4>
              
              {/* File Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Select File *
                </label>
                <input
                  type="file"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    setSelectedFile(file || null);
                    setFileName(file?.name || '');
                  }}
                  accept={
                    messageType === 'image' 
                      ? 'image/*' 
                      : '.pdf,.doc,.docx,.txt,.rtf,.odt,.xls,.xlsx,.ppt,.pptx'
                  }
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                {selectedFile && (
                  <p className="text-xs text-green-600 mt-1">
                    Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
                  </p>
                )}
              </div>

              {/* File Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  File Name (Optional)
                </label>
                <input
                  type="text"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  placeholder="custom-name.jpg"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Leave empty to use original filename
                </p>
              </div>

              {/* File Caption */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Caption (Optional)
                </label>
                <textarea
                  value={fileCaption}
                  onChange={(e) => setFileCaption(e.target.value)}
                  placeholder="Add a caption to your file..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {fileCaption.length}/20000 characters
                </p>
              </div>
            </div>
          )}

          {/* URL-based File Section */}
          {(messageType === 'image-url' || messageType === 'document-url') && (
            <div className="space-y-4 p-4 bg-green-50 rounded-lg border border-green-200">
              <h4 className="text-sm font-medium text-green-900">File URL</h4>
              
              {/* File URL Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  File URL *
                </label>
                <input
                  type="url"
                  value={fileUrl}
                  onChange={(e) => setFileUrl(e.target.value)}
                  placeholder="https://example.com/file.jpg"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Must be a direct link to the file (not a webpage)
                </p>
              </div>

              {/* File Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  File Name *
                </label>
                <input
                  type="text"
                  value={urlFileName}
                  onChange={(e) => setUrlFileName(e.target.value)}
                  placeholder="file.jpg"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Must include file extension (e.g., image.jpg, document.pdf)
                </p>
              </div>

              {/* File Caption */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Caption (Optional)
                </label>
                <textarea
                  value={fileCaption}
                  onChange={(e) => setFileCaption(e.target.value)}
                  placeholder="Add a caption to your file..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {fileCaption.length}/20000 characters
                </p>
              </div>
            </div>
          )}

          {/* Interactive Buttons Section */}
          {messageType === 'interactive-buttons' && (
            <div className="space-y-4 p-4 bg-purple-50 rounded-lg border border-purple-200">
              <h4 className="text-sm font-medium text-purple-900">Interactive Buttons</h4>
              
              {/* Header */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Header (Optional)
                </label>
                <input
                  type="text"
                  value={buttonHeader}
                  onChange={(e) => setButtonHeader(e.target.value)}
                  placeholder="Message title"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
              </div>

              {/* Body */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Body *
                </label>
                <textarea
                  value={buttonBody}
                  onChange={(e) => setButtonBody(e.target.value)}
                  placeholder="Message text (max 20000 characters)"
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {buttonBody.length}/20000 characters
                </p>
              </div>

              {/* Footer */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Footer (Optional)
                </label>
                <input
                  type="text"
                  value={buttonFooter}
                  onChange={(e) => setButtonFooter(e.target.value)}
                  placeholder="Message footer"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
              </div>

              {/* Buttons */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Buttons * (Max 3 buttons, 25 chars each)
                </label>
                <div className="space-y-3">
                  {buttons.map((button, index) => (
                    <div key={index} className="p-3 bg-white rounded-lg border border-gray-200">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">Button {index + 1}</span>
                        <button
                          type="button"
                          onClick={() => setButtons(buttons.filter((_, i) => i !== index))}
                          className="text-red-500 hover:text-red-700 text-sm"
                        >
                          Remove
                        </button>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">Type</label>
                          <select
                            value={button.type}
                            onChange={(e) => {
                              const newButtons = [...buttons];
                              newButtons[index].type = e.target.value as 'copy' | 'call' | 'url';
                              setButtons(newButtons);
                            }}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          >
                            <option value="copy">Copy</option>
                            <option value="call">Call</option>
                            <option value="url">URL</option>
                          </select>
                        </div>
                        
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">Button Text *</label>
                          <input
                            type="text"
                            value={button.buttonText}
                            onChange={(e) => {
                              const newButtons = [...buttons];
                              newButtons[index].buttonText = e.target.value;
                              setButtons(newButtons);
                            }}
                            placeholder="Button text (max 25 chars)"
                            maxLength={25}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          />
                        </div>
                      </div>

                      {/* Type-specific fields */}
                      {button.type === 'copy' && (
                        <div className="mt-3">
                          <label className="block text-xs font-medium text-gray-600 mb-1">Copy Code *</label>
                          <input
                            type="text"
                            value={button.copyCode || ''}
                            onChange={(e) => {
                              const newButtons = [...buttons];
                              newButtons[index].copyCode = e.target.value;
                              setButtons(newButtons);
                            }}
                            placeholder="Text to copy when button is clicked"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          />
                        </div>
                      )}

                      {button.type === 'call' && (
                        <div className="mt-3">
                          <label className="block text-xs font-medium text-gray-600 mb-1">Phone Number *</label>
                          <input
                            type="tel"
                            value={button.phoneNumber || ''}
                            onChange={(e) => {
                              const newButtons = [...buttons];
                              newButtons[index].phoneNumber = e.target.value;
                              setButtons(newButtons);
                            }}
                            placeholder="Phone number to call"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          />
                        </div>
                      )}

                      {button.type === 'url' && (
                        <div className="mt-3">
                          <label className="block text-xs font-medium text-gray-600 mb-1">URL *</label>
                          <input
                            type="url"
                            value={button.url || ''}
                            onChange={(e) => {
                              const newButtons = [...buttons];
                              newButtons[index].url = e.target.value;
                              setButtons(newButtons);
                            }}
                            placeholder="https://example.com"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          />
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {buttons.length < 3 && (
                    <button
                      type="button"
                      onClick={() => setButtons([...buttons, {
                        type: 'copy',
                        buttonId: `btn_${Date.now()}`,
                        buttonText: '',
                        copyCode: ''
                      }])}
                      className="w-full py-2 px-4 border-2 border-dashed border-purple-300 rounded-lg text-purple-600 hover:border-purple-400 hover:text-purple-700 transition-colors"
                    >
                      + Add Button
                    </button>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Poll Section */}
          {messageType === 'poll' && (
            <div className="space-y-4 p-4 bg-orange-50 rounded-lg border border-orange-200">
              <h4 className="text-sm font-medium text-orange-900">Poll Configuration</h4>
              
              {/* Poll Message */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Poll Question *
                </label>
                <textarea
                  value={pollMessage}
                  onChange={(e) => setPollMessage(e.target.value)}
                  placeholder="Enter your poll question (max 255 characters)"
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {pollMessage.length}/255 characters
                </p>
              </div>

              {/* Poll Options */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Poll Options * (2-12 options, 100 chars each)
                </label>
                <div className="space-y-3">
                  {pollOptions.map((option, index) => (
                    <div key={index} className="flex items-center gap-3">
                      <input
                        type="text"
                        value={option}
                        onChange={(e) => {
                          const newOptions = [...pollOptions];
                          newOptions[index] = e.target.value;
                          setPollOptions(newOptions);
                        }}
                        placeholder={`Option ${index + 1}`}
                        maxLength={100}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm"
                      />
                      {pollOptions.length > 2 && (
                        <button
                          type="button"
                          onClick={() => setPollOptions(pollOptions.filter((_, i) => i !== index))}
                          className="text-red-500 hover:text-red-700 text-sm px-2 py-1"
                        >
                          Remove
                        </button>
                      )}
                    </div>
                  ))}
                  
                  {pollOptions.length < 12 && (
                    <button
                      type="button"
                      onClick={() => setPollOptions([...pollOptions, ''])}
                      className="w-full py-2 px-4 border-2 border-dashed border-orange-300 rounded-lg text-orange-600 hover:border-orange-400 hover:text-orange-700 transition-colors"
                    >
                      + Add Option
                    </button>
                  )}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  {pollOptions.length}/12 options (minimum 2 required)
                </p>
              </div>

              {/* Multiple Answers */}
              <div className="flex items-center gap-3">
                <input
                  type="checkbox"
                  id="multipleAnswers"
                  checked={multipleAnswers}
                  onChange={(e) => setMultipleAnswers(e.target.checked)}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <label htmlFor="multipleAnswers" className="text-sm text-gray-700">
                  Allow Multiple Answers
                </label>
              </div>
            </div>
          )}

          {/* Upload File Section (2-Step Process) */}
          {messageType === 'upload-file' && (
            <div className="space-y-4 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
              <h4 className="text-sm font-medium text-indigo-900">Upload File (2-Step Process)</h4>
              <p className="text-xs text-indigo-700 mb-4">
                Step 1: Upload file to Green API storage (15-day lifetime)<br/>
                Step 2: Send file using the generated URL
              </p>
              
              {/* File Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Select File *
                </label>
                <input
                  type="file"
                  onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Max 100MB. File type determined by extension.
                </p>
              </div>

              {/* Upload Button */}
              <div>
                <button
                  onClick={async () => {
                    if (!selectedFile || !selectedInstance) {
                      toast.error('Please select a file and instance');
                      return;
                    }

                    const instance = instances.find(i => i.id === selectedInstance);
                    if (!instance) {
                      toast.error('Instance not found');
                      return;
                    }

                    setIsUploading(true);
                    try {
                      const mediaUrl = 'https://media.green-api.com';
                      const uploadUrl = `${mediaUrl}/waInstance${instance.instance_id}/uploadFile/${instance.green_api_token || instance.api_token}`;
                      
                      console.log('📤 Uploading file to Green API storage...', {
                        instanceId: instance.instance_id,
                        fileName: selectedFile.name,
                        fileSize: selectedFile.size,
                        uploadUrl: uploadUrl
                      });

                      // Create FormData for file upload
                      const formData = new FormData();
                      formData.append('file', selectedFile);

                      // Set appropriate Content-Type header
                      const headers: HeadersInit = {};
                      const mimeType = selectedFile.type;
                      if (mimeType && mimeType !== 'application/octet-stream') {
                        headers['Content-Type'] = mimeType;
                      } else {
                        // For files not in MIME type list, use GA-Filename
                        headers['GA-Filename'] = selectedFile.name;
                      }

                      const response = await fetch(uploadUrl, {
                        method: 'POST',
                        headers,
                        body: formData
                      });

                      const result = await response.text();
                      console.log('📡 Upload response:', result);

                      if (response.ok) {
                        try {
                          const data = JSON.parse(result);
                          setUploadedFileUrl(data.urlFile);
                          toast.success('File uploaded successfully! URL generated.');
                  
                        } catch (parseError) {
                          console.error('❌ JSON parsing error:', parseError);
                          toast.error('Invalid response from upload');
                        }
                      } else {
                        console.error('❌ Upload failed:', response.status, result);
                        toast.error(`Upload failed: ${response.status}`);
                      }
                    } catch (error: any) {
                      console.error('❌ Upload error:', error);
                      toast.error(`Upload error: ${error?.message || 'Unknown error'}`);
                    } finally {
                      setIsUploading(false);
                    }
                  }}
                  disabled={!selectedFile || !selectedInstance || isUploading}
                  className="w-full py-3 px-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isUploading ? (
                    <>
                      <RefreshCw size={16} className="animate-spin mr-2" />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload size={16} className="mr-2" />
                      Upload to Green API Storage
                    </>
                  )}
                </button>
              </div>

              {/* Uploaded File URL Display */}
              {uploadedFileUrl && (
                <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                  <h5 className="text-sm font-medium text-green-900 mb-2">Uploaded File URL</h5>
                  <div className="flex items-center gap-2">
                    <input
                      type="text"
                      value={uploadedFileUrl}
                      readOnly
                      className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md bg-gray-50"
                    />
                    <button
                      onClick={() => navigator.clipboard.writeText(uploadedFileUrl)}
                      className="px-3 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                    >
                      Copy
                    </button>
                  </div>
                  <p className="text-xs text-green-600 mt-1">
                    ✅ File uploaded successfully. URL valid for 15 days.
                  </p>
                </div>
              )}

              {/* File Name for Sending */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  File Name for Sending *
                </label>
                <input
                  type="text"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  placeholder="Enter filename with extension"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Must include file extension (e.g., image.jpg, document.pdf)
                </p>
              </div>

              {/* File Caption */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Caption (Optional)
                </label>
                <textarea
                  value={fileCaption}
                  onChange={(e) => setFileCaption(e.target.value)}
                  placeholder="Add a caption to your file..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {fileCaption.length}/20000 characters
                </p>
              </div>
            </div>
          )}

          {/* Location Section */}
          {messageType === 'location' && (
            <div className="space-y-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h4 className="text-sm font-medium text-blue-900">Location Details</h4>
              <p className="text-xs text-blue-700 mb-4">
                Send GPS coordinates and location information
              </p>
              
              {/* Location Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Location Name (Optional)
                </label>
                <input
                  type="text"
                  value={locationName}
                  onChange={(e) => setLocationName(e.target.value)}
                  placeholder="e.g., Restaurant, Office, Home"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
              </div>

              {/* Location Address */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Address (Optional)
                </label>
                <input
                  type="text"
                  value={locationAddress}
                  onChange={(e) => setLocationAddress(e.target.value)}
                  placeholder="e.g., 123 Main St, City, Country"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
              </div>

              {/* Coordinates */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Latitude */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Latitude *
                  </label>
                  <input
                    type="number"
                    step="any"
                    value={latitude}
                    onChange={(e) => setLatitude(e.target.value)}
                    placeholder="e.g., 44.9370129"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Decimal degrees (e.g., 44.9370129)
                  </p>
                </div>

                {/* Longitude */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Longitude *
                  </label>
                  <input
                    type="number"
                    step="any"
                    value={longitude}
                    onChange={(e) => setLongitude(e.target.value)}
                    placeholder="e.g., 89.8728409"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Decimal degrees (e.g., 89.8728409)
                  </p>
                </div>
              </div>

              {/* Current Location Button */}
              <div>
                <button
                  type="button"
                  onClick={() => {
                    if (navigator.geolocation) {
                      navigator.geolocation.getCurrentPosition(
                        (position) => {
                          setLatitude(position.coords.latitude.toString());
                          setLongitude(position.coords.longitude.toString());
                          toast.success('Current location captured!');
                        },
                        (error) => {
                          console.error('Geolocation error:', error);
                          toast.error('Could not get current location');
                        }
                      );
                    } else {
                      toast.error('Geolocation not supported by browser');
                    }
                  }}
                  className="w-full py-3 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  📍 Get Current Location
                </button>
              </div>

              {/* Map Preview */}
              {latitude && longitude && (
                <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
                  <h5 className="text-sm font-medium text-gray-900 mb-2">Location Preview</h5>
                  <div className="text-xs text-gray-600 space-y-1">
                    <div><strong>Coordinates:</strong> {latitude}, {longitude}</div>
                    {locationName && <div><strong>Name:</strong> {locationName}</div>}
                    {locationAddress && <div><strong>Address:</strong> {locationAddress}</div>}
                  </div>
                  <div className="mt-2">
                    <a
                      href={`https://www.google.com/maps?q=${latitude},${longitude}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 text-xs underline"
                    >
                      📍 View on Google Maps
                    </a>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Contact Section */}
          {messageType === 'contact' && (
            <div className="space-y-4 p-4 bg-green-50 rounded-lg border border-green-200">
              <h4 className="text-sm font-medium text-green-900">Contact Information</h4>
              <p className="text-xs text-green-700 mb-4">
                Send contact details to share with recipients
              </p>
              
              {/* Contact Phone */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phone Number *
                </label>
                <input
                  type="tel"
                  value={contactPhone}
                  onChange={(e) => setContactPhone(e.target.value)}
                  placeholder="e.g., 79001234567 (11-12 digits, no +)"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">
                  International format without + (11-12 digits)
                </p>
              </div>

              {/* Contact Name Fields */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* First Name */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    First Name
                  </label>
                  <input
                    type="text"
                    value={contactFirstName}
                    onChange={(e) => setContactFirstName(e.target.value)}
                    placeholder="e.g., John"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  />
                </div>

                {/* Middle Name */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Middle Name
                  </label>
                  <input
                    type="text"
                    value={contactMiddleName}
                    onChange={(e) => setContactMiddleName(e.target.value)}
                    placeholder="e.g., Michael"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  />
                </div>

                {/* Last Name */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Last Name
                  </label>
                  <input
                    type="text"
                    value={contactLastName}
                    onChange={(e) => setContactLastName(e.target.value)}
                    placeholder="e.g., Smith"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  />
                </div>
              </div>

              {/* Company */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Company
                </label>
                <input
                  type="text"
                  value={contactCompany}
                  onChange={(e) => setContactCompany(e.target.value)}
                  placeholder="e.g., Tech Solutions Inc"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                />
              </div>

              {/* Contact Preview */}
              {(contactPhone || contactFirstName || contactMiddleName || contactLastName || contactCompany) && (
                <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
                  <h5 className="text-sm font-medium text-gray-900 mb-2">Contact Preview</h5>
                  <div className="text-xs text-gray-600 space-y-1">
                    {contactPhone && <div><strong>Phone:</strong> {contactPhone}</div>}
                    {contactFirstName && <div><strong>First Name:</strong> {contactFirstName}</div>}
                    {contactMiddleName && <div><strong>Middle Name:</strong> {contactMiddleName}</div>}
                    {contactLastName && <div><strong>Last Name:</strong> {contactLastName}</div>}
                    {contactCompany && <div><strong>Company:</strong> {contactCompany}</div>}
                  </div>
                  <div className="mt-2">
                    <p className="text-xs text-green-600">
                      💡 At least one name field or company must be provided
                    </p>
                  </div>
                </div>
              )}

              {/* Quick Contact Templates */}
              <div className="space-y-2">
                <h5 className="text-sm font-medium text-gray-900">Quick Templates</h5>
                <div className="flex flex-wrap gap-2">
                  <button
                    type="button"
                    onClick={() => {
                      setContactPhone('79001234567');
                      setContactFirstName('Artem');
                      setContactMiddleName('Petrovich');
                      setContactLastName('Evpatoriysky');
                      setContactCompany('Bicycle');
                    }}
                    className="px-3 py-1 text-xs bg-green-100 text-green-800 rounded-md hover:bg-green-200 transition-colors"
                  >
                    Sample Contact
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setContactPhone('');
                      setContactFirstName('');
                      setContactMiddleName('');
                      setContactLastName('');
                      setContactCompany('');
                    }}
                    className="px-3 py-1 text-xs bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200 transition-colors"
                  >
                    Clear All
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Interactive Buttons Reply Section */}
          {messageType === 'interactive-buttons-reply' && (
            <div className="space-y-4 p-4 bg-purple-50 rounded-lg border border-purple-200">
              <div className="flex items-center gap-2 mb-4">
                <h4 className="text-sm font-medium text-purple-900">Interactive Buttons Reply (Beta)</h4>
                <span className="px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full">Beta</span>
              </div>
              <p className="text-xs text-purple-700 mb-4">
                Send buttons that return text to the chat. Max 3 buttons, 25 chars each.
              </p>
              
              {/* Header */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Header (Optional)
                </label>
                <input
                  type="text"
                  value={replyButtonHeader}
                  onChange={(e) => setReplyButtonHeader(e.target.value)}
                  placeholder="Message title"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                />
              </div>

              {/* Body */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Body *
                </label>
                <textarea
                  value={replyButtonBody}
                  onChange={(e) => setReplyButtonBody(e.target.value)}
                  placeholder="Message text (emoji supported 😃)"
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                />
              </div>

              {/* Footer */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Footer (Optional)
                </label>
                <input
                  type="text"
                  value={replyButtonFooter}
                  onChange={(e) => setReplyButtonFooter(e.target.value)}
                  placeholder="Message footer"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"
                />
              </div>

              {/* Buttons */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Buttons * (Max 3)
                </label>
                <div className="space-y-3">
                  {replyButtons.map((button, index) => (
                    <div key={index} className="flex gap-2 items-start">
                      <div className="flex-1">
                        <input
                          type="text"
                          value={button.buttonId}
                          onChange={(e) => {
                            const newButtons = [...replyButtons];
                            newButtons[index].buttonId = e.target.value;
                            setReplyButtons(newButtons);
                          }}
                          placeholder="Button ID"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none text-sm"
                        />
                      </div>
                      <div className="flex-1">
                        <input
                          type="text"
                          value={button.buttonText}
                          onChange={(e) => {
                            const newButtons = [...replyButtons];
                            newButtons[index].buttonText = e.target.value;
                            setReplyButtons(newButtons);
                          }}
                          placeholder="Button Text (max 25 chars)"
                          maxLength={25}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none text-sm"
                        />
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          const newButtons = replyButtons.filter((_, i) => i !== index);
                          setReplyButtons(newButtons);
                        }}
                        className="px-3 py-2 text-red-600 hover:text-red-800 transition-colors"
                      >
                        ✕
                      </button>
                    </div>
                  ))}
                  
                  {replyButtons.length < 3 && (
                    <button
                      type="button"
                      onClick={() => {
                        setReplyButtons([...replyButtons, { buttonId: '', buttonText: '' }]);
                      }}
                      className="w-full py-2 px-4 border-2 border-dashed border-purple-300 text-purple-600 rounded-lg hover:border-purple-400 hover:text-purple-700 transition-colors"
                    >
                      + Add Button
                    </button>
                  )}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Buttons return text to the chat when pressed. Each button can only be pressed once.
                </p>
              </div>

              {/* Platform Support Info */}
              <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                <h5 className="text-sm font-medium text-blue-900 mb-2">Platform Support</h5>
                <div className="text-xs text-blue-700 space-y-1">
                  <div>✅ Android, iOS, iPadOS, WhatsApp Web</div>
                  <div>❌ Windows Desktop (Not supported)</div>
                </div>
              </div>

              {/* Quick Templates */}
              <div className="space-y-2">
                <h5 className="text-sm font-medium text-gray-900">Quick Templates</h5>
                <div className="flex flex-wrap gap-2">
                  <button
                    type="button"
                    onClick={() => {
                      setReplyButtonHeader('Customer Support');
                      setReplyButtonBody('How can we help you today? 😊');
                      setReplyButtonFooter('Choose an option below:');
                      setReplyButtons([
                        { buttonId: 'support', buttonText: 'Get Support' },
                        { buttonId: 'faq', buttonText: 'View FAQ' },
                        { buttonId: 'contact', buttonText: 'Contact Us' }
                      ]);
                    }}
                    className="px-3 py-1 text-xs bg-purple-100 text-purple-800 rounded-md hover:bg-purple-200 transition-colors"
                  >
                    Customer Support
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setReplyButtonHeader('Order Status');
                      setReplyButtonBody('Check your order status:');
                      setReplyButtonFooter('Select an option:');
                      setReplyButtons([
                        { buttonId: 'track', buttonText: 'Track Order' },
                        { buttonId: 'cancel', buttonText: 'Cancel Order' },
                        { buttonId: 'help', buttonText: 'Need Help?' }
                      ]);
                    }}
                    className="px-3 py-1 text-xs bg-purple-100 text-purple-800 rounded-md hover:bg-purple-200 transition-colors"
                  >
                    Order Status
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setReplyButtonHeader('');
                      setReplyButtonBody('');
                      setReplyButtonFooter('');
                      setReplyButtons([]);
                    }}
                    className="px-3 py-1 text-xs bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200 transition-colors"
                  >
                    Clear All
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Advanced Options */}
          <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
            <h4 className="text-sm font-medium text-gray-700">Advanced Options</h4>
            
            {/* Link Preview */}
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                id="linkPreview"
                checked={linkPreview}
                onChange={(e) => setLinkPreview(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <label htmlFor="linkPreview" className="text-sm text-gray-700">
                Enable Link Preview
              </label>
            </div>

            {/* Typing Time */}
            <div>
              <label className="block text-xs font-medium text-gray-600 mb-1">
                Typing Time (ms)
              </label>
              <input
                type="number"
                min="1000"
                max="20000"
                placeholder="1000-20000"
                value={typingTime || ''}
                onChange={(e) => setTypingTime(e.target.value ? parseInt(e.target.value) : undefined)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:border-blue-500 focus:outline-none"
              />
              <p className="text-xs text-gray-500 mt-1">
                Display typing notification (1-20 seconds)
              </p>
            </div>
          </div>

          {/* Message Content */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Message Content *
            </label>
            <textarea
              value={messageContent}
              onChange={(e) => setMessageContent(e.target.value)}
              placeholder="Enter your test message here..."
              rows={4}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            />
            <p className="text-xs text-gray-500 mt-1">
              {messageContent.length}/1000 characters
            </p>
          </div>

          {/* Send Button */}
          <div className="flex items-center gap-4">
            <button
              onClick={sendTestMessage}
              disabled={
                isSending || 
                !selectedInstance || 
                !recipientNumber || 
                (messageType === 'text' && !messageContent.trim()) ||
                ((messageType === 'image' || messageType === 'document') && !selectedFile) ||
                ((messageType === 'image-url' || messageType === 'document-url') && (!fileUrl || !urlFileName)) ||
                (messageType === 'interactive-buttons' && (!buttonBody.trim() || buttons.length === 0)) ||
                (messageType === 'poll' && (!pollMessage.trim() || pollOptions.filter(opt => opt.trim() !== '').length < 2)) ||
                (messageType === 'upload-file' && (!uploadedFileUrl || !fileName.trim())) ||
                (messageType === 'location' && (!latitude.trim() || !longitude.trim())) ||
                (messageType === 'contact' && (!contactPhone.trim() || (!contactFirstName && !contactMiddleName && !contactLastName && !contactCompany))) ||
                (messageType === 'interactive-buttons-reply' && (!replyButtonBody.trim() || replyButtons.length === 0))
              }
              className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSending ? (
                <>
                  <RefreshCw size={16} className="animate-spin" />
                  Sending...
                </>
              ) : (
                <>
                  <Send size={16} />
                  Send Test Message
                </>
              )}
            </button>

            {testResults.length > 0 && (
              <button
                onClick={clearResults}
                className="px-4 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Clear Results
              </button>
            )}
          </div>
        </div>
      </GlassCard>

      {/* Test Results */}
      {showResults && testResults.length > 0 && (
        <GlassCard className="p-6">
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Test Results</h3>
            <p className="text-gray-600">Recent message sending attempts</p>
          </div>

          <div className="space-y-4">
            {testResults.map((result) => (
              <div
                key={result.id}
                className={`p-4 rounded-lg border ${
                  result.success 
                    ? 'bg-green-50 border-green-200' 
                    : 'bg-red-50 border-red-200'
                }`}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    {result.success ? (
                      <CheckCircle size={16} className="text-green-600" />
                    ) : (
                      <XCircle size={16} className="text-red-600" />
                    )}
                    <span className={`font-medium ${
                      result.success ? 'text-green-800' : 'text-red-800'
                    }`}>
                      {result.success ? 'Message Sent Successfully' : 'Message Failed'}
                    </span>
                  </div>
                  <span className="text-xs text-gray-500">
                    {new Date(result.timestamp).toLocaleString()}
                  </span>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">Instance:</span>
                    <span className="ml-2 text-gray-600">{result.phoneNumber}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Recipient:</span>
                    <span className="ml-2 text-gray-600">{result.recipient}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Type:</span>
                    <span className="ml-2 text-gray-600 capitalize">{result.type}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Message:</span>
                    <span className="ml-2 text-gray-600 truncate">
                      {result.message || (result.fileName ? `File: ${result.fileName}` : 'No message')}
                    </span>
                  </div>
                  {result.fileName && (
                    <div>
                      <span className="font-medium text-gray-700">File:</span>
                      <span className="ml-2 text-gray-600">{result.fileName}</span>
                    </div>
                  )}
                  {result.fileUrl && (
                    <div>
                      <span className="font-medium text-gray-700">URL:</span>
                      <span className="ml-2 text-gray-600 truncate">{result.fileUrl}</span>
                    </div>
                  )}
                  {result.quotedMessageId && (
                    <div>
                      <span className="font-medium text-gray-700">Quoted:</span>
                      <span className="ml-2 text-gray-600 truncate">{result.quotedMessageId}</span>
                    </div>
                  )}
                  {result.typingType && result.typingType !== 'text' && (
                    <div>
                      <span className="font-medium text-gray-700">Typing:</span>
                      <span className="ml-2 text-gray-600 capitalize">{result.typingType}</span>
                    </div>
                  )}
                  {result.buttonCount && (
                    <div>
                      <span className="font-medium text-gray-700">Buttons:</span>
                      <span className="ml-2 text-gray-600">{result.buttonCount} button(s)</span>
                    </div>
                  )}
                  {result.pollOptionsCount && (
                    <div>
                      <span className="font-medium text-gray-700">Poll Options:</span>
                      <span className="ml-2 text-gray-600">{result.pollOptionsCount} options</span>
                      {result.multipleAnswers && (
                        <span className="ml-2 text-orange-600">(Multiple answers allowed)</span>
                      )}
                    </div>
                  )}
                  {result.uploadedFileUrl && (
                    <div>
                      <span className="font-medium text-gray-700">Uploaded File:</span>
                      <span className="ml-2 text-gray-600 truncate">{result.uploadedFileUrl}</span>
                    </div>
                  )}
                  {result.locationCoordinates && (
                    <div>
                      <span className="font-medium text-gray-700">Location:</span>
                      <span className="ml-2 text-gray-600">{result.locationCoordinates}</span>
                      {result.locationName && (
                        <span className="ml-2 text-blue-600">({result.locationName})</span>
                      )}
                    </div>
                  )}
                  {result.locationAddress && (
                    <div>
                      <span className="font-medium text-gray-700">Address:</span>
                      <span className="ml-2 text-gray-600">{result.locationAddress}</span>
                    </div>
                  )}
                  {result.contactPhone && (
                    <div>
                      <span className="font-medium text-gray-700">Contact:</span>
                      <span className="ml-2 text-gray-600">{result.contactPhone}</span>
                      {result.contactName && (
                        <span className="ml-2 text-green-600">({result.contactName})</span>
                      )}
                    </div>
                  )}
                  {result.replyButtonsCount && (
                    <div>
                      <span className="font-medium text-gray-700">Reply Buttons:</span>
                      <span className="ml-2 text-gray-600">{result.replyButtonsCount} buttons</span>
                      {result.replyButtonHeader && (
                        <span className="ml-2 text-purple-600">(Header: {result.replyButtonHeader})</span>
                      )}
                    </div>
                  )}
                </div>

                {result.error && (
                  <div className="mt-3 p-3 bg-red-100 rounded border border-red-200">
                    <span className="font-medium text-red-800">Error:</span>
                    <span className="ml-2 text-red-700">{result.error}</span>
                  </div>
                )}

                {result.response && result.success && (
                  <div className="mt-3 p-3 bg-green-100 rounded border border-green-200">
                    <span className="font-medium text-green-800">Response:</span>
                    <pre className="mt-1 text-xs text-green-700 overflow-x-auto">
                      {JSON.stringify(result.response, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            ))}
          </div>
        </GlassCard>
      )}

      {/* Quick Test Templates */}
      <GlassCard className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-900">Quick Test Templates</h3>
          <p className="text-gray-600">Use these templates for quick testing</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[
            { name: 'Simple Hello', message: 'Hello! This is a test message from Green API.' },
            { name: 'Business Test', message: 'Thank you for your inquiry. We will get back to you soon.' },
            { name: 'Support Message', message: 'Your support ticket has been received. Ticket ID: #12345' },
            { name: 'Promotional', message: '🎉 Special offer! Get 20% off on your next purchase. Use code: TEST20' },
            { name: 'Emergency Alert', message: '🚨 Emergency: System maintenance scheduled for tonight at 2 AM.' },
            { name: 'Confirmation', message: '✅ Your order has been confirmed. Order #ORD-2024-001' },
            { name: 'Link Test', message: 'Check out our website: https://green-api.com/en/docs/api/sending/SendMessage/' },
            { name: 'Image Upload', message: 'Upload an image file to test image sending' },
            { name: 'Document Upload', message: 'Upload a document file to test document sending' },
            { name: 'Image URL', message: 'Send an image from URL' },
            { name: 'Document URL', message: 'Send a document from URL' },
            { name: 'Interactive Buttons', message: 'Send message with interactive buttons' },
            { name: 'Poll', message: 'Create and send a poll' },
            { name: 'Upload File', message: 'Upload file to Green API storage and send' },
            { name: 'Location', message: 'Send location with coordinates' },
            { name: 'Contact', message: 'Send contact information' },
            { name: 'Interactive Buttons Reply', message: 'Send buttons that return text (Beta)' }
          ].map((template, index) => (
            <button
              key={index}
              onClick={() => handleTemplateClick(template)}
              className="p-4 text-left border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
            >
              <h4 className="font-medium text-gray-900 mb-1">{template.name}</h4>
              <p className="text-sm text-gray-600 line-clamp-2">{template.message}</p>
            </button>
          ))}
        </div>
      </GlassCard>
    </div>
  );
};

// AnalyticsTab Component
const AnalyticsTab: React.FC<{
  analyticsData: any;
  loading: boolean;
}> = ({ analyticsData, loading }) => {
  if (loading) {
    return (
      <GlassCard className="p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </GlassCard>
    );
  }

  if (!analyticsData) {
    return (
      <GlassCard className="p-6">
        <div className="text-center py-12">
          <BarChart3 size={48} className="text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Analytics Data</h3>
          <p className="text-gray-600">Analytics will appear here once you have data</p>
        </div>
      </GlassCard>
    );
  }

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <GlassCard className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Metrics</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg">
            <div className="text-2xl font-bold">{analyticsData.totalMessages}</div>
            <div className="text-sm opacity-90">Total Messages</div>
          </div>
          <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg">
            <div className="text-2xl font-bold">{analyticsData.deliveryRate}%</div>
            <div className="text-sm opacity-90">Delivery Rate</div>
          </div>
          <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg">
            <div className="text-2xl font-bold">{analyticsData.totalCampaigns}</div>
            <div className="text-sm opacity-90">Total Campaigns</div>
          </div>
          <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-4 rounded-lg">
            <div className="text-2xl font-bold">{analyticsData.connectedInstances}</div>
            <div className="text-sm opacity-90">Connected Instances</div>
          </div>
        </div>
      </GlassCard>

      {/* Performance Metrics */}
      <GlassCard className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Message Performance</h4>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600">Delivered Messages</span>
                <span className="font-medium">{analyticsData.deliveredMessages}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Failed Messages</span>
                <span className="font-medium text-red-600">{analyticsData.failedMessages}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Average Delivery Time</span>
                <span className="font-medium">{analyticsData.averageDeliveryTime}</span>
              </div>
            </div>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Campaign Performance</h4>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600">Active Campaigns</span>
                <span className="font-medium">{analyticsData.activeCampaigns}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Completed Campaigns</span>
                <span className="font-medium">{analyticsData.completedCampaigns}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Success Rate</span>
                <span className="font-medium">{analyticsData.campaignSuccessRate}%</span>
              </div>
            </div>
          </div>
        </div>
      </GlassCard>

      {/* System Health */}
      <GlassCard className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">System Health</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="text-center p-4 bg-gray-50 rounded-lg">
            <div className="text-2xl font-bold text-blue-600">{analyticsData.totalInstances}</div>
            <div className="text-sm text-gray-600">Total Instances</div>
          </div>
          <div className="text-center p-4 bg-gray-50 rounded-lg">
            <div className="text-2xl font-bold text-green-600">{analyticsData.totalTemplates}</div>
            <div className="text-sm text-gray-600">Message Templates</div>
          </div>
          <div className="text-center p-4 bg-gray-50 rounded-lg">
            <div className="text-2xl font-bold text-purple-600">{analyticsData.totalWebhooks}</div>
            <div className="text-sm text-gray-600">Webhook Events</div>
          </div>
          <div className="text-center p-4 bg-gray-50 rounded-lg">
            <div className="text-2xl font-bold text-orange-600">{analyticsData.greenApiInstances}</div>
            <div className="text-sm text-gray-600">Green API Instances</div>
          </div>
        </div>
      </GlassCard>

      {/* Recent Activity */}
      <GlassCard className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Webhook Activity</h4>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Recent (24h)</span>
                <span className="font-medium">{analyticsData.recentWebhooks}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Unprocessed</span>
                <span className="font-medium text-orange-600">{analyticsData.unprocessedWebhooks}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Errors</span>
                <span className="font-medium text-red-600">{analyticsData.errorWebhooks}</span>
              </div>
            </div>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Peak Activity</h4>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Peak Hour</span>
                <span className="font-medium">{analyticsData.peakActivityHour}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Template Categories</span>
                <span className="font-medium">{analyticsData.templateCategories}</span>
              </div>
            </div>
          </div>
        </div>
      </GlassCard>
    </div>
  );
};

// Settings Tab Component
const SettingsTab: React.FC<{
  settings: any[];
  templates: any[];
  webhookEvents: any[];
  campaignResults: any[];
  onEditSetting?: (setting: any) => void;
}> = ({ settings, templates, webhookEvents, campaignResults, onEditSetting }) => {
  return (
    <GlassCard className="p-6">
      <div className="mb-6">
        <h2 className="text-xl font-semibold text-gray-900">Green API Settings</h2>
        <p className="text-gray-600">Configure your WhatsApp integration settings</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
              <Shield size={16} />
              Security Settings
            </h3>
            <div className="space-y-2 text-sm text-blue-800">
              <div className="flex items-center justify-between">
                <span>Webhook Secret:</span>
                <span className="font-mono">••••••••••••••••</span>
              </div>
              <div className="flex items-center justify-between">
                <span>API Token:</span>
                <span className="font-mono">••••••••••••••••</span>
              </div>
            </div>
          </div>

          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h3 className="font-semibold text-green-900 mb-2 flex items-center gap-2">
              <Zap size={16} />
              Rate Limiting
            </h3>
            <div className="space-y-2 text-sm text-green-800">
              {settings && settings.length > 0 ? (
                settings.map((setting: any) => {
                  if (setting.setting_key.includes('rate_limit') || setting.setting_key.includes('retry') || setting.setting_key.includes('cooldown')) {
                    return (
                      <div key={setting.id} className="flex items-center justify-between">
                        <span>{setting.setting_key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:</span>
                        <span className="font-medium">{setting.setting_value}</span>
                      </div>
                    );
                  }
                  return null;
                })
              ) : (
                <div className="text-gray-600">No rate limiting settings configured</div>
              )}
            </div>
          </div>

          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
            <h3 className="font-semibold text-purple-900 mb-2 flex items-center gap-2">
              <FileText size={16} />
              Message Templates
            </h3>
            <div className="space-y-2 text-sm text-purple-800">
              <div className="flex items-center justify-between">
                <span>Total Templates:</span>
                <span className="font-medium">{templates.length}</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Active Templates:</span>
                <span className="font-medium">{templates.filter(t => t.is_active).length}</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Categories:</span>
                <span className="font-medium">{new Set(templates.map(t => t.category)).size}</span>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
            <h3 className="font-semibold text-purple-900 mb-2 flex items-center gap-2">
              <Database size={16} />
              Database Status
            </h3>
            <div className="space-y-2 text-sm text-purple-800">
              <div className="flex items-center justify-between">
                <span>Message Queue:</span>
                <span className="font-medium text-green-600">Active</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Webhook Events:</span>
                <span className="font-medium text-green-600">{webhookEvents.length} events</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Campaign Results:</span>
                <span className="font-medium text-green-600">{campaignResults.length} results</span>
              </div>
            </div>
          </div>

          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
            <h3 className="font-semibold text-orange-900 mb-2 flex items-center gap-2">
              <TrendingUp size={16} />
              Performance
            </h3>
            <div className="space-y-2 text-sm text-orange-800">
              <div className="flex items-center justify-between">
                <span>Success Rate:</span>
                <span className="font-medium">
                  {campaignResults.length > 0 
                    ? `${Math.round((campaignResults.filter(r => r.status === 'sent' || r.status === 'delivered' || r.status === 'read').length / campaignResults.length) * 100)}%`
                    : '-'
                  }
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span>Average Delivery:</span>
                <span className="font-medium">-</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Queue Size:</span>
                <span className="font-medium">-</span>
              </div>
            </div>
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
              <Activity size={16} />
              Recent Activity
            </h3>
            <div className="space-y-2 text-sm text-blue-800">
              <div className="flex items-center justify-between">
                <span>Recent Webhooks:</span>
                <span className="font-medium">{webhookEvents.filter(e => new Date(e.created_at) > new Date(Date.now() - 24*60*60*1000)).length}</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Unprocessed Events:</span>
                <span className="font-medium">{webhookEvents.filter(e => !e.processed).length}</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Error Events:</span>
                <span className="font-medium">{webhookEvents.filter(e => e.error_message).length}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Configuration Section */}
      {settings && settings.length > 0 && (
        <div className="mt-8 pt-8 border-t border-gray-200">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h3 className="text-xl font-semibold text-gray-900">Configuration Settings</h3>
              <p className="text-gray-600 mt-1">Manage your Green API configuration parameters</p>
            </div>
            <div className="flex items-center gap-3">
              <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2">
                <Download size={16} />
                Export Config
              </button>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
                <Plus size={16} />
                Add Setting
              </button>
            </div>
          </div>

          {/* Settings Categories */}
          <div className="space-y-6">
            {/* Security & Authentication */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Shield size={20} className="text-blue-600" />
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-blue-900">Security & Authentication</h4>
                  <p className="text-blue-700 text-sm">API tokens, webhooks, and security settings</p>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {settings.filter((s: any) => 
                  s.setting_key.includes('token') || 
                  s.setting_key.includes('secret') || 
                  s.setting_key.includes('auth') ||
                  s.setting_key.includes('webhook')
                ).map((setting: any) => (
                  <div key={setting.id} className="bg-white rounded-lg p-4 border border-blue-100">
                    <div className="flex items-center justify-between mb-2">
                      <h5 className="font-medium text-gray-900">
                        {setting.setting_key.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                      </h5>
                      {onEditSetting && (
                        <button
                          onClick={() => onEditSetting(setting)}
                          className="text-blue-600 hover:text-blue-700 p-1 rounded hover:bg-blue-50"
                        >
                          <Edit size={14} />
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-3">{setting.description || 'No description available'}</p>
                    <div className="flex items-center gap-2">
                      <div className="flex-1 text-sm font-mono bg-gray-50 px-3 py-2 rounded border">
                        {setting.setting_key.includes('secret') || setting.setting_key.includes('token') 
                          ? '••••••••••••••••' 
                          : setting.setting_value
                        }
                      </div>
                      {setting.setting_key.includes('secret') || setting.setting_key.includes('token') && (
                        <button className="text-gray-400 hover:text-gray-600">
                          <Eye size={14} />
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Rate Limiting & Performance */}
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                  <Zap size={20} className="text-green-600" />
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-green-900">Rate Limiting & Performance</h4>
                  <p className="text-green-700 text-sm">Message limits, retry policies, and performance tuning</p>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {settings.filter((s: any) => 
                  s.setting_key.includes('rate_limit') || 
                  s.setting_key.includes('retry') || 
                  s.setting_key.includes('cooldown') ||
                  s.setting_key.includes('timeout') ||
                  s.setting_key.includes('delay')
                ).map((setting: any) => (
                  <div key={setting.id} className="bg-white rounded-lg p-4 border border-green-100">
                    <div className="flex items-center justify-between mb-2">
                      <h5 className="font-medium text-gray-900">
                        {setting.setting_key.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                      </h5>
                      {onEditSetting && (
                        <button
                          onClick={() => onEditSetting(setting)}
                          className="text-green-600 hover:text-green-700 p-1 rounded hover:bg-green-50"
                        >
                          <Edit size={14} />
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-3">{setting.description || 'No description available'}</p>
                    <div className="flex items-center gap-2">
                      <div className="flex-1 text-sm font-mono bg-gray-50 px-3 py-2 rounded border">
                        {setting.setting_value}
                      </div>
                      <div className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                        {setting.setting_key.includes('timeout') || setting.setting_key.includes('delay') ? 'ms' : 'count'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Message & Template Settings */}
            <div className="bg-gradient-to-r from-purple-50 to-violet-50 border border-purple-200 rounded-xl p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                  <FileText size={20} className="text-purple-600" />
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-purple-900">Message & Template Settings</h4>
                  <p className="text-purple-700 text-sm">Message formatting, templates, and delivery preferences</p>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {settings.filter((s: any) => 
                  s.setting_key.includes('message') || 
                  s.setting_key.includes('template') || 
                  s.setting_key.includes('format') ||
                  s.setting_key.includes('delivery')
                ).map((setting: any) => (
                  <div key={setting.id} className="bg-white rounded-lg p-4 border border-purple-100">
                    <div className="flex items-center justify-between mb-2">
                      <h5 className="font-medium text-gray-900">
                        {setting.setting_key.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                      </h5>
                      {onEditSetting && (
                        <button
                          onClick={() => onEditSetting(setting)}
                          className="text-purple-600 hover:text-purple-700 p-1 rounded hover:bg-purple-50"
                        >
                          <Edit size={14} />
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-3">{setting.description || 'No description available'}</p>
                    <div className="text-sm font-mono bg-gray-50 px-3 py-2 rounded border">
                      {setting.setting_value}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Other Settings */}
            {settings.filter((s: any) => 
              !s.setting_key.includes('token') && 
              !s.setting_key.includes('secret') && 
              !s.setting_key.includes('auth') &&
              !s.setting_key.includes('webhook') &&
              !s.setting_key.includes('rate_limit') && 
              !s.setting_key.includes('retry') && 
              !s.setting_key.includes('cooldown') &&
              !s.setting_key.includes('timeout') &&
              !s.setting_key.includes('delay') &&
              !s.setting_key.includes('message') && 
              !s.setting_key.includes('template') && 
              !s.setting_key.includes('format') &&
              !s.setting_key.includes('delivery')
            ).length > 0 && (
              <div className="bg-gradient-to-r from-gray-50 to-slate-50 border border-gray-200 rounded-xl p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    <Settings size={20} className="text-gray-600" />
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold text-gray-900">Other Settings</h4>
                    <p className="text-gray-700 text-sm">Additional configuration parameters</p>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {settings.filter((s: any) => 
                    !s.setting_key.includes('token') && 
                    !s.setting_key.includes('secret') && 
                    !s.setting_key.includes('auth') &&
                    !s.setting_key.includes('webhook') &&
                    !s.setting_key.includes('rate_limit') && 
                    !s.setting_key.includes('retry') && 
                    !s.setting_key.includes('cooldown') &&
                    !s.setting_key.includes('timeout') &&
                    !s.setting_key.includes('delay') &&
                    !s.setting_key.includes('message') && 
                    !s.setting_key.includes('template') && 
                    !s.setting_key.includes('format') &&
                    !s.setting_key.includes('delivery')
                  ).map((setting: any) => (
                    <div key={setting.id} className="bg-white rounded-lg p-4 border border-gray-100">
                      <div className="flex items-center justify-between mb-2">
                        <h5 className="font-medium text-gray-900">
                          {setting.setting_key.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                        </h5>
                        {onEditSetting && (
                          <button
                            onClick={() => onEditSetting(setting)}
                            className="text-gray-600 hover:text-gray-700 p-1 rounded hover:bg-gray-50"
                          >
                            <Edit size={14} />
                          </button>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{setting.description || 'No description available'}</p>
                      <div className="text-sm font-mono bg-gray-50 px-3 py-2 rounded border">
                        {setting.setting_value}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {(!settings || settings.length === 0) && (
        <div className="text-center py-12">
          <Settings size={48} className="text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Settings Configured</h3>
          <p className="text-gray-600 mb-6">Settings will appear here once you configure your Green API integration</p>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Configure Settings
          </button>
        </div>
      )}

      {settings && settings.length > 0 && (
        <div className="flex justify-end gap-2 mt-6 pt-6 border-t border-gray-200">
          <button className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors">
            Reset to Defaults
          </button>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Save Settings
          </button>
        </div>
      )}
    </GlassCard>
  );
};

// Add Instance Modal Component
const AddInstanceModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (instance: GreenApiInstance) => void;
}> = ({ isOpen, onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    instanceId: '',
    apiToken: '',
    phoneNumber: '',
    webhookUrl: '',
    webhookUrlToken: '',
    delaySendMessagesMilliseconds: 3000,
    markIncomingMessagesReaded: 'no',
    markIncomingMessagesReadedOnReply: 'yes',
    outgoingWebhook: 'yes',
    outgoingMessageWebhook: 'yes',
    outgoingAPIMessageWebhook: 'no',
    incomingWebhook: 'yes',
    deviceWebhook: 'no',
    stateWebhook: 'yes',
    keepOnlineStatus: 'yes',
    pollMessageWebhook: 'yes',
    incomingBlockWebhook: 'yes'
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const { data, error } = await supabase!
        .from('whatsapp_instances')
        .insert({
          instance_id: formData.instanceId,
          api_token: formData.apiToken,
          phone_number: formData.phoneNumber,
          status: 'disconnected',
          webhook_url: formData.webhookUrl || null,
          webhook_secret: formData.webhookUrlToken || null,
          green_api_host: 'https://api.green-api.com',
          is_green_api: true
        })
        .select()
        .single();

      if (error) throw error;

      onSuccess(data);
      setFormData({
        instanceId: '',
        apiToken: '',
        phoneNumber: '',
        webhookUrl: '',
        webhookUrlToken: '',
        delaySendMessagesMilliseconds: 3000,
        markIncomingMessagesReaded: 'no',
        markIncomingMessagesReadedOnReply: 'yes',
        outgoingWebhook: 'yes',
        outgoingMessageWebhook: 'yes',
        outgoingAPIMessageWebhook: 'no',
        incomingWebhook: 'yes',
        deviceWebhook: 'no',
        stateWebhook: 'yes',
        keepOnlineStatus: 'yes',
        pollMessageWebhook: 'yes',
        incomingBlockWebhook: 'yes'
      });
    } catch (error: any) {
      console.error('Error adding instance:', error);
      toast.error(`Failed to add instance: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Add WhatsApp Instance">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Instance ID *
            </label>
            <input
              type="text"
              required
              value={formData.instanceId}
              onChange={(e) => setFormData(prev => ({ ...prev, instanceId: e.target.value }))}
              className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              placeholder="Enter Green API instance ID"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              API Token *
            </label>
            <input
              type="password"
              required
              value={formData.apiToken}
              onChange={(e) => setFormData(prev => ({ ...prev, apiToken: e.target.value }))}
              className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              placeholder="Enter API token"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phone Number *
            </label>
            <input
              type="tel"
              required
              value={formData.phoneNumber}
              onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}
              className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              placeholder="Enter WhatsApp phone number"
            />
          </div>
        </div>

        {/* Green API Configuration Settings */}
        <div className="border-t border-gray-200 pt-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Green API Configuration</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Webhook URL
              </label>
              <input
                type="url"
                value={formData.webhookUrl}
                onChange={(e) => setFormData(prev => ({ ...prev, webhookUrl: e.target.value }))}
                className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                placeholder="https://mysite.com/webhook/green-api/"
              />
              <p className="text-xs text-gray-500 mt-1">URL for receiving incoming notifications</p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Webhook Token
              </label>
              <input
                type="password"
                value={formData.webhookUrlToken}
                onChange={(e) => setFormData(prev => ({ ...prev, webhookUrlToken: e.target.value }))}
                className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                placeholder="Token for accessing your notification server"
              />
              <p className="text-xs text-gray-500 mt-1">Token for accessing your notification server</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Message Send Delay (ms)
              </label>
              <input
                type="number"
                min="500"
                max="600000"
                value={formData.delaySendMessagesMilliseconds}
                onChange={(e) => setFormData(prev => ({ ...prev, delaySendMessagesMilliseconds: parseInt(e.target.value) || 3000 }))}
                className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                placeholder="3000"
              />
              <p className="text-xs text-gray-500 mt-1">Time delay for sending messages (500ms to 10 minutes)</p>
            </div>
          </div>

          {/* Webhook Settings */}
          <div className="space-y-4 mb-6">
            <h4 className="font-medium text-gray-900">Webhook Notifications</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.incomingWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, incomingWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Incoming messages</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.outgoingWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, outgoingWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Outgoing message status</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.outgoingMessageWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, outgoingMessageWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Messages sent from device</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.stateWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, stateWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Instance authorization status</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.pollMessageWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, pollMessageWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Poll creation and voting</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.incomingBlockWebhook === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, incomingBlockWebhook: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Incoming chat blocks</span>
              </label>
            </div>
          </div>

          {/* Message Settings */}
          <div className="space-y-4 mb-6">
            <h4 className="font-medium text-gray-900">Message Settings</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.markIncomingMessagesReaded === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, markIncomingMessagesReaded: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Mark incoming messages as read</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.markIncomingMessagesReadedOnReply === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, markIncomingMessagesReadedOnReply: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Mark as read when replying</span>
              </label>
              
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={formData.keepOnlineStatus === 'yes'}
                  onChange={(e) => setFormData(prev => ({ ...prev, keepOnlineStatus: e.target.checked ? 'yes' : 'no' }))}
                  className="rounded"
                />
                <span className="text-sm">Keep online status</span>
              </label>
            </div>
          </div>
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
            <Shield size={16} />
            Green API Configuration Note
          </h4>
          <p className="text-blue-800 text-sm">
            This form follows the official Green API recommendations for instance configuration. 
            Your API token and webhook secret will be encrypted and stored securely. 
            Make sure to use HTTPS for webhook URLs in production. 
            After creating the instance, you'll need to scan the QR code to link your WhatsApp device.
          </p>
        </div>

        <div className="flex justify-end gap-2 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
          >
            {isSubmitting ? (
              <div className="flex items-center gap-2">
                <RefreshCw size={16} className="animate-spin" />
                Adding...
              </div>
            ) : (
              'Add Instance'
            )}
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Add Campaign Modal Component
const AddCampaignModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  instances: GreenApiInstance[];
  onSuccess: (campaign: GreenApiBulkCampaign) => void;
}> = ({ isOpen, onClose, instances, onSuccess }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    instanceId: '',
    messageContent: '',
    targetAudience: [] as string[],
    scheduledAt: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const { data, error } = await supabase!
        .from('green_api_bulk_campaigns')
        .insert({
          name: formData.name,
          description: formData.description,
          instance_id: formData.instanceId,
          message_content: formData.messageContent,
          target_audience: formData.targetAudience,
          status: 'draft',
          total_recipients: formData.targetAudience.length,
          sent_count: 0,
          delivered_count: 0,
          failed_count: 0
        })
        .select()
        .single();

      if (error) throw error;

      onSuccess(data);
      setFormData({
        name: '',
        description: '',
        instanceId: '',
        messageContent: '',
        targetAudience: [],
        scheduledAt: ''
      });
    } catch (error: any) {
      console.error('Error creating campaign:', error);
      toast.error(`Failed to create campaign: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Create Bulk Campaign">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Campaign Name *
            </label>
            <input
              type="text"
              required
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              placeholder="Enter campaign name"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Instance *
            </label>
            <select
              required
              value={formData.instanceId}
              onChange={(e) => setFormData(prev => ({ ...prev, instanceId: e.target.value }))}
              className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            >
              <option value="">Select an instance</option>
              {instances.map((instance) => (
                <option key={instance.id} value={instance.instance_id}>
                  {instance.phone_number} ({instance.instance_id})
                </option>
              ))}
            </select>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Description
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="Enter campaign description"
            rows={3}
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Message Content *
          </label>
          <textarea
            required
            value={formData.messageContent}
            onChange={(e) => setFormData(prev => ({ ...prev, messageContent: e.target.value }))}
            className="w-full py-3 px-4 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="Enter your message content"
            rows={4}
          />
        </div>

        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h4 className="font-semibold text-yellow-900 mb-2 flex items-center gap-2">
            <AlertTriangle size={16} />
            Campaign Setup
          </h4>
          <p className="text-yellow-800 text-sm">
            This campaign will be created as a draft. You can add recipients and schedule it later from the campaigns tab.
          </p>
        </div>

        <div className="flex justify-end gap-2 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
          >
            {isSubmitting ? (
              <div className="flex items-center gap-2">
                <RefreshCw size={16} className="animate-spin" />
                Creating...
              </div>
            ) : (
              'Create Campaign'
            )}
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Settings Configuration Modal Component
const SettingsConfigurationModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  setting: any;
  onSave: (setting: any) => void;
}> = ({ isOpen, onClose, setting, onSave }) => {
  const [formData, setFormData] = useState({
    setting_value: setting?.setting_value || '',
    description: setting?.description || ''
  });

  useEffect(() => {
    if (setting) {
      setFormData({
        setting_value: setting.setting_value || '',
        description: setting.description || ''
      });
    }
  }, [setting]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({ ...setting, ...formData });
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Configure Setting">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Setting Key
          </label>
          <input
            type="text"
            value={setting?.setting_key || ''}
            readOnly
            className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Setting Value
          </label>
          <input
            type="text"
            value={formData.setting_value}
            onChange={(e) => setFormData(prev => ({ ...prev, setting_value: e.target.value }))}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Description
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            rows={3}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
          />
        </div>
        <div className="flex justify-end gap-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Save Changes
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Edit Instance Modal Component
const EditInstanceModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  instance: GreenApiInstance | null;
  onSave: (updatedInstance: Partial<GreenApiInstance>) => void;
}> = ({ isOpen, onClose, instance, onSave }) => {
  const [formData, setFormData] = useState({
    phone_number: '',
    green_api_host: '',
    status: 'disconnected' as 'connected' | 'disconnected' | 'connecting' | 'error',
    webhook_url: '',
    webhook_secret: ''
  });

  useEffect(() => {
    if (instance) {
      setFormData({
        phone_number: instance.phone_number || '',
        green_api_host: instance.green_api_host || 'https://api.green-api.com',
        status: instance.status || 'disconnected',
        webhook_url: instance.webhook_url || '',
        webhook_secret: instance.webhook_secret || ''
      });
    }
  }, [instance]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  if (!instance) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Edit WhatsApp Instance">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number
          </label>
          <input
            type="text"
            value={formData.phone_number}
            onChange={(e) => setFormData(prev => ({ ...prev, phone_number: e.target.value }))}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="+1234567890"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Green API Host
          </label>
          <input
            type="text"
            value={formData.green_api_host}
            onChange={(e) => setFormData(prev => ({ ...prev, green_api_host: e.target.value }))}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="https://api.green-api.com"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Status
          </label>
                     <select
             value={formData.status}
             onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as 'connected' | 'disconnected' | 'connecting' | 'error' }))}
             className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
           >
            <option value="connected">Connected</option>
            <option value="disconnected">Disconnected</option>
            <option value="connecting">Connecting</option>
            <option value="error">Error</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Webhook URL (Optional)
          </label>
          <input
            type="text"
            value={formData.webhook_url}
            onChange={(e) => setFormData(prev => ({ ...prev, webhook_url: e.target.value }))}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="https://your-domain.com/webhook"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Webhook Secret (Optional)
          </label>
          <input
            type="password"
            value={formData.webhook_secret}
            onChange={(e) => setFormData(prev => ({ ...prev, webhook_secret: e.target.value }))}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="Your webhook secret"
          />
        </div>

        <div className="flex justify-end gap-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Save Changes
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default GreenApiManagementPage;
