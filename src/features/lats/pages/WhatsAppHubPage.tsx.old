import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import GlassCard from '../../shared/components/ui/GlassCard';
import { SimpleBackButton as BackButton } from '../../shared/components/ui/SimpleBackButton';
import { toast } from '../../../lib/toastUtils';
import { 
  MessageCircle, 
  Send, 
  Users, 
  BarChart3, 
  Settings, 
  Plus, 
  Target,
  FileText,
  Image,
  MapPin,
  User,
  Activity,
  CheckCircle,
  XCircle,
  Clock,
  Zap,
  Database,
  Calendar,
  TrendingUp,
  Bell,
  Search,
  Filter,
  RefreshCw,
  Play,
  Eye,
  Edit,
  Trash2,
  Smile,
  MoreVertical,
  ChevronRight,
  Star,
  AlertTriangle,
  LogOut,
  Wifi,
  WifiOff
} from 'lucide-react';
import { supabase } from '../../../lib/supabaseClient';
import { useAuth } from '../../../context/AuthContext';
import { useTheme } from '../../../context/ThemeContext';
import Modal from '../../shared/components/ui/Modal';
import WhatsAppTemplateManager from '../components/WhatsAppTemplateManager';
import { greenApiService } from '../../../services/greenApiService';

// Types
interface WhatsAppInstance {
  id: string;
  instance_id: string;
  phone_number: string;
  status: 'connected' | 'disconnected' | 'connecting' | 'error';
  is_green_api: boolean;
  created_at: string;
}

interface MessageTemplate {
  id: string;
  name: string;
  content: string;
  category: string;
  is_active: boolean;
}

interface BulkCampaign {
  id: string;
  name: string;
  status: 'draft' | 'scheduled' | 'sending' | 'completed' | 'failed' | 'paused';
  total_recipients: number;
  sent_count: number;
  delivered_count: number;
  failed_count: number;
  created_at: string;
}

const WhatsAppHubPage: React.FC = () => {
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  const { isDark } = useTheme();
  
  // State
  const [activeSection, setActiveSection] = useState<'overview' | 'messaging' | 'bulk' | 'templates' | 'analytics'>('overview');
  const [instances, setInstances] = useState<WhatsAppInstance[]>([]);
  const [templates, setTemplates] = useState<MessageTemplate[]>([]);
  const [campaigns, setCampaigns] = useState<BulkCampaign[]>([]);
  const [messages, setMessages] = useState<Array<{
    id: string;
    status: string;
    created_at: string;
  }>>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [searchTerm, setSearchTerm] = useState('');
  const [showQuickMessage, setShowQuickMessage] = useState(false);
  const [showTemplateManager, setShowTemplateManager] = useState(false);
  const [showAddInstance, setShowAddInstance] = useState(false);

  // Load data on mount
  useEffect(() => {
    if (currentUser) {
      loadData();
    }
  }, [currentUser]);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Load instances
      const { data: instancesData, error: instancesError } = await supabase
        .from('whatsapp_instances')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (instancesError) throw instancesError;
      setInstances(instancesData || []);

      // Load templates
      const { data: templatesData, error: templatesError } = await supabase
        .from('green_api_message_templates')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (templatesError) throw templatesError;
      setTemplates(templatesData || []);

      // Load campaigns
      const { data: campaignsData, error: campaignsError } = await supabase
        .from('green_api_bulk_campaigns')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (campaignsError) throw campaignsError;
      setCampaigns(campaignsData || []);

      // Load recent messages
      const { data: messagesData, error: messagesError } = await supabase
        .from('green_api_message_queue')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
      
      if (messagesError) throw messagesError;
      setMessages(messagesData || []);

    } catch (error) {
      console.error('Error loading data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load data';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setLoading(false);
      setRefreshing(false);
      setLastUpdate(new Date());
    }
  };

  const handleRefresh = () => {
    setRefreshing(true);
    loadData();
  };

  const handleQuickMessage = () => {
    setShowQuickMessage(true);
  };

  const handleBulkCreator = () => {
    navigate('/bulk-messaging');
  };

  const handleTemplateManager = () => {
    setShowTemplateManager(true);
  };

  const handleAddInstance = () => {
    setShowAddInstance(true);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'text-green-500';
      case 'disconnected': return 'text-red-500';
      case 'connecting': return 'text-yellow-500';
      case 'error': return 'text-red-500';
      default: return 'text-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return <CheckCircle className="w-4 h-4" />;
      case 'disconnected': return <XCircle className="w-4 h-4" />;
      case 'connecting': return <Clock className="w-4 h-4" />;
      case 'error': return <AlertTriangle className="w-4 h-4" />;
      default: return <XCircle className="w-4 h-4" />;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <BackButton />
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                WhatsApp Hub
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                Manage your WhatsApp instances and messaging
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={handleRefresh}
              disabled={refreshing}
              className="flex items-center space-x-2 px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow"
            >
              <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>
            <button
              onClick={handleAddInstance}
              className="flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
            >
              <Plus className="w-4 h-4" />
              <span>Add Instance</span>
            </button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex space-x-1 bg-white dark:bg-gray-800 rounded-lg p-1 mb-6 shadow-sm">
          {[
            { id: 'overview', label: 'Overview', icon: BarChart3 },
            { id: 'messaging', label: 'Messaging', icon: MessageCircle },
            { id: 'bulk', label: 'Bulk Campaigns', icon: Users },
            { id: 'templates', label: 'Templates', icon: FileText },
            { id: 'analytics', label: 'Analytics', icon: TrendingUp }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveSection(tab.id as any)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-colors ${
                activeSection === tab.id
                  ? 'bg-blue-500 text-white'
                  : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              <span>{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Overview Section */}
        {activeSection === 'overview' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <GlassCard>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Total Instances</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">{instances.length}</p>
                </div>
                <Database className="w-8 h-8 text-blue-500" />
              </div>
            </GlassCard>

            <GlassCard>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Connected</p>
                  <p className="text-2xl font-bold text-green-500">
                    {instances.filter(i => i.status === 'connected').length}
                  </p>
                </div>
                <Wifi className="w-8 h-8 text-green-500" />
              </div>
            </GlassCard>

            <GlassCard>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Templates</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">{templates.length}</p>
                </div>
                <FileText className="w-8 h-8 text-purple-500" />
              </div>
            </GlassCard>

            <GlassCard>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Campaigns</p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">{campaigns.length}</p>
                </div>
                <Target className="w-8 h-8 text-orange-500" />
              </div>
            </GlassCard>
          </div>
        )}

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <GlassCard>
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-4">
                <Send className="w-8 h-8 text-blue-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Quick Message</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">Send a message to a single recipient</p>
              <button
                onClick={handleQuickMessage}
                className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                Send Message
              </button>
            </div>
          </GlassCard>

          <GlassCard>
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-4">
                <Users className="w-8 h-8 text-green-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Bulk Campaign</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">Create and manage bulk messaging campaigns</p>
              <button
                onClick={handleBulkCreator}
                className="w-full px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
              >
                Create Campaign
              </button>
            </div>
          </GlassCard>

          <GlassCard>
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-4">
                <FileText className="w-8 h-8 text-purple-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Templates</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">Manage message templates</p>
              <button
                onClick={handleTemplateManager}
                className="w-full px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
              >
                Manage Templates
              </button>
            </div>
          </GlassCard>
        </div>

        {/* Instances List */}
        <GlassCard>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">WhatsApp Instances</h2>
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search instances..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200 dark:border-gray-700">
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-500 dark:text-gray-400">Instance ID</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-500 dark:text-gray-400">Phone Number</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-500 dark:text-gray-400">Status</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-500 dark:text-gray-400">Created</th>
                  <th className="text-left py-3 px-4 text-sm font-medium text-gray-500 dark:text-gray-400">Actions</th>
                </tr>
              </thead>
              <tbody>
                {instances
                  .filter(instance => 
                    instance.instance_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    instance.phone_number.includes(searchTerm)
                  )
                  .map((instance) => (
                    <tr key={instance.id} className="border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
                      <td className="py-3 px-4">
                        <span className="font-mono text-sm">{instance.instance_id}</span>
                      </td>
                      <td className="py-3 px-4">
                        <span className="text-sm">{instance.phone_number}</span>
                      </td>
                      <td className="py-3 px-4">
                        <div className="flex items-center space-x-2">
                          <span className={getStatusColor(instance.status)}>
                            {getStatusIcon(instance.status)}
                          </span>
                          <span className="text-sm capitalize">{instance.status}</span>
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {new Date(instance.created_at).toLocaleDateString()}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        <div className="flex items-center space-x-2">
                          <button className="p-1 text-blue-500 hover:text-blue-600">
                            <Eye className="w-4 h-4" />
                          </button>
                          <button className="p-1 text-green-500 hover:text-green-600">
                            <Edit className="w-4 h-4" />
                          </button>
                          <button className="p-1 text-red-500 hover:text-red-600">
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>

          {instances.length === 0 && (
            <div className="text-center py-8">
              <Database className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500 dark:text-gray-400">No WhatsApp instances found</p>
              <button
                onClick={handleAddInstance}
                className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                Add Your First Instance
              </button>
            </div>
          )}
        </GlassCard>

        {/* Modals */}
        {showTemplateManager && (
          <WhatsAppTemplateManager
            isOpen={showTemplateManager}
            onClose={() => setShowTemplateManager(false)}
          />
        )}

        {showQuickMessage && (
          <Modal
            isOpen={showQuickMessage}
            onClose={() => setShowQuickMessage(false)}
            title="Quick Message"
          >
            <div className="p-6">
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                Quick message functionality will be implemented here.
              </p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowQuickMessage(false)}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Close
                </button>
              </div>
            </div>
          </Modal>
        )}

        {showAddInstance && (
          <Modal
            isOpen={showAddInstance}
            onClose={() => setShowAddInstance(false)}
            title="Add WhatsApp Instance"
          >
            <div className="p-6">
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                Add instance functionality will be implemented here.
              </p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowAddInstance(false)}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Close
                </button>
              </div>
            </div>
          </Modal>
        )}
      </div>
    </div>
  );
};

export default WhatsAppHubPage;
