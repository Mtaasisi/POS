import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import GlassCard from '../../shared/components/ui/GlassCard';
import { SimpleBackButton as BackButton } from '../../shared/components/ui/SimpleBackButton';
import { toast } from '../../../lib/toastUtils';
import { 
  MessageCircle, 
  Send, 
  Users, 
  BarChart3, 
  Settings, 
  Plus, 
  Target,
  FileText,
  Image,
  MapPin,
  User,
  Activity,
  CheckCircle,
  XCircle,
  Clock,
  Zap,
  Database,
  Calendar,
  TrendingUp,
  Bell,
  Search,
  Filter,
  RefreshCw,
  Play,
  Eye,
  Edit,
  Trash2,
  Smile,
  MoreVertical,
  ChevronRight,
  Star,
  AlertTriangle,
  LogOut,
  Wifi,
  WifiOff
} from 'lucide-react';
import { supabase } from '../../../lib/supabaseClient';
import { useAuth } from '../../../context/AuthContext';
import { useTheme } from '../../../context/ThemeContext';
import Modal from '../../shared/components/ui/Modal';
import WhatsAppTemplateManager from '../components/WhatsAppTemplateManager';
import { greenApiService } from '../../../services/greenApiService';

// Types
interface WhatsAppInstance {
  id: string;
  instance_id: string;
  phone_number: string;
  status: 'connected' | 'disconnected' | 'connecting' | 'error';
  is_green_api: boolean;
  created_at: string;
}

interface MessageTemplate {
  id: string;
  name: string;
  content: string;
  category: string;
  is_active: boolean;
}

interface BulkCampaign {
  id: string;
  name: string;
  status: 'draft' | 'scheduled' | 'sending' | 'completed' | 'failed' | 'paused';
  total_recipients: number;
  sent_count: number;
  delivered_count: number;
  failed_count: number;
  created_at: string;
}

const WhatsAppHubPage: React.FC = () => {
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  const { isDark } = useTheme();
  
  // State
  const [activeSection, setActiveSection] = useState<'overview' | 'messaging' | 'bulk' | 'templates' | 'analytics'>('overview');
  const [instances, setInstances] = useState<WhatsAppInstance[]>([]);
  const [templates, setTemplates] = useState<MessageTemplate[]>([]);
  const [campaigns, setCampaigns] = useState<BulkCampaign[]>([]);
  const [messages, setMessages] = useState<Array<{
    id: string;
    status: string;
    created_at: string;
  }>>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [silentRefreshing, setSilentRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [searchTerm, setSearchTerm] = useState('');
  const [showQuickMessage, setShowQuickMessage] = useState(false);
  const [showBulkCreator, setShowBulkCreator] = useState(false);
  const [filteredTemplates, setFilteredTemplates] = useState<MessageTemplate[]>([]);
  const [filteredCampaigns, setFilteredCampaigns] = useState<BulkCampaign[]>([]);
  
  // Template management state
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showTemplateManager, setShowTemplateManager] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<MessageTemplate | null>(null);
  const [templateForm, setTemplateForm] = useState({
    name: '',
    content: '',
    category: 'general',
    is_active: true
  });
  const [templateError, setTemplateError] = useState('');

  // Settings and Instance Management State
  const [showSettings, setShowSettings] = useState(false);
  const [showAddInstance, setShowAddInstance] = useState(false);
  const [showEditInstance, setShowEditInstance] = useState(false);
  const [editingInstance, setEditingInstance] = useState<WhatsAppInstance | null>(null);
  const [showQrModal, setShowQrModal] = useState(false);
  const [selectedInstanceForQr, setSelectedInstanceForQr] = useState<WhatsAppInstance | null>(null);
  const [qrCodeData, setQrCodeData] = useState<string | null>(null);
  const [qrLoading, setQrLoading] = useState(false);
  
  // Settings state
  const [settings, setSettings] = useState({
    autoRefreshInterval: 30,
    defaultMessageType: 'text',
    enableNotifications: true,
    enableSoundAlerts: false,
    maxRetries: 3,
    messageDelay: 1000,
    enableWebhooks: true,
    enableAnalytics: true,
    enableBulkMessaging: true,
    enableTemplateManagement: true
  });
  const [settingsLoading, setSettingsLoading] = useState(false);
  
  // Next refresh state (depends on settings)
  const [nextRefresh, setNextRefresh] = useState<Date>(new Date(Date.now() + 30 * 1000)); // Default 30 seconds
  
  // Quick message state
  const [quickMessageData, setQuickMessageData] = useState({
    recipient: '',
    message: '',
    type: 'text' as 'text' | 'image' | 'document' | 'location' | 'contact',
    selectedInstance: ''
  });

  // Add loading and error states for messaging
  const [sendingMessage, setSendingMessage] = useState(false);
  const [messageError, setMessageError] = useState<string | null>(null);
  const [messageSuccess, setMessageSuccess] = useState<string | null>(null);

  // Add metrics state for analytics
  const [metrics, setMetrics] = useState({
    deliveryRate: 95.2,
    totalMessages: 1247,
    successRate: 98.1
  });

  // Update quick message type when settings change
  useEffect(() => {
    setQuickMessageData(prev => ({
      ...prev,
      type: settings.defaultMessageType as 'text' | 'image' | 'document' | 'location' | 'contact'
    }));
  }, [settings.defaultMessageType]);

  // Handle quick message sending
  const handleQuickMessage = async () => {
    if (!quickMessageData.selectedInstance || !quickMessageData.recipient || !quickMessageData.message) {
      setMessageError('Please fill in all required fields');
      return;
    }

    setSendingMessage(true);
    setMessageError(null);
    setMessageSuccess(null);

    try {
      // Simulate API call with delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Here you would integrate with your actual messaging API
      // const response = await greenApiService.sendMessage({
      //   instanceId: quickMessageData.selectedInstance,
      //   recipient: quickMessageData.recipient,
      //   message: quickMessageData.message,
      //   type: quickMessageData.type
      // });

      setMessageSuccess('Message sent successfully!');
      setQuickMessageData({
        recipient: '',
        message: '',
        type: settings.defaultMessageType as 'text' | 'image' | 'document' | 'location' | 'contact',
        selectedInstance: ''
      });
      
      // Close modal after success
      setTimeout(() => {
        setShowQuickMessage(false);
        setMessageSuccess(null);
      }, 2000);

    } catch (error: any) {
      console.error('Error sending message:', error);
      setMessageError(`Failed to send message: ${error.message || 'Unknown error'}`);
    } finally {
      setSendingMessage(false);
    }
  };

  // Handle bulk creator navigation
  const handleBulkCreator = () => {
    setShowBulkCreator(false);
    // Navigate to bulk campaign management
    navigate('/admin/green-api-management?tab=campaigns');
  };

  // Handle template selection
  const handleTemplateSelection = (template: any) => {
    setQuickMessageData(prev => ({
      ...prev,
      message: template.template.message
    }));
    setShowQuickMessage(true);
  };

  // Get template color classes
  const getTemplateColorClasses = (color: string) => {
    const colors: { [key: string]: string } = {
      green: 'bg-green-500',
      blue: 'bg-blue-500',
      purple: 'bg-purple-500',
      orange: 'bg-orange-500',
      red: 'bg-red-500',
      indigo: 'bg-indigo-500'
    };
    return colors[color] || 'bg-gray-500';
  };

  // Get campaign status color
  const getCampaignStatusColor = (status: string) => {
    const colors: { [key: string]: string } = {
      completed: 'bg-green-100 text-green-800',
      sending: 'bg-blue-100 text-blue-800',
      failed: 'bg-red-100 text-red-800',
      paused: 'bg-orange-100 text-orange-800',
      draft: 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  // Template management functions
  const openAddTemplate = () => {
    setEditingTemplate(null);
    setTemplateForm({
      name: '',
      content: '',
      category: 'general',
      is_active: true
    });
    setTemplateError('');
    setShowTemplateModal(true);
  };

  const openEditTemplate = (template: MessageTemplate) => {
    setEditingTemplate(template);
    setTemplateForm({
      name: template.name,
      content: template.content,
      category: template.category,
      is_active: template.is_active
    });
    setTemplateError('');
    setShowTemplateModal(true);
  };

  const handleTemplateFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setTemplateForm(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  const handleSaveTemplate = async (e: React.FormEvent) => {
    e.preventDefault();
    setTemplateError('');

    if (!templateForm.name.trim() || !templateForm.content.trim()) {
      setTemplateError('Please fill in all required fields');
      return;
    }

    try {
      if (editingTemplate) {
        // Update existing template
        const { error } = await supabase!
          .from('whatsapp_templates')
          .update({
            name: templateForm.name,
            content: templateForm.content,
            category: templateForm.category,
            is_active: templateForm.is_active,
            updated_at: new Date().toISOString()
          })
          .eq('id', editingTemplate.id);

        if (error) throw error;

        setTemplates(prev => prev.map(t => 
          t.id === editingTemplate.id 
            ? { ...t, ...templateForm }
            : t
        ));
        toast.success('Template updated successfully');
      } else {
        // Create new template
        const { data, error } = await supabase!
          .from('whatsapp_templates')
          .insert({
            name: templateForm.name,
            content: templateForm.content,
            category: templateForm.category,
            is_active: templateForm.is_active,
            user_id: currentUser?.id
          })
          .select()
          .single();

        if (error) throw error;

        setTemplates(prev => [data, ...prev]);
        toast.success('Template created successfully');
      }

      setShowTemplateModal(false);
      setEditingTemplate(null);
    } catch (error: any) {
      console.error('Error saving template:', error);
      setTemplateError(`Failed to save template: ${error.message}`);
    }
  };

  const handleToggleTemplateStatus = async (templateId: string, currentStatus: boolean) => {
    try {
      const { error } = await supabase!
        .from('whatsapp_templates')
        .update({ is_active: !currentStatus })
        .eq('id', templateId);

      if (error) throw error;

      setTemplates(prev => prev.map(t => 
        t.id === templateId 
          ? { ...t, is_active: !currentStatus }
          : t
      ));
      toast.success(`Template ${!currentStatus ? 'activated' : 'deactivated'} successfully`);
    } catch (error: any) {
      console.error('Error toggling template status:', error);
      toast.error(`Failed to update template status: ${error.message}`);
    }
  };

  const handleDeleteTemplate = async (templateId: string) => {
    if (!confirm('Are you sure you want to delete this template?')) return;

    try {
      const { error } = await supabase!
        .from('whatsapp_templates')
        .delete()
        .eq('id', templateId);

      if (error) throw error;

      setTemplates(prev => prev.filter(t => t.id !== templateId));
      toast.success('Template deleted successfully');
    } catch (error: any) {
      console.error('Error deleting template:', error);
      toast.error(`Failed to delete template: ${error.message}`);
    }
  };

  // Settings management functions
  const saveSettings = async () => {
    setSettingsLoading(true);
    try {
      const { error } = await supabase!
        .from('whatsapp_hub_settings')
        .upsert({
          user_id: currentUser?.id,
          settings: settings,
          updated_at: new Date().toISOString()
        });

      if (error) throw error;

      toast.success('Settings saved successfully');
      setShowSettings(false);
    } catch (error: any) {
      console.error('Error saving settings:', error);
      toast.error(`Failed to save settings: ${error.message}`);
    } finally {
      setSettingsLoading(false);
    }
  };

  const resetSettings = () => {
    setSettings({
      autoRefreshInterval: 30,
      defaultMessageType: 'text',
      enableNotifications: true,
      enableSoundAlerts: false,
      maxRetries: 3,
      messageDelay: 1000,
      enableWebhooks: true,
      enableAnalytics: true,
      enableBulkMessaging: true,
      enableTemplateManagement: true
    });
  };

  // Instance management functions
  const handleDeleteInstance = async (instanceId: string) => {
    if (!confirm('Are you sure you want to delete this instance?')) return;

    try {
      const { error } = await supabase!
        .from('whatsapp_instances')
        .delete()
        .eq('id', instanceId);

      if (error) throw error;

      setInstances(prev => prev.filter(i => i.id !== instanceId));
      toast.success('Instance deleted successfully');
    } catch (error: any) {
      console.error('Error deleting instance:', error);
      toast.error(`Failed to delete instance: ${error.message}`);
    }
  };

  const generateQrCode = async (instance: WhatsAppInstance) => {
    setQrLoading(true);
    try {
      // Simulate QR code generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      setQrCodeData('simulated-qr-code-data');
    } catch (error: any) {
      console.error('Error generating QR code:', error);
      toast.error(`Failed to generate QR code: ${error.message}`);
    } finally {
      setQrLoading(false);
    }
  };

  const logoutInstance = async (instance: WhatsAppInstance) => {
    try {
      const { error } = await supabase!
        .from('whatsapp_instances')
        .update({ status: 'disconnected' })
        .eq('id', instance.id);

      if (error) throw error;

      setInstances(prev => prev.map(i => 
        i.id === instance.id 
          ? { ...i, status: 'disconnected' }
          : i
      ));
      toast.success('Instance logged out successfully');
    } catch (error: any) {
      console.error('Error logging out instance:', error);
      toast.error(`Failed to logout instance: ${error.message}`);
    }
  };

  // Navigation functions
  const handleNavigateToGreenApi = (tab?: string, params?: any) => {
    const queryParams = new URLSearchParams();
    if (tab) queryParams.set('tab', tab);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        queryParams.set(key, value as string);
      });
    }
    
    const url = `/admin/green-api-management${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
    navigate(url);
  };

  // Data loading functions
  const loadData = async (showRefresh = false, silent = false) => {
    if (showRefresh && !silent) {
      setRefreshing(true);
    } else if (showRefresh && silent) {
      setSilentRefreshing(true);
    } else if (!silent) {
      setLoading(true);
    }
    setError(null);

    try {
      // Load instances
      const { data: instancesData, error: instancesError } = await supabase!
        .from('whatsapp_instances')
        .select('*')
        .order('created_at', { ascending: false });

      if (instancesError) throw instancesError;

      // Load templates
      const { data: templatesData, error: templatesError } = await supabase!
        .from('whatsapp_templates')
        .select('*')
        .eq('user_id', currentUser?.id)
        .order('created_at', { ascending: false });

      if (templatesError) throw templatesError;

      // Load campaigns
      const { data: campaignsData, error: campaignsError } = await supabase!
        .from('whatsapp_campaigns')
        .select('*')
        .eq('user_id', currentUser?.id)
        .order('created_at', { ascending: false });

      if (campaignsError) throw campaignsError;

      // Load settings
      const { data: settingsData, error: settingsError } = await supabase!
        .from('whatsapp_hub_settings')
        .select('settings')
        .eq('user_id', currentUser?.id)
        .single();

      if (!settingsError && settingsData) {
        setSettings(prev => ({ ...prev, ...settingsData.settings }));
      }

      setInstances(instancesData || []);
      setTemplates(templatesData || []);
      setCampaigns(campaignsData || []);
      setLastUpdate(new Date());

    } catch (error: any) {
      console.error('Error loading data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load data';
      setError(errorMessage);
      if (!silent) {
        toast.error(errorMessage);
      }
    } finally {
      if (!silent) {
        setLoading(false);
        setRefreshing(false);
      }
      if (silent) {
        setSilentRefreshing(false);
      }
      if (showRefresh && !silent) {
        toast.success('Data refreshed successfully');
      }
    }
  };

  // Filter data based on search term
  useEffect(() => {
    const filteredTemplatesData = templates.filter(template =>
      template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.category.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredCampaignsData = campaigns.filter(campaign =>
      campaign.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      campaign.status.toLowerCase().includes(campaign.status.toLowerCase())
    );

    setFilteredTemplates(filteredTemplatesData);
    setFilteredCampaigns(filteredCampaignsData);
  }, [searchTerm, templates, campaigns]);

  // Auto-refresh functionality
  useEffect(() => {
    const interval = setInterval(() => {
      if (settings.autoRefreshInterval > 0) {
        setSilentRefreshing(true);
        loadData(false, true).finally(() => {
          setSilentRefreshing(false);
        });
      }
    }, settings.autoRefreshInterval * 1000);

    return () => clearInterval(interval);
  }, [settings.autoRefreshInterval]);

  // Load data on component mount
  useEffect(() => {
    loadData();
  }, [currentUser]);

  // Update next refresh time
  useEffect(() => {
    const nextRefreshTime = new Date(Date.now() + settings.autoRefreshInterval * 1000);
    setNextRefresh(nextRefreshTime);
  }, [settings.autoRefreshInterval, lastUpdate]);

  // Redirect non-admin users
  useEffect(() => {
    if (currentUser && currentUser.role !== 'admin') {
      navigate('/dashboard');
    }
  }, [currentUser, navigate]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      // Ctrl/Cmd + R to refresh
      if ((event.ctrlKey || event.metaKey) && event.key === 'r') {
        event.preventDefault();
        loadData(true);
      }
      
      // Ctrl/Cmd + K to focus search
      if ((event.ctrlKey || event.metaKey) && event.key === 'k') {
        event.preventDefault();
        const searchInput = document.querySelector('input[placeholder*="Search"]') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }
      
      // Ctrl/Cmd + N for new quick message
      if ((event.ctrlKey || event.metaKey) && event.key === 'n') {
        event.preventDefault();
        setShowQuickMessage(true);
      }
      
      // Ctrl/Cmd + B for bulk creator
      if ((event.ctrlKey || event.metaKey) && event.key === 'b') {
        event.preventDefault();
        setShowBulkCreator(true);
      }
      
      // Number keys for quick navigation
      if (event.key >= '1' && event.key <= '5' && !event.ctrlKey && !event.metaKey) {
        const sections = ['overview', 'messaging', 'bulk', 'templates', 'analytics'];
        const index = parseInt(event.key) - 1;
        if (index < sections.length) {
          setActiveSection(sections[index] as 'overview' | 'messaging' | 'bulk' | 'templates' | 'analytics');
        }
      }
      
      // Escape to close modals
      if (event.key === 'Escape') {
        setShowQuickMessage(false);
        setShowBulkCreator(false);
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, []);

  // Load data
  useEffect(() => {
    loadData();
    loadSettings();
  }, []);

  // Set up real-time updates with dynamic interval
  useEffect(() => {
    const interval = setInterval(() => {
      loadData(false, true); // Silent refresh to prevent flickering
    }, settings.autoRefreshInterval * 1000); // Convert seconds to milliseconds
    
    // Update next refresh time
    setNextRefresh(new Date(Date.now() + settings.autoRefreshInterval * 1000));
    
    return () => clearInterval(interval);
  }, [settings.autoRefreshInterval]);

  // Real-time subscriptions
  useEffect(() => {
    if (!currentUser) return;

    // Subscribe to instance changes
    const instancesSubscription = supabase!
      .channel('whatsapp-instances-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'whatsapp_instances'
        },
        (payload) => {
          console.log('Instance change detected:', payload);
          // Refresh instances data silently to prevent flickering
          loadData(true, true);
        }
      )
      .subscribe();

    // Subscribe to message queue changes
    const messagesSubscription = supabase!
      .channel('green-api-messages-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'green_api_message_queue'
        },
        (payload) => {
          console.log('Message change detected:', payload);
          // Refresh messages data silently to prevent flickering
          loadData(true, true);
        }
      )
      .subscribe();

    // Subscribe to campaign changes
    const campaignsSubscription = supabase!
      .channel('green-api-campaigns-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'green_api_bulk_campaigns'
        },
        (payload) => {
          console.log('Campaign change detected:', payload);
          // Refresh campaigns data silently to prevent flickering
          loadData(true, true);
        }
      )
      .subscribe();

    return () => {
      instancesSubscription.unsubscribe();
      messagesSubscription.unsubscribe();
      campaignsSubscription.unsubscribe();
    };
  }, [currentUser]);

  // Filter data based on search term
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredTemplates(templates);
      setFilteredCampaigns(campaigns);
    } else {
      const lowerSearchTerm = searchTerm.toLowerCase();
      
      const filteredTemplatesData = templates.filter(template =>
        template.name.toLowerCase().includes(lowerSearchTerm) ||
        template.content.toLowerCase().includes(lowerSearchTerm) ||
        template.category.toLowerCase().includes(lowerSearchTerm)
      );
      
      const filteredCampaignsData = campaigns.filter(campaign =>
        campaign.name.toLowerCase().includes(lowerSearchTerm) ||
        campaign.status.toLowerCase().includes(lowerSearchTerm)
      );
      
      setFilteredTemplates(filteredTemplatesData);
      setFilteredCampaigns(filteredCampaignsData);
    }
  }, [searchTerm, templates, campaigns]);

    const loadData = async (isRefresh = false, silent = false) => {
    if (isRefresh && !silent) {
      setRefreshing(true);
    } else if (isRefresh && silent) {
      setSilentRefreshing(true);
    } else if (!silent) {
      setLoading(true);
    }
    setError(null);
    
    try {
      // Load instances
      const { data: instancesData, error: instancesError } = await supabase!
        .from('whatsapp_instances')
        .select('*')
        .order('created_at', { ascending: false });

      if (instancesError) throw instancesError;
      setInstances(instancesData || []);

      // Load templates
      const { data: templatesData, error: templatesError } = await supabase!
        .from('green_api_message_templates')
        .select('*')
        .order('created_at', { ascending: false });

      if (templatesError) throw templatesError;
      setTemplates(templatesData || []);

      // Load campaigns
      const { data: campaignsData, error: campaignsError } = await supabase!
        .from('green_api_bulk_campaigns')
        .select('*')
        .order('created_at', { ascending: false });

      if (campaignsError) throw campaignsError;
      setCampaigns(campaignsData || []);

      // Load messages
      const { data: messagesData, error: messagesError } = await supabase!
        .from('green_api_message_queue')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(100);

      if (messagesError) throw messagesError;
      setMessages(messagesData || []);

    } catch (error) {
      console.error('Error loading data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load data';
      setError(errorMessage);
      if (!silent) {
        toast.error(errorMessage);
      }
    } finally {
      if (!silent) {
        setLoading(false);
        setRefreshing(false);
      }
      if (silent) {
        setSilentRefreshing(false);
      }
      setLastUpdate(new Date());
      if (isRefresh && !silent) {
        toast.success('Data refreshed successfully');
      }
    }
  };

  const handleQuickMessage = async () => {
    if (!quickMessageData.recipient || !quickMessageData.message || !quickMessageData.selectedInstance) {
      toast.error('Please fill in all required fields');
      return;
    }
    
    try {
      // Check if instance is connected
      const selectedInstance = instances.find(inst => inst.id === quickMessageData.selectedInstance);
      if (!selectedInstance) {
        toast.error('Selected WhatsApp instance not found');
        return;
      }
      
      if (selectedInstance.status !== 'connected') {
        toast.error(`WhatsApp instance is not connected. Status: ${selectedInstance.status}`);
        return;
      }
      
      // Apply settings: message delay
      if (settings.messageDelay > 0) {
        toast.info(`Applying ${settings.messageDelay}ms delay before sending...`);
        await new Promise(resolve => setTimeout(resolve, settings.messageDelay));
      }
      
      // Apply settings: max retries
      let retryCount = 0;
      const maxRetries = settings.maxRetries;
      
      const sendMessageWithRetry = async (): Promise<boolean> => {
        try {
          console.log('Sending message via Green API:', {
            recipient: quickMessageData.recipient,
            message: quickMessageData.message,
            type: quickMessageData.type,
            instance: quickMessageData.selectedInstance,
            settings: {
              messageDelay: settings.messageDelay,
              maxRetries: settings.maxRetries,
              enableNotifications: settings.enableNotifications,
              enableSoundAlerts: settings.enableSoundAlerts
            }
          });
          
          // Send message via Green API
          const result = await greenApiService.sendMessage({
            instanceId: quickMessageData.selectedInstance,
            chatId: quickMessageData.recipient,
            message: quickMessageData.message,
            messageType: quickMessageData.type as 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'sticker' | 'poll'
          });
          
          console.log('Green API response:', result);
          
          // Check message status after sending
          if (result.status === 'sent' || result.status === 'sending') {
            console.log('Message queued successfully with ID:', result.id);
          } else {
            throw new Error(`Message failed to queue. Status: ${result.status}`);
          }
          
          // Apply settings: notifications
          if (settings.enableNotifications) {
            toast.success('Message sent successfully via WhatsApp!');
          }
          
          // Apply settings: sound alerts
          if (settings.enableSoundAlerts) {
            // Play notification sound
            const audio = new Audio('/notification.mp3');
            audio.play().catch(() => {}); // Ignore if sound fails to play
          }
          
          // Reset form
          setQuickMessageData({
            recipient: '',
            message: '',
            type: settings.defaultMessageType as 'text' | 'image' | 'document' | 'location' | 'contact',
            selectedInstance: ''
          });
          setShowQuickMessage(false);
          
          // Refresh messages list to show the new message
          loadData();
          
          return true;
          
        } catch (error: any) {
          retryCount++;
          if (retryCount <= maxRetries) {
            toast.warning(`Retry ${retryCount}/${maxRetries} - ${error.message}, retrying...`);
            await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retry
            return sendMessageWithRetry();
          } else {
            throw new Error(`Failed to send message after ${maxRetries} retries: ${error.message}`);
          }
        }
      };
      
      await sendMessageWithRetry();
      
    } catch (error: any) {
      console.error('Error sending message:', error);
      toast.error(`Failed to send message: ${error.message}`);
    }
  };

  const handleBulkCreator = () => {
    if (!settings.enableBulkMessaging) {
      toast.error('Bulk messaging is disabled in settings');
      return;
    }
    
    setShowBulkCreator(false);
    // Stay on WhatsApp Hub page - bulk messaging will be handled here
    toast.success('Bulk messaging feature coming soon!');
  };

  const handleNavigateToGreenApi = (activeTab?: string, additionalState?: Record<string, unknown>) => {
    // Stay on WhatsApp Hub page - all functionality is now here
    toast.success('WhatsApp Hub is now your central messaging center!');
  };

  const handleTemplateSelection = (template: { template: MessageTemplate }) => {
    setShowBulkCreator(false);
    // Use template in WhatsApp Hub
    setQuickMessageData(prev => ({
      ...prev,
      message: template.template.content
    }));
    toast.success('Template applied to message!');
  };

  // Template management functions
  const openAddTemplate = () => {
    if (!settings.enableTemplateManagement) {
      toast.error('Template management is disabled in settings');
      return;
    }
    
    setEditingTemplate(null);
    setTemplateForm({
      name: '',
      content: '',
      category: 'general',
      is_active: true
    });
    setShowTemplateModal(true);
    setTemplateError('');
  };

  const openEditTemplate = (template: MessageTemplate) => {
    setEditingTemplate(template);
    setTemplateForm({
      name: template.name,
      content: template.content,
      category: template.category,
      is_active: template.is_active
    });
    setShowTemplateModal(true);
    setTemplateError('');
  };

  const handleTemplateFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setTemplateForm(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  const handleSaveTemplate = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!templateForm.name || !templateForm.content) {
      setTemplateError('Name and content are required.');
      return;
    }

    try {
      if (editingTemplate) {
        // Update existing template
        const { error } = await supabase!
          .from('green_api_message_templates')
          .update({
            name: templateForm.name,
            content: templateForm.content,
            category: templateForm.category,
            is_active: templateForm.is_active,
            updated_at: new Date().toISOString()
          })
          .eq('id', editingTemplate.id);

        if (error) throw error;
        toast.success('Template updated successfully');
      } else {
        // Create new template
        const { error } = await supabase!
          .from('green_api_message_templates')
          .insert({
            name: templateForm.name,
            content: templateForm.content,
            category: templateForm.category,
            is_active: templateForm.is_active
          });

        if (error) throw error;
        toast.success('Template created successfully');
      }

      setShowTemplateModal(false);
      loadData(true); // Refresh data
    } catch (error) {
      console.error('Error saving template:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to save template';
      setTemplateError(errorMessage);
      toast.error(errorMessage);
    }
  };

  const handleDeleteTemplate = async (templateId: string) => {
    if (!confirm('Are you sure you want to delete this template?')) return;

    try {
      const { error } = await supabase!
        .from('green_api_message_templates')
        .delete()
        .eq('id', templateId);

      if (error) throw error;
      toast.success('Template deleted successfully');
      loadData(true); // Refresh data
    } catch (error) {
      console.error('Error deleting template:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to delete template';
      toast.error(errorMessage);
    }
  };

  const handleToggleTemplateStatus = async (templateId: string, currentStatus: boolean) => {
    try {
      const { error } = await supabase!
        .from('green_api_message_templates')
        .update({
          is_active: !currentStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', templateId);

      if (error) throw error;
      toast.success(`Template ${!currentStatus ? 'activated' : 'deactivated'} successfully`);
      loadData(true); // Refresh data
    } catch (error) {
      console.error('Error updating template status:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to update template status';
      toast.error(errorMessage);
    }
  };

  // Instance Management Functions
  const handleAddInstance = () => {
    setShowAddInstance(true);
  };

  const handleEditInstance = (instance: WhatsAppInstance) => {
    setEditingInstance(instance);
    setShowEditInstance(true);
  };

  const handleDeleteInstance = async (instanceId: string) => {
    if (!confirm('Are you sure you want to delete this instance? This action cannot be undone.')) {
      return;
    }

    try {
      const { error } = await supabase!
        .from('whatsapp_instances')
        .delete()
        .eq('id', instanceId);

      if (error) throw error;
      toast.success('Instance deleted successfully');
      loadData(true);
    } catch (error) {
      console.error('Error deleting instance:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to delete instance';
      toast.error(errorMessage);
    }
  };

  const generateQrCode = async (instance: WhatsAppInstance) => {
    setQrLoading(true);
    setSelectedInstanceForQr(instance);
    setShowQrModal(true);

    try {
      const response = await fetch(`https://api.green-api.com/waInstance${instance.instance_id}/getQrCode/${instance.green_api_token || instance.api_token}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.qrCode) {
        setQrCodeData(data.qrCode);
        toast.success('QR Code generated successfully');
      } else {
        throw new Error('No QR code received from Green API');
      }
    } catch (error: any) {
      console.error('Error generating QR code:', error);
      toast.error(`Failed to generate QR code: ${error.message}`);
      setQrCodeData(null);
    } finally {
      setQrLoading(false);
    }
  };

  const checkInstanceState = async (instance: WhatsAppInstance) => {
    try {
      const response = await fetch(`https://api.green-api.com/waInstance${instance.instance_id}/getStateInstance/${instance.green_api_token || instance.api_token}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      const data = result.data || result;
      
      const newStatus = data.stateInstance === 'authorized' ? 'connected' : 
                       data.stateInstance === 'notAuthorized' ? 'disconnected' : 
                       data.stateInstance === 'blocked' ? 'error' : 'connecting';

      if (newStatus !== instance.status) {
        const { error } = await supabase!
          .from('whatsapp_instances')
          .update({ status: newStatus })
          .eq('id', instance.id);

        if (!error) {
          setInstances(prev => prev.map(i => 
            i.id === instance.id ? { ...i, status: newStatus } : i
          ));
        }
      }

      return data.stateInstance;
    } catch (error: any) {
      console.error('Error checking instance state:', error);
      return null;
    }
  };

  const logoutInstance = async (instance: WhatsAppInstance) => {
    if (!confirm('Are you sure you want to logout this instance? This will disconnect the WhatsApp device.')) {
      return;
    }

    try {
      const response = await fetch(`https://api.green-api.com/waInstance${instance.instance_id}/logout/${instance.green_api_token || instance.api_token}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const { error } = await supabase!
        .from('whatsapp_instances')
        .update({ status: 'disconnected' })
        .eq('id', instance.id);

      if (!error) {
        setInstances(prev => prev.map(i => 
          i.id === instance.id ? { ...i, status: 'disconnected' } : i
        ));
        toast.success('Instance logged out successfully');
      }
    } catch (error: any) {
      console.error('Error logging out instance:', error);
      toast.error(`Failed to logout instance: ${error.message}`);
    }
  };

  // Settings Management Functions
  const loadSettings = async () => {
    try {
      const { data, error } = await supabase!
        .from('whatsapp_hub_settings')
        .select('*')
        .eq('user_id', currentUser?.id)
        .single();

      if (error) {
        // If table doesn't exist or no settings found, use default settings
        if (error.code === 'PGRST116') {
          console.log('No settings found for user, using defaults');
        } else {
          console.log('Settings table not available, using defaults:', error.message);
        }
        return;
      }

      if (data) {
        const newSettings = {
          autoRefreshInterval: data.auto_refresh_interval || 30,
          defaultMessageType: data.default_message_type || 'text',
          enableNotifications: data.enable_notifications ?? true,
          enableSoundAlerts: data.enable_sound_alerts ?? false,
          maxRetries: data.max_retries || 3,
          messageDelay: data.message_delay || 1000,
          enableWebhooks: data.enable_webhooks ?? true,
          enableAnalytics: data.enable_analytics ?? true,
          enableBulkMessaging: data.enable_bulk_messaging ?? true,
          enableTemplateManagement: data.enable_template_management ?? true
        };
        setSettings(newSettings);
        // Update next refresh time based on loaded settings
        setNextRefresh(new Date(Date.now() + newSettings.autoRefreshInterval * 1000));
      }
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  };

  const saveSettings = async () => {
    // Validate settings before saving
    if (!validateSettings()) {
      return;
    }
    
    setSettingsLoading(true);
    try {
      // First check if settings exist for this user
      const { data: existingSettings } = await supabase!
        .from('whatsapp_hub_settings')
        .select('id')
        .eq('user_id', currentUser?.id)
        .single();

      const settingsData = {
        user_id: currentUser?.id,
        auto_refresh_interval: settings.autoRefreshInterval,
        default_message_type: settings.defaultMessageType,
        enable_notifications: settings.enableNotifications,
        enable_sound_alerts: settings.enableSoundAlerts,
        max_retries: settings.maxRetries,
        message_delay: settings.messageDelay,
        enable_webhooks: settings.enableWebhooks,
        enable_analytics: settings.enableAnalytics,
        enable_bulk_messaging: settings.enableBulkMessaging,
        enable_template_management: settings.enableTemplateManagement,
        updated_at: new Date().toISOString()
      };

      let error;
      if (existingSettings) {
        // Update existing settings
        const { error: updateError } = await supabase!
          .from('whatsapp_hub_settings')
          .update(settingsData)
          .eq('user_id', currentUser?.id);
        error = updateError;
      } else {
        // Insert new settings
        const { error: insertError } = await supabase!
          .from('whatsapp_hub_settings')
          .insert(settingsData);
        error = insertError;
      }

      if (error) {
        // If table doesn't exist, show a helpful message
        if (error.code === 'PGRST301' || error.message.includes('does not exist')) {
          toast.error('Settings table not available. Please contact administrator to set up the database.');
        } else {
          throw error;
        }
        return;
      }
      
      toast.success('Settings saved successfully');
      
      // Show refresh interval update message
      const refreshMinutes = Math.round(settings.autoRefreshInterval / 60);
      if (refreshMinutes >= 1) {
        toast.success(`Auto refresh updated to ${refreshMinutes} minute${refreshMinutes > 1 ? 's' : ''}`);
      } else {
        toast.success(`Auto refresh updated to ${settings.autoRefreshInterval} seconds`);
      }
    } catch (error: any) {
      console.error('Error saving settings:', error);
      toast.error(`Failed to save settings: ${error.message}`);
    } finally {
      setSettingsLoading(false);
    }
  };

  const resetSettings = () => {
    if (confirm('Are you sure you want to reset all settings to default values?')) {
      const defaultSettings = {
        autoRefreshInterval: 30,
        defaultMessageType: 'text',
        enableNotifications: true,
        enableSoundAlerts: false,
        maxRetries: 3,
        messageDelay: 1000,
        enableWebhooks: true,
        enableAnalytics: true,
        enableBulkMessaging: true,
        enableTemplateManagement: true
      };
      setSettings(defaultSettings);
      
      // Update next refresh time
      setNextRefresh(new Date(Date.now() + defaultSettings.autoRefreshInterval * 1000));
      
      // Update quick message type
      setQuickMessageData(prev => ({
        ...prev,
        type: defaultSettings.defaultMessageType as 'text' | 'image' | 'document' | 'location' | 'contact'
      }));
      
      toast.success('Settings reset to defaults');
    }
  };

  // Validate and apply settings
  const validateSettings = () => {
    const issues = [];
    
    if (settings.autoRefreshInterval < 10 || settings.autoRefreshInterval > 3600) {
      issues.push('Auto refresh interval must be between 10 seconds and 1 hour');
    }
    
    if (settings.messageDelay < 500 || settings.messageDelay > 10000) {
      issues.push('Message delay must be between 500ms and 10 seconds');
    }
    
    if (settings.maxRetries < 1 || settings.maxRetries > 10) {
      issues.push('Max retries must be between 1 and 10');
    }
    
    if (issues.length > 0) {
      toast.error(`Settings validation failed: ${issues.join(', ')}`);
      return false;
    }
    
    return true;
  };

  const getTemplateColorClasses = (color: string) => {
    switch (color) {
      case 'green': return 'bg-green-500';
      case 'blue': return 'bg-blue-500';
      case 'purple': return 'bg-purple-500';
      case 'orange': return 'bg-orange-500';
      case 'red': return 'bg-red-500';
      case 'indigo': return 'bg-indigo-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-100 text-green-800';
      case 'disconnected': return 'bg-gray-100 text-gray-800';
      case 'connecting': return 'bg-yellow-100 text-yellow-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCampaignStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'sending': return 'bg-blue-100 text-blue-800';
      case 'scheduled': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      case 'draft': return 'bg-gray-100 text-gray-800';
      case 'paused': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Calculate delivery metrics
  const calculateDeliveryMetrics = () => {
    const totalMessages = messages.length;
    const deliveredMessages = messages.filter(m => ['sent', 'delivered', 'read'].includes(m.status)).length;
    const failedMessages = messages.filter(m => ['failed', 'rate_limited'].includes(m.status)).length;
    const deliveryRate = totalMessages > 0 ? Math.round((deliveredMessages / totalMessages) * 100) : 0;
    const successRate = totalMessages > 0 ? Math.round(((totalMessages - failedMessages) / totalMessages) * 100) : 0;

    return {
      totalMessages,
      deliveredMessages,
      failedMessages,
      deliveryRate,
      successRate
    };
  };

  // Calculate campaign metrics
  const calculateCampaignMetrics = () => {
    const totalCampaigns = campaigns.length;
    const activeCampaigns = campaigns.filter(c => c.status === 'sending').length;
    const completedCampaigns = campaigns.filter(c => c.status === 'completed').length;
    const failedCampaigns = campaigns.filter(c => c.status === 'failed').length;
    
    const totalRecipients = campaigns.reduce((sum, c) => sum + (c.total_recipients || 0), 0);
    const totalSent = campaigns.reduce((sum, c) => sum + (c.sent_count || 0), 0);
    const totalDelivered = campaigns.reduce((sum, c) => sum + (c.delivered_count || 0), 0);
    
    const campaignSuccessRate = totalRecipients > 0 ? Math.round((totalDelivered / totalRecipients) * 100) : 0;

    return {
      totalCampaigns,
      activeCampaigns,
      completedCampaigns,
      failedCampaigns,
      totalRecipients,
      totalSent,
      totalDelivered,
      campaignSuccessRate
    };
  };

  const metrics = calculateDeliveryMetrics();
  const campaignMetrics = calculateCampaignMetrics();

  if (loading) {
    return (
      <div className="p-4 sm:p-6 h-full overflow-y-auto pt-8">
        <div className="max-w-6xl mx-auto">
          <GlassCard className="p-6">
            <div className="flex items-center justify-center h-64">
              <div className="flex items-center gap-3">
                <RefreshCw size={20} className="animate-spin text-green-600" />
                <span className="text-gray-600">Loading WhatsApp Hub...</span>
              </div>
            </div>
          </GlassCard>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6 h-full overflow-y-auto pt-8">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <GlassCard className={`p-6 ${isDark ? 'bg-gradient-to-r from-green-600 to-green-700' : 'bg-gradient-to-r from-green-500 to-green-600'} text-white`}>
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
            <div className="flex items-center gap-4">
              <BackButton className="text-white hover:bg-white/20" />
              <div>
                <h1 className="text-2xl sm:text-3xl font-bold">WhatsApp Hub</h1>
                <p className="text-green-100 text-sm sm:text-base">Centralized WhatsApp messaging and management</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg">
                <MessageCircle size={16} />
                <span className="text-sm font-medium">
                  {instances.filter(i => i.status === 'connected').length} Connected
                </span>
              </div>
              <div className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg">
                <Clock size={16} />
                <span className="text-sm font-medium">
                  Updated {lastUpdate.toLocaleTimeString()}
                </span>
              </div>
              <div className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg">
                <RefreshCw size={16} className={silentRefreshing ? 'animate-spin text-green-400' : ''} />
                <span className="text-sm font-medium">
                  Auto-refresh: {settings.autoRefreshInterval >= 60 
                    ? `${Math.round(settings.autoRefreshInterval / 60)}m` 
                    : `${settings.autoRefreshInterval}s`}
                  {silentRefreshing && <span className="text-green-400 ml-1">•</span>}
                </span>
              </div>
              <div className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg">
                <Settings size={16} />
                <span className="text-sm font-medium">
                  Default: {settings.defaultMessageType.charAt(0).toUpperCase() + settings.defaultMessageType.slice(1)}
                </span>
              </div>
              <div className="flex items-center gap-2 px-3 py-2 bg-white/20 rounded-lg">
                <Bell size={16} />
                <span className="text-sm font-medium">
                  {settings.enableNotifications ? 'Notifications: ON' : 'Notifications: OFF'}
                </span>
              </div>
              <button
                onClick={() => setShowSettings(true)}
                className="p-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
                title="Settings"
              >
                <Settings size={16} />
              </button>
              <button
                onClick={() => loadData(true)}
                disabled={refreshing}
                className={`p-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors ${
                  refreshing ? 'opacity-50 cursor-not-allowed' : ''
                }`}
                title={`Next auto-refresh: ${nextRefresh.toLocaleTimeString()}`}
              >
                <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />
              </button>
            </div>
          </div>

                                    {/* Search Bar */}
                          <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-4">
                            <div className="flex-1 relative">
                              <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-green-200" />
                              <input
                                type="text"
                                placeholder="Search messages, campaigns, templates... (Ctrl+K)"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="w-full pl-10 pr-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-green-200 focus:outline-none focus:border-white/50"
                              />
                              {searchTerm && (
                                <button
                                  onClick={() => setSearchTerm('')}
                                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-green-200 hover:text-white"
                                >
                                  <XCircle size={16} />
                                </button>
                              )}
                            </div>
                            <button 
                              className="px-4 py-3 bg-white/20 border border-white/30 rounded-lg hover:bg-white/30 transition-colors"
                              title="Filter options"
                            >
                              <Filter size={16} />
                            </button>
                          </div>
                                </GlassCard>

                        {/* Search Results Indicator */}
                        {searchTerm && (
                          <GlassCard className="p-4 bg-blue-50 border border-blue-200">
                            <div className="flex items-center gap-3">
                              <Search size={20} className="text-blue-600" />
                              <div>
                                <h3 className="text-blue-800 font-medium">Search Results</h3>
                                <p className="text-blue-600 text-sm">
                                  Found {filteredTemplates.length} templates and {filteredCampaigns.length} campaigns matching "{searchTerm}"
                                </p>
                              </div>
                              <button
                                onClick={() => setSearchTerm('')}
                                className="ml-auto px-3 py-1 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 text-sm"
                              >
                                Clear Search
                              </button>
                            </div>
                          </GlassCard>
                        )}

                        {/* Error Display */}
                        {error && (
                          <GlassCard className="p-4 bg-red-50 border border-red-200">
                            <div className="flex items-center gap-3">
                              <AlertTriangle size={20} className="text-red-600" />
                              <div>
                                <h3 className="text-red-800 font-medium">Error Loading Data</h3>
                                <p className="text-red-600 text-sm">{error}</p>
                              </div>
                              <button
                                onClick={() => loadData(true)}
                                className="ml-auto px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 text-sm"
                              >
                                Retry
                              </button>
                            </div>
                          </GlassCard>
                        )}

                        {/* Navigation Tabs */}
        <GlassCard className="p-2">
          <div className={`flex space-x-1 ${isDark ? 'bg-gray-800' : 'bg-gray-100'} p-1 rounded-lg overflow-x-auto`}>
            <button
              onClick={() => setActiveSection('overview')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === 'overview' 
                  ? `${isDark ? 'bg-gray-700 text-green-400' : 'bg-white text-green-600'} shadow-sm` 
                  : `${isDark ? 'text-gray-300 hover:text-gray-100' : 'text-gray-600 hover:text-gray-900'}`
              }`}
            >
              <Activity size={16} />
              Overview
            </button>
            <button
              onClick={() => setActiveSection('messaging')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === 'messaging' 
                  ? `${isDark ? 'bg-gray-700 text-green-400' : 'bg-white text-green-600'} shadow-sm` 
                  : `${isDark ? 'text-gray-300 hover:text-gray-100' : 'text-gray-600 hover:text-gray-900'}`
              }`}
            >
              <Send size={16} />
              Messaging
            </button>
            <button
              onClick={() => setActiveSection('bulk')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === 'bulk' 
                  ? `${isDark ? 'bg-gray-700 text-green-400' : 'bg-white text-green-600'} shadow-sm` 
                  : `${isDark ? 'text-gray-300 hover:text-gray-100' : 'text-gray-600 hover:text-gray-900'}`
              }`}
            >
              <Target size={16} />
              Bulk Campaigns
            </button>
            <button
              onClick={() => setActiveSection('templates')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === 'templates' 
                  ? `${isDark ? 'bg-gray-700 text-green-400' : 'bg-white text-green-600'} shadow-sm` 
                  : `${isDark ? 'text-gray-300 hover:text-gray-100' : 'text-gray-600 hover:text-gray-900'}`
              }`}
            >
              <FileText size={16} />
              Templates
            </button>
            <button
              onClick={() => setActiveSection('analytics')}
              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeSection === 'analytics' 
                  ? `${isDark ? 'bg-gray-700 text-green-400' : 'bg-white text-green-600'} shadow-sm` 
                  : `${isDark ? 'text-gray-300 hover:text-gray-100' : 'text-gray-600 hover:text-gray-900'}`
              }`}
            >
              <BarChart3 size={16} />
              Analytics
            </button>
          </div>
        </GlassCard>

        {/* Content Area */}
        <div className="min-h-[600px]">
          {activeSection === 'overview' && (
            <div className="space-y-6">
              {/* Quick Stats */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <GlassCard className="p-6 bg-gradient-to-br from-green-500 to-green-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">Connected Instances</p>
                      <p className="text-3xl font-bold">{instances.filter(i => i.status === 'connected').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <MessageCircle size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-blue-500 to-blue-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Active Campaigns</p>
                      <p className="text-3xl font-bold">{campaigns.filter(c => c.status === 'sending').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Target size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-purple-500 to-purple-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Message Templates</p>
                      <p className="text-3xl font-bold">{filteredTemplates.length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <FileText size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-orange-500 to-orange-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-orange-100 text-sm">Total Campaigns</p>
                      <p className="text-3xl font-bold">{campaigns.length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <TrendingUp size={24} />
                    </div>
                  </div>
                </GlassCard>
              </div>

              {/* Quick Actions */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Quick Actions</h2>
                  <button
                    onClick={() => setActiveSection('messaging')}
                    className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                  >
                    View All
                    <ChevronRight size={14} />
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* Send Quick Message */}
                  <button
                    onClick={() => setShowQuickMessage(true)}
                    className="group p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl hover:border-green-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <Send size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Send Quick Message</h3>
                        <p className="text-sm text-gray-600">Send a single message</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Perfect for urgent notifications or quick responses</p>
                  </button>

                  {/* Create Bulk Campaign */}
                  <button
                    onClick={() => setShowBulkCreator(true)}
                    className="group p-6 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl hover:border-blue-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <Target size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Create Bulk Campaign</h3>
                        <p className="text-sm text-gray-600">Send to multiple recipients</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Reach your entire audience with one campaign</p>
                  </button>

                  {/* Manage Templates */}
                  <button
                    onClick={() => setShowTemplateManager(true)}
                    className="group p-6 bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl hover:border-purple-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <FileText size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Message Templates</h3>
                        <p className="text-sm text-gray-600">Manage your templates</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Create and organize message templates</p>
                  </button>

                  {/* View Analytics */}
                  <button
                    onClick={() => setActiveSection('analytics')}
                    className="group p-6 bg-gradient-to-br from-orange-50 to-orange-100 border border-orange-200 rounded-xl hover:border-orange-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <BarChart3 size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">View Analytics</h3>
                        <p className="text-sm text-gray-600">Check performance metrics</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Monitor delivery rates and campaign success</p>
                  </button>

                  {/* Manage Instances */}
                  <button
                    onClick={() => setShowSettings(true)}
                    className="group p-6 bg-gradient-to-br from-indigo-50 to-indigo-100 border border-indigo-200 rounded-xl hover:border-indigo-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-indigo-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <Settings size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Manage Instances</h3>
                        <p className="text-sm text-gray-600">Configure WhatsApp instances</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Add, edit, or remove WhatsApp connections</p>
                  </button>

                  {/* Test Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'text',
                        message: 'Test message for WhatsApp integration:\n\n✅ Connection: Active\n📱 Device: Test Device\n🔧 API: Green API\n📊 Status: Ready'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-red-50 to-red-100 border border-red-200 rounded-xl hover:border-red-300 hover:shadow-lg transition-all duration-300 text-left"
                  >
                    <div className="flex items-center gap-4 mb-3">
                      <div className="w-12 h-12 bg-red-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                        <Zap size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Test Messages</h3>
                        <p className="text-sm text-gray-600">Advanced message testing</p>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Test all message types and features</p>
                  </button>
                </div>
              </GlassCard>

              {/* Recent Activity */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Recent Campaigns */}
                <GlassCard className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">Recent Campaigns</h3>
                    <button
                      onClick={() => setActiveSection('bulk')}
                      className="text-green-600 hover:text-green-700 text-sm font-medium"
                    >
                      View All
                    </button>
                  </div>
                  
                  {campaigns.length === 0 ? (
                    <div className="text-center py-8">
                      <Target size={32} className="text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500 text-sm">No campaigns yet</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {campaigns.slice(0, 5).map((campaign) => (
                        <div key={campaign.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className={`w-2 h-2 rounded-full ${
                              campaign.status === 'completed' ? 'bg-green-500' :
                              campaign.status === 'sending' ? 'bg-blue-500' :
                              campaign.status === 'failed' ? 'bg-red-500' :
                              'bg-gray-400'
                            }`} />
                            <div>
                              <p className="font-medium text-gray-900">{campaign.name}</p>
                              <p className="text-sm text-gray-500">
                                {campaign.sent_count}/{campaign.total_recipients} sent
                              </p>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getCampaignStatusColor(campaign.status)}`}>
                              {campaign.status}
                            </div>
                            <p className="text-xs text-gray-500 mt-1">
                              {new Date(campaign.created_at).toLocaleDateString()}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </GlassCard>

                {/* Connected Instances */}
                <GlassCard className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">Connected Instances</h3>
                    <button
                      onClick={() => setShowSettings(true)}
                      className="text-green-600 hover:text-green-700 text-sm font-medium"
                    >
                      Manage
                    </button>
                  </div>
                  
                  {instances.length === 0 ? (
                    <div className="text-center py-8">
                      <MessageCircle size={32} className="text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500 text-sm">No instances configured</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {instances.slice(0, 5).map((instance) => (
                        <div key={instance.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className={`w-2 h-2 rounded-full ${
                              instance.status === 'connected' ? 'bg-green-500' :
                              instance.status === 'connecting' ? 'bg-yellow-500' :
                              instance.status === 'error' ? 'bg-red-500' :
                              'bg-gray-400'
                            }`} />
                            <div>
                              <p className="font-medium text-gray-900">{instance.phone_number}</p>
                              <p className="text-sm text-gray-500">ID: {instance.instance_id}</p>
                            </div>
                          </div>
                          <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(instance.status)}`}>
                            {instance.status}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </GlassCard>
              </div>
            </div>
          )}

          {activeSection === 'messaging' && (
            <div className="space-y-6">
              {/* Message Types */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Message Types</h2>
                                      <button
                      onClick={() => {
                        setQuickMessageData(prev => ({
                          ...prev,
                          type: 'text',
                          message: 'Advanced testing message with multiple features:\n\n📱 Device: Test Device\n📊 Status: Connected\n🔧 Features: All enabled\n\nThis is a comprehensive test message.'
                        }));
                        setShowQuickMessage(true);
                      }}
                      className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                    >
                      Advanced Testing
                      <ChevronRight size={14} />
                    </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* Text Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'text'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl hover:border-green-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center">
                        <MessageCircle size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Text Messages</h3>
                        <p className="text-sm text-gray-600">Simple text communication</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-green-500" />
                        <span>Basic text messages</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-green-500" />
                        <span>Link previews</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-green-500" />
                        <span>Typing indicators</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-green-600">
                      <span>Click to send text message</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>

                  {/* Media Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'image'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl hover:border-blue-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
                        <Image size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Media Messages</h3>
                        <p className="text-sm text-gray-600">Images, documents, files</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-blue-500" />
                        <span>Image uploads</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-blue-500" />
                        <span>Document sharing</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-blue-500" />
                        <span>File captions</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-blue-600">
                      <span>Click to send media message</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>

                  {/* Interactive Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'text',
                        message: 'Interactive message with buttons:\n\n1. ✅ Confirm\n2. ❌ Cancel\n3. 📞 Call Us'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl hover:border-purple-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center">
                        <BarChart3 size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Interactive Messages</h3>
                        <p className="text-sm text-gray-600">Buttons, polls, actions</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-purple-500" />
                        <span>Interactive buttons</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-purple-500" />
                        <span>Poll creation</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-purple-500" />
                        <span>Quick responses</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-purple-600">
                      <span>Click to create interactive message</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>

                  {/* Location Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'location'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-orange-50 to-orange-100 border border-orange-200 rounded-xl hover:border-orange-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center">
                        <MapPin size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Location Messages</h3>
                        <p className="text-sm text-gray-600">Share GPS coordinates</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-orange-500" />
                        <span>GPS coordinates</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-orange-500" />
                        <span>Location names</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-orange-500" />
                        <span>Address details</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-orange-600">
                      <span>Click to send location</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>

                  {/* Contact Messages */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'contact'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-red-50 to-red-100 border border-red-200 rounded-xl hover:border-red-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-red-500 rounded-xl flex items-center justify-center">
                        <User size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Contact Messages</h3>
                        <p className="text-sm text-gray-600">Share contact information</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-red-500" />
                        <span>Phone numbers</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-red-500" />
                        <span>Contact names</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-red-500" />
                        <span>Company details</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-red-600">
                      <span>Click to share contact</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>

                  {/* Advanced Features */}
                  <button
                    onClick={() => {
                      setQuickMessageData(prev => ({
                        ...prev,
                        type: 'document'
                      }));
                      setShowQuickMessage(true);
                    }}
                    className="group p-6 bg-gradient-to-br from-indigo-50 to-indigo-100 border border-indigo-200 rounded-xl hover:border-indigo-300 hover:shadow-lg transition-all duration-300 text-left w-full"
                  >
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-indigo-500 rounded-xl flex items-center justify-center">
                        <Zap size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">Advanced Features</h3>
                        <p className="text-sm text-gray-600">Powerful messaging tools</p>
                      </div>
                    </div>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-indigo-500" />
                        <span>Quoted replies</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-indigo-500" />
                        <span>File uploads</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle size={14} className="text-indigo-500" />
                        <span>Message scheduling</span>
                      </div>
                    </div>
                    <div className="mt-4 flex items-center gap-2 text-xs text-indigo-600">
                      <span>Click for advanced features</span>
                      <ChevronRight size={12} />
                    </div>
                  </button>
                </div>
              </GlassCard>

              {/* Quick Message Templates */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Quick Message Templates</h2>
                  <button
                    onClick={() => setShowTemplateManager(true)}
                    className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                  >
                    Manage Templates
                    <ChevronRight size={14} />
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[
                    { name: 'Welcome Message', content: 'Welcome! Thank you for contacting us. How can we help you today?', icon: Smile, color: 'green' },
                    { name: 'Support Response', content: 'Thank you for your inquiry. Our support team will get back to you within 24 hours.', icon: Bell, color: 'blue' },
                    { name: 'Order Confirmation', content: 'Your order has been confirmed! Order #{{order_id}}. We\'ll notify you when it ships.', icon: CheckCircle, color: 'purple' },
                    { name: 'Appointment Reminder', content: 'Reminder: You have an appointment tomorrow at {{time}}. Please confirm your attendance.', icon: Calendar, color: 'orange' },
                    { name: 'Promotional Offer', content: '🎉 Special offer! Get 20% off on your next purchase. Use code: SAVE20', icon: Star, color: 'red' },
                    { name: 'Emergency Alert', content: '🚨 Important: System maintenance scheduled for tonight at 2 AM. Service may be temporarily unavailable.', icon: AlertTriangle, color: 'indigo' }
                  ].map((template, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setQuickMessageData(prev => ({
                          ...prev,
                          message: template.content
                        }));
                        setShowQuickMessage(true);
                      }}
                      className="group p-4 bg-white border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-md transition-all duration-300 text-left"
                    >
                      <div className="flex items-center gap-3 mb-2">
                        <div className={`w-8 h-8 ${getTemplateColorClasses(template.color)} rounded-lg flex items-center justify-center`}>
                          <template.icon size={16} className="text-white" />
                        </div>
                        <h3 className="font-medium text-gray-900">{template.name}</h3>
                      </div>
                      <p className="text-sm text-gray-600 line-clamp-2">{template.content}</p>
                      <div className="mt-2 flex items-center gap-2 text-xs text-gray-500">
                        <span>Click to use</span>
                        <ChevronRight size={12} />
                      </div>
                    </button>
                  ))}
                </div>
              </GlassCard>

              {/* Quick Actions */}
              <GlassCard className="p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Quick Actions</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Send Quick Message */}
                  <div className="p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center">
                        <Send size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Send Quick Message</h3>
                        <p className="text-sm text-gray-600">Send a single message to any recipient</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setShowQuickMessage(true)}
                      className="w-full py-3 px-4 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium"
                    >
                      Send Message
                    </button>
                  </div>

                  {/* Advanced Testing */}
                  <div className="p-6 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
                        <Zap size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Advanced Testing</h3>
                        <p className="text-sm text-gray-600">Test all message types and features</p>
                      </div>
                    </div>
                    <button
                      onClick={() => {
                        setQuickMessageData(prev => ({
                          ...prev,
                          type: 'text',
                          message: 'Advanced testing message with multiple features:\n\n📱 Device: Test Device\n📊 Status: Connected\n🔧 Features: All enabled\n\nThis is a comprehensive test message.'
                        }));
                        setShowQuickMessage(true);
                      }}
                      className="w-full py-3 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                    >
                      Open Test Panel
                    </button>
                  </div>
                </div>
              </GlassCard>
            </div>
          )}

          {activeSection === 'templates' && (
            <div className="space-y-6">
              {/* Templates Overview */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <GlassCard className="p-6 bg-gradient-to-br from-purple-500 to-purple-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Total Templates</p>
                      <p className="text-3xl font-bold">{filteredTemplates.length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <FileText size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-green-500 to-green-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">Active Templates</p>
                      <p className="text-3xl font-bold">{filteredTemplates.filter(t => t.is_active).length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <CheckCircle size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-blue-500 to-blue-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Categories</p>
                      <p className="text-3xl font-bold">{new Set(filteredTemplates.map(t => t.category)).size}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Database size={24} />
                    </div>
                  </div>
                </GlassCard>
              </div>

              {/* Template Management */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Message Templates</h2>
                  <button
                    onClick={openAddTemplate}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium flex items-center gap-2"
                  >
                    <Plus size={16} />
                    Create Template
                  </button>
                </div>

                {/* Template Search and Filters */}
                <div className="mb-6 flex flex-col sm:flex-row gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                      <input
                        type="text"
                        placeholder="Search templates..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                      />
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <select
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                    >
                      <option value="">All Categories</option>
                      <option value="general">General</option>
                      <option value="pos">POS/Orders</option>
                      <option value="customer">Customer Service</option>
                      <option value="support">Support</option>
                      <option value="marketing">Marketing</option>
                      <option value="appointment">Appointments</option>
                      <option value="reminder">Reminders</option>
                      <option value="promotional">Promotional</option>
                    </select>
                    <button
                      onClick={() => setSearchTerm('')}
                      className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
                    >
                      Clear
                    </button>
                  </div>
                </div>

                {filteredTemplates.length === 0 ? (
                  <div className="text-center py-12">
                    <FileText size={48} className="text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {searchTerm ? 'No templates found' : 'No templates yet'}
                    </h3>
                    <p className="text-gray-600 mb-6">
                      {searchTerm ? 'Try adjusting your search terms' : 'Create message templates for quick access'}
                    </p>
                    {!searchTerm && (
                      <button
                        onClick={openAddTemplate}
                        className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium flex items-center gap-2 mx-auto"
                      >
                        <Plus size={16} />
                        Create Template
                      </button>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {filteredTemplates.slice(0, 6).map((template) => (
                      <div key={template.id} className="p-4 bg-white border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-md transition-all duration-300">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${template.is_active ? 'bg-green-500' : 'bg-gray-400'}`} />
                            <span className="text-xs font-medium text-gray-500 uppercase">{template.category}</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <button
                              onClick={() => handleToggleTemplateStatus(template.id, template.is_active)}
                              className={`p-1 rounded ${template.is_active ? 'text-green-600 hover:text-green-700' : 'text-gray-400 hover:text-gray-600'}`}
                              title={template.is_active ? 'Deactivate' : 'Activate'}
                            >
                              {template.is_active ? <CheckCircle size={14} /> : <XCircle size={14} />}
                            </button>
                            <button
                              onClick={() => openEditTemplate(template)}
                              className="p-1 text-blue-600 hover:text-blue-700"
                              title="Edit"
                            >
                              <Edit size={14} />
                            </button>
                            <button
                              onClick={() => handleDeleteTemplate(template.id)}
                              className="p-1 text-red-600 hover:text-red-700"
                              title="Delete"
                            >
                              <Trash2 size={14} />
                            </button>
                          </div>
                        </div>
                        <h3 className="font-semibold text-gray-900 mb-2">{template.name}</h3>
                        <p className="text-sm text-gray-600 line-clamp-3 mb-3">{template.content}</p>
                        <div className="flex items-center justify-between">
                          <button
                            onClick={() => {
                              setQuickMessageData(prev => ({
                                ...prev,
                                message: template.content
                              }));
                              setShowQuickMessage(true);
                            }}
                            className="text-green-600 hover:text-green-700 text-sm font-medium"
                          >
                            Use Template
                          </button>
                          <button
                            onClick={() => openEditTemplate(template)}
                            className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                          >
                            Edit
                          </button>
                        </div>
                      </div>
                    ))}
                    </div>
                    
                    {filteredTemplates.length > 6 && (
                      <div className="text-center pt-4 border-t border-gray-200">
                        <button
                          onClick={() => setShowTemplateManager(true)}
                          className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1 mx-auto"
                        >
                          View All Templates ({filteredTemplates.length})
                          <ChevronRight size={14} />
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </GlassCard>
            </div>
          )}

          {activeSection === 'bulk' && (
            <div className="space-y-6">
              {/* Campaign Overview */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <GlassCard className="p-6 bg-gradient-to-br from-blue-500 to-blue-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Total Campaigns</p>
                      <p className="text-3xl font-bold">{filteredCampaigns.length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Target size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-green-500 to-green-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">Active Campaigns</p>
                      <p className="text-3xl font-bold">{filteredCampaigns.filter(c => c.status === 'sending').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Play size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-purple-500 to-purple-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Completed</p>
                      <p className="text-3xl font-bold">{filteredCampaigns.filter(c => c.status === 'completed').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <CheckCircle size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-orange-500 to-orange-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-orange-100 text-sm">Draft Campaigns</p>
                      <p className="text-3xl font-bold">{filteredCampaigns.filter(c => c.status === 'draft').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <FileText size={24} />
                    </div>
                  </div>
                </GlassCard>
              </div>

              {/* Campaign Management */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Campaign Management</h2>
                  <div className="flex items-center gap-3">
                    <button
                      onClick={() => handleNavigateToGreenApi('campaigns')}
                      className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                    >
                      View All
                      <ChevronRight size={14} />
                    </button>
                    <button
                      onClick={() => setShowBulkCreator(true)}
                      className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium flex items-center gap-2"
                    >
                      <Plus size={16} />
                      New Campaign
                    </button>
                  </div>
                </div>

                {filteredCampaigns.length === 0 ? (
                  <div className="text-center py-12">
                    <Target size={48} className="text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {searchTerm ? 'No campaigns found' : 'No campaigns yet'}
                    </h3>
                    <p className="text-gray-600 mb-6">
                      {searchTerm ? 'Try adjusting your search terms' : 'Create your first bulk messaging campaign'}
                    </p>
                    {!searchTerm && (
                      <button
                        onClick={() => setShowBulkCreator(true)}
                        className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium flex items-center gap-2 mx-auto"
                      >
                        <Plus size={16} />
                        Create Campaign
                      </button>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {filteredCampaigns.slice(0, 5).map((campaign) => (
                      <div key={campaign.id} className="p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <div className={`w-3 h-3 rounded-full ${
                              campaign.status === 'completed' ? 'bg-green-500' :
                              campaign.status === 'sending' ? 'bg-blue-500' :
                              campaign.status === 'failed' ? 'bg-red-500' :
                              campaign.status === 'paused' ? 'bg-orange-500' :
                              'bg-gray-400'
                            }`} />
                            <h3 className="font-semibold text-gray-900">{campaign.name}</h3>
                          </div>
                          <div className="flex items-center gap-2">
                            <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getCampaignStatusColor(campaign.status)}`}>
                              {campaign.status}
                            </div>
                            <button className="p-1 text-gray-400 hover:text-gray-600">
                              <MoreVertical size={16} />
                            </button>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <p className="text-gray-500">Recipients</p>
                            <p className="font-medium">{campaign.total_recipients}</p>
                          </div>
                          <div>
                            <p className="text-gray-500">Sent</p>
                            <p className="font-medium text-green-600">{campaign.sent_count}</p>
                          </div>
                          <div>
                            <p className="text-gray-500">Delivered</p>
                            <p className="font-medium text-blue-600">{campaign.delivered_count}</p>
                          </div>
                          <div>
                            <p className="text-gray-500">Failed</p>
                            <p className="font-medium text-red-600">{campaign.failed_count}</p>
                          </div>
                        </div>

                        <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-200">
                          <p className="text-xs text-gray-500">
                            Created: {new Date(campaign.created_at).toLocaleDateString()}
                          </p>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => handleNavigateToGreenApi('campaigns', { selectedCampaign: campaign.id })}
                              className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                            >
                              <Eye size={14} />
                              View Details
                            </button>
                            {campaign.status === 'draft' && (
                              <button
                                onClick={() => handleNavigateToGreenApi('campaigns', { editCampaign: campaign.id })}
                                className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center gap-1"
                              >
                                <Edit size={14} />
                                Edit
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </GlassCard>

              {/* Campaign Templates */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Campaign Templates</h2>
                  <button
                    onClick={() => setShowTemplateManager(true)}
                    className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                  >
                    Manage Templates
                    <ChevronRight size={14} />
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[
                    { 
                      name: 'Welcome Campaign', 
                      description: 'Welcome new customers with a personalized message',
                      icon: Smile,
                      color: 'green',
                      template: {
                        name: 'Welcome Campaign',
                        message: 'Welcome to our service! We\'re excited to have you on board. Here\'s what you can expect from us...',
                        recipients: 'New customers'
                      }
                    },
                    { 
                      name: 'Promotional Campaign', 
                      description: 'Announce special offers and promotions',
                      icon: Star,
                      color: 'orange',
                      template: {
                        name: 'Promotional Campaign',
                        message: '🎉 Special offer just for you! Get 20% off on your next purchase. Use code: SAVE20. Limited time only!',
                        recipients: 'All customers'
                      }
                    },
                    { 
                      name: 'Support Campaign', 
                      description: 'Provide customer support and updates',
                      icon: Bell,
                      color: 'blue',
                      template: {
                        name: 'Support Campaign',
                        message: 'We\'re here to help! If you have any questions or need assistance, please don\'t hesitate to contact us.',
                        recipients: 'Support tickets'
                      }
                    },
                    { 
                      name: 'Reminder Campaign', 
                      description: 'Send appointment and event reminders',
                      icon: Calendar,
                      color: 'purple',
                      template: {
                        name: 'Reminder Campaign',
                        message: 'Reminder: You have an upcoming appointment on {{date}} at {{time}}. Please confirm your attendance.',
                        recipients: 'Appointment holders'
                      }
                    },
                    { 
                      name: 'Newsletter Campaign', 
                      description: 'Share updates and news with subscribers',
                      icon: FileText,
                      color: 'indigo',
                      template: {
                        name: 'Newsletter Campaign',
                        message: '📰 Latest updates from our team: {{news}}. Stay tuned for more exciting announcements!',
                        recipients: 'Newsletter subscribers'
                      }
                    },
                    { 
                      name: 'Emergency Campaign', 
                      description: 'Send urgent notifications and alerts',
                      icon: AlertTriangle,
                      color: 'red',
                      template: {
                        name: 'Emergency Campaign',
                        message: '🚨 Important: {{emergency_message}}. Please take necessary action immediately.',
                        recipients: 'All users'
                      }
                    }
                  ].map((template, index) => (
                    <button
                      key={index}
                      onClick={() => handleTemplateSelection(template)}
                      className="group p-6 bg-white border border-gray-200 rounded-xl hover:border-gray-300 hover:shadow-lg transition-all duration-300 text-left"
                    >
                      <div className="flex items-center gap-4 mb-4">
                        <div className={`w-12 h-12 ${getTemplateColorClasses(template.color)} rounded-xl flex items-center justify-center`}>
                          <template.icon size={24} className="text-white" />
                        </div>
                        <div>
                          <h3 className="font-semibold text-gray-900">{template.name}</h3>
                          <p className="text-sm text-gray-600">{template.description}</p>
                        </div>
                      </div>
                      <div className="space-y-2 text-sm text-gray-600">
                        <div className="flex items-center gap-2">
                          <CheckCircle size={14} className="text-green-500" />
                          <span>Pre-built message</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle size={14} className="text-green-500" />
                          <span>Target audience</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle size={14} className="text-green-500" />
                          <span>Easy customization</span>
                        </div>
                      </div>
                      <div className="mt-4 flex items-center gap-2 text-xs text-gray-500">
                        <span>Click to use template</span>
                        <ChevronRight size={12} />
                      </div>
                    </button>
                  ))}
                </div>
              </GlassCard>

              {/* Quick Actions */}
              <GlassCard className="p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Quick Actions</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Create Campaign */}
                  <div className="p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center">
                        <Plus size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Create Campaign</h3>
                        <p className="text-sm text-gray-600">Start a new bulk messaging campaign</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setShowBulkCreator(true)}
                      className="w-full py-3 px-4 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium"
                    >
                      Create Campaign
                    </button>
                  </div>

                  {/* Manage Campaigns */}
                  <div className="p-6 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
                        <Target size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Manage Campaigns</h3>
                        <p className="text-sm text-gray-600">View and manage all campaigns</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleNavigateToGreenApi('campaigns')}
                      className="w-full py-3 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                    >
                      View All
                    </button>
                  </div>

                  {/* Campaign Analytics */}
                  <div className="p-6 bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center">
                        <BarChart3 size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Campaign Analytics</h3>
                        <p className="text-sm text-gray-600">Monitor performance metrics</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleNavigateToGreenApi('analytics')}
                      className="w-full py-3 px-4 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors font-medium"
                    >
                      View Analytics
                    </button>
                  </div>
                </div>
              </GlassCard>
            </div>
          )}

          {activeSection === 'analytics' && (
            <div className="space-y-6">
              {/* Analytics Overview */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <GlassCard className="p-6 bg-gradient-to-br from-green-500 to-green-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">Delivery Rate</p>
                      <p className="text-3xl font-bold">{metrics.deliveryRate}%</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <TrendingUp size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-blue-500 to-blue-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Messages Sent</p>
                      <p className="text-3xl font-bold">{metrics.totalMessages}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Send size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-purple-500 to-purple-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Active Campaigns</p>
                      <p className="text-3xl font-bold">{campaigns.filter(c => c.status === 'sending').length}</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <Target size={24} />
                    </div>
                  </div>
                </GlassCard>

                <GlassCard className="p-6 bg-gradient-to-br from-orange-500 to-orange-600 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-orange-100 text-sm">Success Rate</p>
                      <p className="text-3xl font-bold">{metrics.successRate}%</p>
                    </div>
                    <div className="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                      <CheckCircle size={24} />
                    </div>
                  </div>
                </GlassCard>
              </div>

              {/* Campaign Performance Metrics */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Campaign Performance</h2>
                  <button
                    onClick={() => handleNavigateToGreenApi('campaigns')}
                    className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                  >
                    View All Campaigns
                    <ChevronRight size={14} />
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-blue-600 text-sm font-medium">Total Campaigns</p>
                        <p className="text-2xl font-bold text-blue-900">{campaignMetrics.totalCampaigns}</p>
                      </div>
                      <Target size={20} className="text-blue-600" />
                    </div>
                  </div>

                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-green-600 text-sm font-medium">Active Campaigns</p>
                        <p className="text-2xl font-bold text-green-900">{campaignMetrics.activeCampaigns}</p>
                      </div>
                      <Activity size={20} className="text-green-600" />
                    </div>
                  </div>

                  <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-purple-600 text-sm font-medium">Total Recipients</p>
                        <p className="text-2xl font-bold text-purple-900">{campaignMetrics.totalRecipients}</p>
                      </div>
                      <Users size={20} className="text-purple-600" />
                    </div>
                  </div>

                  <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-orange-600 text-sm font-medium">Success Rate</p>
                        <p className="text-2xl font-bold text-orange-900">{campaignMetrics.campaignSuccessRate}%</p>
                      </div>
                      <CheckCircle size={20} className="text-orange-600" />
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Delivery Summary</h3>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Sent:</span>
                        <span className="font-medium">{campaignMetrics.totalSent}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Delivered:</span>
                        <span className="font-medium">{campaignMetrics.totalDelivered}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Failed:</span>
                        <span className="font-medium">{campaignMetrics.failedCampaigns}</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Campaign Status</h3>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Completed:</span>
                        <span className="font-medium">{campaignMetrics.completedCampaigns}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Active:</span>
                        <span className="font-medium">{campaignMetrics.activeCampaigns}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Failed:</span>
                        <span className="font-medium">{campaignMetrics.failedCampaigns}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </GlassCard>

              {/* Analytics Actions */}
              <GlassCard className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Analytics & Reports</h2>
                  <button
                    onClick={() => handleNavigateToGreenApi('analytics')}
                    className="text-green-600 hover:text-green-700 text-sm font-medium flex items-center gap-1"
                  >
                    View Detailed Analytics
                    <ChevronRight size={14} />
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {/* Message Analytics */}
                  <div className="p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center">
                        <Send size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Message Analytics</h3>
                        <p className="text-sm text-gray-600">Track message performance</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleNavigateToGreenApi('analytics')}
                      className="w-full py-3 px-4 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-medium"
                    >
                      View Analytics
                    </button>
                  </div>

                  {/* Campaign Analytics */}
                  <div className="p-6 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
                        <Target size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Campaign Analytics</h3>
                        <p className="text-sm text-gray-600">Monitor campaign success</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleNavigateToGreenApi('analytics')}
                      className="w-full py-3 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                    >
                      View Reports
                    </button>
                  </div>

                  {/* Performance Metrics */}
                  <div className="p-6 bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center">
                        <BarChart3 size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">Performance Metrics</h3>
                        <p className="text-sm text-gray-600">Detailed performance data</p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleNavigateToGreenApi('analytics')}
                      className="w-full py-3 px-4 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors font-medium"
                    >
                      View Metrics
                    </button>
                  </div>
                </div>
              </GlassCard>
            </div>
          )}
        </div>

        {/* Quick Message Modal */}
        <Modal
          isOpen={showQuickMessage}
          onClose={() => setShowQuickMessage(false)}
          title="Send Quick Message"
        >
          <div className="space-y-6">
            {/* Error/Success Messages */}
            {messageError && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center gap-2">
                  <XCircle size={16} className="text-red-600" />
                  <p className="text-red-800 text-sm">{messageError}</p>
                </div>
              </div>
            )}

            {messageSuccess && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2">
                  <CheckCircle size={16} className="text-green-600" />
                  <p className="text-green-800 text-sm">{messageSuccess}</p>
                </div>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Select Instance *
              </label>
              <select
                value={quickMessageData.selectedInstance}
                onChange={(e) => setQuickMessageData(prev => ({ ...prev, selectedInstance: e.target.value }))}
                disabled={sendingMessage}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <option value="">Choose a connected instance</option>
                {instances.filter(i => i.status === 'connected').map((instance) => (
                  <option key={instance.id} value={instance.instance_id}>
                    {instance.phone_number} ({instance.instance_id})
                  </option>
                ))}
              </select>
              {instances.filter(i => i.status === 'connected').length === 0 && (
                <p className="text-red-600 text-sm mt-1">No connected instances available. Please connect an instance first.</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Recipient Phone Number *
              </label>
              <input
                type="text"
                value={quickMessageData.recipient}
                onChange={(e) => setQuickMessageData(prev => ({ ...prev, recipient: e.target.value }))}
                disabled={sendingMessage}
                placeholder="+1234567890 (with country code)"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Message Type
              </label>
              <select
                value={quickMessageData.type}
                onChange={(e) => setQuickMessageData(prev => ({ ...prev, type: e.target.value as 'text' | 'image' | 'document' | 'location' | 'contact' }))}
                disabled={sendingMessage}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <option value="text">Text Message</option>
                <option value="image">Image</option>
                <option value="document">Document</option>
                <option value="location">Location</option>
                <option value="contact">Contact</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Message Content *
              </label>
              <textarea
                value={quickMessageData.message}
                onChange={(e) => setQuickMessageData(prev => ({ ...prev, message: e.target.value }))}
                disabled={sendingMessage}
                placeholder="Enter your message..."
                rows={4}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
              />
              <div className="flex justify-between items-center mt-2">
                <p className="text-xs text-gray-500">
                  {quickMessageData.message.length} characters
                </p>
                {quickMessageData.message.length > 1000 && (
                  <p className="text-xs text-orange-600">
                    Long message may be split into multiple parts
                  </p>
                )}
              </div>
            </div>

            {/* Message Preview */}
            {quickMessageData.message && (
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Message Preview:</h4>
                <div className="bg-white border border-gray-200 rounded-lg p-3">
                  <p className="text-sm text-gray-800 whitespace-pre-wrap">{quickMessageData.message}</p>
                </div>
              </div>
            )}

            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
              <button
                onClick={() => setShowQuickMessage(false)}
                disabled={sendingMessage}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Cancel
              </button>
              <button
                onClick={handleQuickMessage}
                disabled={sendingMessage || !quickMessageData.selectedInstance || !quickMessageData.recipient || !quickMessageData.message}
                className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {sendingMessage ? (
                  <>
                    <RefreshCw size={16} className="animate-spin" />
                    Sending...
                  </>
                ) : (
                  <>
                    <Send size={16} />
                    Send Message
                  </>
                )}
              </button>
            </div>
          </div>
        </Modal>

        {/* Bulk Creator Modal */}
        <Modal
          isOpen={showBulkCreator}
          onClose={() => setShowBulkCreator(false)}
          title="Create Bulk Campaign"
        >
          <div className="space-y-6">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-2">Bulk Campaign Creation</h4>
              <p className="text-blue-800 text-sm">
                You'll be redirected to the advanced campaign management interface where you can:
              </p>
              <ul className="text-blue-800 text-sm mt-2 space-y-1">
                <li>• Create detailed campaign settings</li>
                <li>• Select target audience</li>
                <li>• Schedule campaign timing</li>
                <li>• Monitor campaign progress</li>
              </ul>
            </div>

            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
              <button
                onClick={() => setShowBulkCreator(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleBulkCreator}
                className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
              >
                Open Campaign Manager
              </button>
            </div>
          </div>
        </Modal>

        {/* Template Management Modal */}
        <Modal
          isOpen={showTemplateModal}
          onClose={() => setShowTemplateModal(false)}
          title={editingTemplate ? 'Edit Template' : 'Create New Template'}
        >
          <form onSubmit={handleSaveTemplate} className="space-y-6">
            {templateError && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <p className="text-red-800 text-sm">{templateError}</p>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Template Name *
              </label>
              <input
                type="text"
                name="name"
                value={templateForm.name}
                onChange={handleTemplateFormChange}
                placeholder="Enter template name..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Category
              </label>
              <select
                name="category"
                value={templateForm.category}
                onChange={handleTemplateFormChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
              >
                <option value="general">General</option>
                <option value="pos">POS/Orders</option>
                <option value="customer">Customer Service</option>
                <option value="support">Support</option>
                <option value="marketing">Marketing</option>
                <option value="appointment">Appointments</option>
                <option value="reminder">Reminders</option>
                <option value="promotional">Promotional</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Message Content *
              </label>
              <textarea
                name="content"
                value={templateForm.content}
                onChange={handleTemplateFormChange}
                placeholder="Enter your message template... Use {{variable}} for dynamic content"
                rows={6}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                required
              />
              <p className="text-xs text-gray-500 mt-1">
                Use variables like {'{{customerName}}'}, {'{{orderId}}'}, {'{{date}}'} for dynamic content
              </p>
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                name="is_active"
                checked={templateForm.is_active}
                onChange={handleTemplateFormChange}
                className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-700">
                Template is active
              </label>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-2">Template Variables</h4>
              <p className="text-blue-800 text-sm mb-2">
                You can use these variables in your template:
              </p>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{customerName}}'}</code>
                  <p className="text-gray-600">Customer's name</p>
                </div>
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{orderId}}'}</code>
                  <p className="text-gray-600">Order ID</p>
                </div>
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{date}}'}</code>
                  <p className="text-gray-600">Current date</p>
                </div>
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{time}}'}</code>
                  <p className="text-gray-600">Current time</p>
                </div>
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{companyName}}'}</code>
                  <p className="text-gray-600">Your company name</p>
                </div>
                <div className="bg-white p-2 rounded border">
                  <code className="text-green-600">{'{{phoneNumber}}'}</code>
                  <p className="text-gray-600">Customer's phone</p>
                </div>
              </div>
            </div>

            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
              <button
                type="button"
                onClick={() => setShowTemplateModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
              >
                {editingTemplate ? 'Update Template' : 'Create Template'}
              </button>
            </div>
          </form>
        </Modal>

        {/* WhatsApp Template Manager */}
        <WhatsAppTemplateManager
          isOpen={showTemplateManager}
          onClose={() => setShowTemplateManager(false)}
          onTemplateSelect={(template) => {
            setQuickMessageData(prev => ({
              ...prev,
              message: template.template
            }));
            setShowTemplateManager(false);
            setShowQuickMessage(true);
          }}
        />

        {/* Settings Modal */}
        <Modal
          isOpen={showSettings}
          onClose={() => setShowSettings(false)}
          title="WhatsApp Hub Settings"
          size="xl"
        >
          <div className="space-y-6">
            {/* Instance Management Section */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">WhatsApp Instances</h3>
                <button
                  onClick={handleAddInstance}
                  className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 flex items-center gap-2"
                >
                  <Plus size={16} />
                  Add Instance
                </button>
              </div>
              
              {instances.length === 0 ? (
                <div className="text-center py-8 bg-gray-50 rounded-lg">
                  <MessageCircle size={32} className="text-gray-400 mx-auto mb-2" />
                  <p className="text-gray-600 mb-4">No WhatsApp instances configured</p>
                  <button
                    onClick={handleAddInstance}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
                  >
                    Add First Instance
                  </button>
                </div>
              ) : (
                <div className="space-y-3">
                  {instances.map((instance) => (
                    <div key={instance.id} className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className={`w-3 h-3 rounded-full ${
                            instance.status === 'connected' ? 'bg-green-500' :
                            instance.status === 'connecting' ? 'bg-yellow-500' :
                            instance.status === 'error' ? 'bg-red-500' :
                            'bg-gray-400'
                          }`} />
                          <div>
                            <p className="font-medium text-gray-900">{instance.phone_number}</p>
                            <p className="text-sm text-gray-500">ID: {instance.instance_id}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(instance.status)}`}>
                            {instance.status}
                          </div>
                          <div className="flex items-center gap-1">
                            <button
                              onClick={() => checkInstanceState(instance)}
                              className="p-1 text-blue-600 hover:text-blue-700"
                              title="Check Status"
                            >
                              <RefreshCw size={14} />
                            </button>
                            <button
                              onClick={() => generateQrCode(instance)}
                              className="p-1 text-green-600 hover:text-green-700"
                              title="Generate QR Code"
                            >
                              <Eye size={14} />
                            </button>
                            <button
                              onClick={() => handleEditInstance(instance)}
                              className="p-1 text-blue-600 hover:text-blue-700"
                              title="Edit"
                            >
                              <Edit size={14} />
                            </button>
                            <button
                              onClick={() => logoutInstance(instance)}
                              className="p-1 text-orange-600 hover:text-orange-700"
                              title="Logout"
                            >
                              <LogOut size={14} />
                            </button>
                            <button
                              onClick={() => handleDeleteInstance(instance.id)}
                              className="p-1 text-red-600 hover:text-red-700"
                              title="Delete"
                            >
                              <Trash2 size={14} />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* General Settings Section */}
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">General Settings</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Auto Refresh Interval
                  </label>
                  <select 
                    value={settings.autoRefreshInterval}
                    onChange={(e) => setSettings(prev => ({ ...prev, autoRefreshInterval: parseInt(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  >
                    <option value={30}>30 seconds</option>
                    <option value={60}>1 minute</option>
                    <option value={300}>5 minutes</option>
                    <option value={600}>10 minutes</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Default Message Type
                  </label>
                  <select 
                    value={settings.defaultMessageType}
                    onChange={(e) => setSettings(prev => ({ ...prev, defaultMessageType: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  >
                    <option value="text">Text Message</option>
                    <option value="image">Image</option>
                    <option value="document">Document</option>
                    <option value="location">Location</option>
                    <option value="contact">Contact</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Message Delay (ms)
                  </label>
                  <input
                    type="number"
                    min="500"
                    max="10000"
                    value={settings.messageDelay}
                    onChange={(e) => setSettings(prev => ({ ...prev, messageDelay: parseInt(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                    placeholder="1000"
                  />
                  <p className="text-xs text-gray-500 mt-1">Delay between messages (500ms to 10s)</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Max Retries
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="10"
                    value={settings.maxRetries}
                    onChange={(e) => setSettings(prev => ({ ...prev, maxRetries: parseInt(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                    placeholder="3"
                  />
                  <p className="text-xs text-gray-500 mt-1">Maximum retry attempts for failed messages</p>
                </div>
              </div>
            </div>

            {/* Feature Toggles Section */}
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Feature Toggles</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Enable Notifications</h4>
                    <p className="text-sm text-gray-600">Receive notifications for message status updates</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableNotifications}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableNotifications: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Sound Alerts</h4>
                    <p className="text-sm text-gray-600">Play sound notifications for new messages</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableSoundAlerts}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableSoundAlerts: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Enable Webhooks</h4>
                    <p className="text-sm text-gray-600">Allow webhook notifications for incoming messages</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableWebhooks}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableWebhooks: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Enable Analytics</h4>
                    <p className="text-sm text-gray-600">Track message delivery and campaign performance</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableAnalytics}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableAnalytics: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Bulk Messaging</h4>
                    <p className="text-sm text-gray-600">Enable bulk messaging campaigns</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableBulkMessaging}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableBulkMessaging: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Template Management</h4>
                    <p className="text-sm text-gray-600">Enable message template creation and management</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.enableTemplateManagement}
                      onChange={(e) => setSettings(prev => ({ ...prev, enableTemplateManagement: e.target.checked }))}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                  </label>
                </div>
              </div>
            </div>

            {/* Settings Actions */}
            <div className="border-t border-gray-200 pt-6">
              <div className="flex justify-between items-center">
                <button
                  onClick={resetSettings}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Reset to Defaults
                </button>
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowSettings(false)}
                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={saveSettings}
                    disabled={settingsLoading}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 transition-colors"
                  >
                    {settingsLoading ? 'Saving...' : 'Save Settings'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </Modal>

        {/* QR Code Modal */}
        <Modal
          isOpen={showQrModal}
          onClose={() => {
            setShowQrModal(false);
            setSelectedInstanceForQr(null);
            setQrCodeData(null);
          }}
          title="QR Code for WhatsApp Linking"
        >
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Link WhatsApp Device
              </h3>
              <p className="text-gray-600 mb-4">
                Scan this QR code with your WhatsApp mobile app to link your device to the instance.
              </p>
              
              {qrLoading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="flex items-center gap-3">
                    <RefreshCw size={20} className="animate-spin text-blue-600" />
                    <span className="text-gray-600">Generating QR Code...</span>
                  </div>
                </div>
              ) : qrCodeData ? (
                <div className="flex flex-col items-center">
                  <div className="bg-white p-4 rounded-lg border">
                    <img 
                      src={`data:image/png;base64,${qrCodeData}`} 
                      alt="WhatsApp QR Code"
                      className="w-64 h-64"
                    />
                  </div>
                  <p className="text-sm text-gray-500 mt-4">
                    Instance: {selectedInstanceForQr?.phone_number}
                  </p>
                </div>
              ) : (
                <div className="text-center text-red-600">
                  Failed to generate QR code. Please try again.
                </div>
              )}
            </div>

            <div className="flex justify-end gap-3">
              <button
                onClick={() => {
                  setShowQrModal(false);
                  setSelectedInstanceForQr(null);
                  setQrCodeData(null);
                }}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Close
              </button>
              {!qrCodeData && !qrLoading && (
                <button
                  onClick={() => selectedInstanceForQr && generateQrCode(selectedInstanceForQr)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Retry
                </button>
              )}
            </div>
          </div>
        </Modal>

        {/* Add Instance Modal */}
        <Modal
          isOpen={showAddInstance}
          onClose={() => setShowAddInstance(false)}
          title="Add WhatsApp Instance"
          size="lg"
        >
          <AddInstanceForm
            onClose={() => setShowAddInstance(false)}
            onSuccess={(newInstance) => {
              setInstances(prev => [newInstance, ...prev]);
              setShowAddInstance(false);
              toast.success('Instance added successfully');
            }}
          />
        </Modal>

        {/* Edit Instance Modal */}
        <Modal
          isOpen={showEditInstance}
          onClose={() => {
            setShowEditInstance(false);
            setEditingInstance(null);
          }}
          title="Edit WhatsApp Instance"
          size="lg"
        >
          {editingInstance && (
            <EditInstanceForm
              instance={editingInstance}
              onClose={() => {
                setShowEditInstance(false);
                setEditingInstance(null);
              }}
              onSuccess={(updatedInstance) => {
                setInstances(prev => prev.map(i => 
                  i.id === updatedInstance.id ? updatedInstance : i
                ));
                setShowEditInstance(false);
                setEditingInstance(null);
                toast.success('Instance updated successfully');
              }}
            />
          )}
        </Modal>
      </div>
    </div>
  );
};

// Add Instance Form Component
const AddInstanceForm: React.FC<{
  onClose: () => void;
  onSuccess: (instance: WhatsAppInstance) => void;
}> = ({ onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    instanceId: '',
    apiToken: '',
    phoneNumber: '',
    webhookUrl: '',
    webhookSecret: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const { data, error } = await supabase!
        .from('whatsapp_instances')
        .insert({
          instance_id: formData.instanceId,
          api_token: formData.apiToken,
          phone_number: formData.phoneNumber,
          status: 'disconnected',
          webhook_url: formData.webhookUrl || null,
          webhook_secret: formData.webhookSecret || null,
          green_api_host: 'https://api.green-api.com',
          is_green_api: true
        })
        .select()
        .single();

      if (error) throw error;

      onSuccess(data);
    } catch (error: any) {
      console.error('Error adding instance:', error);
      toast.error(`Failed to add instance: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Instance ID *
          </label>
          <input
            type="text"
            required
            value={formData.instanceId}
            onChange={(e) => setFormData(prev => ({ ...prev, instanceId: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter Green API instance ID"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            API Token *
          </label>
          <input
            type="password"
            required
            value={formData.apiToken}
            onChange={(e) => setFormData(prev => ({ ...prev, apiToken: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter API token"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number *
          </label>
          <input
            type="tel"
            required
            value={formData.phoneNumber}
            onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter WhatsApp phone number"
          />
        </div>
      </div>

      <div className="border-t border-gray-200 pt-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Webhook Configuration (Optional)</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Webhook URL
            </label>
            <input
              type="url"
              value={formData.webhookUrl}
              onChange={(e) => setFormData(prev => ({ ...prev, webhookUrl: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
              placeholder="https://mysite.com/webhook/green-api/"
            />
            <p className="text-xs text-gray-500 mt-1">URL for receiving incoming notifications</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Webhook Secret
            </label>
            <input
              type="password"
              value={formData.webhookSecret}
              onChange={(e) => setFormData(prev => ({ ...prev, webhookSecret: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
              placeholder="Secret token for webhook verification"
            />
            <p className="text-xs text-gray-500 mt-1">Token for webhook verification</p>
          </div>
        </div>
      </div>

      <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
        <button
          type="button"
          onClick={onClose}
          className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50"
        >
          {isSubmitting ? 'Adding...' : 'Add Instance'}
        </button>
      </div>
    </form>
  );
};

// Edit Instance Form Component
const EditInstanceForm: React.FC<{
  instance: WhatsAppInstance;
  onClose: () => void;
  onSuccess: (instance: WhatsAppInstance) => void;
}> = ({ instance, onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    instanceId: instance.instance_id,
    apiToken: instance.api_token || '',
    phoneNumber: instance.phone_number,
    webhookUrl: instance.webhook_url || '',
    webhookSecret: instance.webhook_secret || ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const { data, error } = await supabase!
        .from('whatsapp_instances')
        .update({
          instance_id: formData.instanceId,
          api_token: formData.apiToken,
          phone_number: formData.phoneNumber,
          webhook_url: formData.webhookUrl || null,
          webhook_secret: formData.webhookSecret || null,
          updated_at: new Date().toISOString()
        })
        .eq('id', instance.id)
        .select()
        .single();

      if (error) throw error;

      onSuccess(data);
    } catch (error: any) {
      console.error('Error updating instance:', error);
      toast.error(`Failed to update instance: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Instance ID *
          </label>
          <input
            type="text"
            required
            value={formData.instanceId}
            onChange={(e) => setFormData(prev => ({ ...prev, instanceId: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter Green API instance ID"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            API Token *
          </label>
          <input
            type="password"
            required
            value={formData.apiToken}
            onChange={(e) => setFormData(prev => ({ ...prev, apiToken: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter API token"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number *
          </label>
          <input
            type="tel"
            required
            value={formData.phoneNumber}
            onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
            placeholder="Enter WhatsApp phone number"
          />
        </div>
      </div>

      <div className="border-t border-gray-200 pt-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Webhook Configuration (Optional)</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Webhook URL
            </label>
            <input
              type="url"
              value={formData.webhookUrl}
              onChange={(e) => setFormData(prev => ({ ...prev, webhookUrl: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
              placeholder="https://mysite.com/webhook/green-api/"
            />
            <p className="text-xs text-gray-500 mt-1">URL for receiving incoming notifications</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Webhook Secret
            </label>
            <input
              type="password"
              value={formData.webhookSecret}
              onChange={(e) => setFormData(prev => ({ ...prev, webhookSecret: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
              placeholder="Secret token for webhook verification"
            />
            <p className="text-xs text-gray-500 mt-1">Token for webhook verification</p>
          </div>
        </div>
      </div>

      <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
        <button
          type="button"
          onClick={onClose}
          className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50"
        >
          {isSubmitting ? 'Updating...' : 'Update Instance'}
        </button>
      </div>
    </form>
  );
};

export default WhatsAppHubPage;
