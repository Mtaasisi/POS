import React, { useState, useEffect } from 'react';
import { useAuth } from '../../../../context/AuthContext';
import GlassCard from '../../../../features/shared/components/ui/GlassCard';
import GlassButton from '../../../../features/shared/components/ui/GlassButton';
import PriceInput from '../../../../shared/components/ui/PriceInput';
import { X, Save, Package, AlertCircle, QrCode, Download, DollarSign, Image as ImageIcon } from 'lucide-react';
import { useInventoryStore } from '../../stores/useInventoryStore';
import { SparePart } from '../../types/inventory';
import { SimpleImageUpload } from '../../../../components/SimpleImageUpload';
import { toast } from 'react-hot-toast';
import { supabase } from '../../../../lib/supabaseClient';

interface SparePartFormProps {
  sparePart?: SparePart | null;
  onSave: (data: any) => void;
  onCancel: () => void;
}

const SparePartForm: React.FC<SparePartFormProps> = ({ 
  sparePart, 
  onSave, 
  onCancel 
}) => {
  const { currentUser } = useAuth();
  const { categories, suppliers, loadCategories, loadSuppliers } = useInventoryStore();

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    categoryId: '',
    partNumber: '',
    brand: '',
    supplierId: '',
    condition: '',
    description: '',
    costPrice: 0,
    sellingPrice: 0,
    quantity: 0,
    minQuantity: 0,
    location: '',
    compatibleDevices: '',
    images: [] as any[]
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');
  const [tempSparePartId, setTempSparePartId] = useState('temp-sparepart-' + Date.now());
  const [galleryKey, setGalleryKey] = useState(0);
  const [showSummaryModal, setShowSummaryModal] = useState(false);
  const [createdSparePart, setCreatedSparePart] = useState<any>(null);

  // Load categories and suppliers on mount
  useEffect(() => {
    loadCategories();
    loadSuppliers();
  }, [loadCategories, loadSuppliers]);

  // Initialize form with existing data
  useEffect(() => {
    if (sparePart) {
      setFormData({
        name: sparePart.name,
        categoryId: sparePart.categoryId,
        partNumber: sparePart.partNumber,
        costPrice: sparePart.costPrice,
        sellingPrice: sparePart.sellingPrice,
        quantity: sparePart.quantity,
        minQuantity: sparePart.minQuantity,
        location: sparePart.location || '',
        compatibleDevices: sparePart.compatibleDevices || ''
      });
    }
  }, [sparePart]);

  // Validation
  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }

    if (!formData.categoryId) {
      newErrors.categoryId = 'Category is required';
    }

    if (!formData.partNumber.trim()) {
      newErrors.partNumber = 'Part number is required';
    }

    if (formData.costPrice < 0) {
      newErrors.costPrice = 'Cost price cannot be negative';
    }

    if (formData.sellingPrice < 0) {
      newErrors.sellingPrice = 'Selling price cannot be negative';
    }

    if (formData.quantity < 0) {
      newErrors.quantity = 'Quantity cannot be negative';
    }

    if (formData.minQuantity < 0) {
      newErrors.minQuantity = 'Minimum quantity cannot be negative';
    }

    if (formData.sellingPrice < formData.costPrice) {
      newErrors.sellingPrice = 'Selling price should be greater than or equal to cost price';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error('Please fix the errors in the form');
      return;
    }

    setIsSubmitting(true);
    try {
      const sparePartData = {
        name: formData.name,
        partNumber: formData.partNumber,
        categoryId: formData.categoryId,
        brand: formData.brand,
        supplierId: formData.supplierId,
        condition: formData.condition,
        description: formData.description,
        costPrice: formData.costPrice,
        sellingPrice: formData.sellingPrice,
        quantity: formData.quantity,
        minQuantity: formData.minQuantity,
        location: formData.location,
        compatibleDevices: formData.compatibleDevices
      };

      let createdSparePart;

      if (sparePart) {
        await onSave(formData);
        createdSparePart = sparePart;
        toast.success('Spare part updated successfully!');
      } else {
        const response = await onSave(formData);
        createdSparePart = response;
        setCreatedSparePart(response);
        setShowSummaryModal(true);
        toast.success('Spare part created successfully!');
      }
    } catch (error) {
      console.error('Error saving spare part:', error);
      toast.error('Failed to save spare part');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle input changes
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  // Generate QR Code
  const generateQRCode = async (text: string) => {
    try {
      const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(text)}`;
      setQrCodeUrl(qrUrl);
      setShowQRCode(true);
    } catch (error) {
      console.error('Error generating QR code:', error);
      toast.error('Failed to generate QR code');
    }
  };

  // Print QR Code
  const printQRCode = (id: string, name: string) => {
    const qrData = JSON.stringify({
      id: id,
      name: name,
      type: 'spare-part'
    });
    const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;
    
    const printWindow = window.open(qrUrl, '_blank');
    if (printWindow) {
      printWindow.onload = () => {
        printWindow.print();
      };
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <GlassCard className="w-full max-w-4xl max-h-[95vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center gap-3">
              <Package className="w-6 h-6 text-blue-600" />
              <h2 className="text-xl font-semibold text-gray-900">
                {sparePart ? 'Edit Spare Part' : 'Add New Spare Part'}
              </h2>
            </div>
            <button
              onClick={onCancel}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5 text-gray-500" />
            </button>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Basic Information */}
            <div className="border-b border-gray-200 pb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Package size={20} className="text-blue-600" />
                Basic Information
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Name */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Name *
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      className={`w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                        errors.name ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                      }`}
                      placeholder="e.g., iPhone 14 Screen"
                      value={formData.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      autoComplete="off"
                      autoCorrect="off"
                      spellCheck={false}
                    />
                    <Package className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                  </div>
                  {errors.name && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.name}
                    </p>
                  )}
                </div>

                {/* Part Number */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Part Number *
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      className={`w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                        errors.partNumber ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                      }`}
                      placeholder="e.g., IP14-SCR-001"
                      value={formData.partNumber}
                      onChange={(e) => handleInputChange('partNumber', e.target.value)}
                      autoComplete="off"
                      autoCorrect="off"
                      spellCheck={false}
                    />
                    <QrCode className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                    {formData.partNumber && (
                      <button
                        type="button"
                        onClick={() => generateQRCode(formData.partNumber)}
                        className="absolute right-4 top-1/2 -translate-y-1/2 text-blue-600 hover:text-blue-700 p-1 rounded hover:bg-blue-50 transition-colors"
                        title="Generate QR Code"
                      >
                        <QrCode size={16} />
                      </button>
                    )}
                  </div>
                  {errors.partNumber && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.partNumber}
                    </p>
                  )}
                </div>

                {/* Category */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Category *
                  </label>
                  <select
                    className={`w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                      errors.categoryId ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                    }`}
                    value={formData.categoryId}
                    onChange={(e) => handleInputChange('categoryId', e.target.value)}
                  >
                    <option value="">Select Category</option>
                    {categories.map((category) => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                  {errors.categoryId && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.categoryId}
                    </p>
                  )}
                </div>

                {/* Brand */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Brand
                  </label>
                  <input
                    type="text"
                    className="w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 transition-colors"
                    placeholder="e.g., Apple, Samsung"
                    value={formData.brand}
                    onChange={(e) => handleInputChange('brand', e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Pricing Information */}
            <div className="border-b border-gray-200 pb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <DollarSign size={20} className="text-green-600" />
                Pricing Information
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Cost Price */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Cost Price *
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      className={`w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                        errors.costPrice ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                      }`}
                      placeholder="0"
                      value={formData.costPrice}
                      onChange={(e) => handleInputChange('costPrice', parseFloat(e.target.value) || 0)}
                      min="0"
                      step="0.01"
                    />
                    <DollarSign className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                  </div>
                  {errors.costPrice && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.costPrice}
                    </p>
                  )}
                </div>

                {/* Selling Price */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Selling Price *
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      className={`w-full py-3 pl-12 pr-4 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                        errors.sellingPrice ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                      }`}
                      placeholder="0"
                      value={formData.sellingPrice}
                      onChange={(e) => handleInputChange('sellingPrice', parseFloat(e.target.value) || 0)}
                      min="0"
                      step="0.01"
                    />
                    <DollarSign className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={18} />
                  </div>
                  {errors.sellingPrice && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.sellingPrice}
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* Inventory Management */}
            <div className="border-b border-gray-200 pb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
                Inventory Management
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Current Quantity */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Current Quantity *
                  </label>
                  <input
                    type="number"
                    className={`w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                      errors.quantity ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                    }`}
                    placeholder="0"
                    value={formData.quantity}
                    onChange={(e) => handleInputChange('quantity', parseInt(e.target.value) || 0)}
                    min="0"
                  />
                  {errors.quantity && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.quantity}
                    </p>
                  )}
                </div>

                {/* Minimum Quantity */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Min Quantity *
                  </label>
                  <input
                    type="number"
                    className={`w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 rounded-lg focus:outline-none transition-colors ${
                      errors.minQuantity ? 'border-red-500 focus:border-red-600' : 'border-gray-300 focus:border-blue-500'
                    }`}
                    placeholder="0"
                    value={formData.minQuantity}
                    onChange={(e) => handleInputChange('minQuantity', parseInt(e.target.value) || 0)}
                    min="0"
                  />
                  {errors.minQuantity && (
                    <p className="mt-1 text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.minQuantity}
                    </p>
                  )}
                </div>

                {/* Location */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Location
                  </label>
                  <input
                    type="text"
                    className="w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 transition-colors"
                    placeholder="e.g., Shelf A1, Drawer 3"
                    value={formData.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Additional Information */}
            <div className="border-b border-gray-200 pb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <svg className="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Additional Information
              </h3>
              
              <div className="space-y-4">
                {/* Description */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Description
                  </label>
                  <textarea
                    className="w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 transition-colors"
                    placeholder="Describe the spare part, its specifications, and any important details..."
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows={3}
                  />
                </div>

                {/* Compatible Devices */}
                <div>
                  <label className="block mb-2 font-medium text-gray-700">
                    Compatible Devices
                  </label>
                  <textarea
                    className="w-full py-3 px-3 bg-white/30 backdrop-blur-md border-2 border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 transition-colors"
                    placeholder="List compatible device models (e.g., iPhone 14, iPhone 14 Plus, iPhone 14 Pro)"
                    value={formData.compatibleDevices}
                    onChange={(e) => handleInputChange('compatibleDevices', e.target.value)}
                    rows={2}
                  />
                </div>
              </div>
            </div>

            {/* Product Images Section */}
            <div className="space-y-4">
              <div className="flex items-center gap-3 pb-3 border-b border-gray-200">
                <div className="w-6 h-6 bg-pink-100 rounded-lg flex items-center justify-center">
                  <ImageIcon className="w-3 h-3 text-pink-600" aria-hidden="true" />
                </div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900">Spare Part Images</h3>
                </div>
              </div>
            
              <div className="space-y-4">
                <SimpleImageUpload
                  productId={tempSparePartId}
                  userId={currentUser?.id || ''}
                  onImagesChange={(images) => {
                    const formImages = images.map(img => ({
                      id: img.id,
                      image_url: img.url,
                      thumbnail_url: img.thumbnailUrl || img.url,
                      file_name: img.fileName,
                      file_size: img.fileSize,
                      is_primary: img.isPrimary,
                      uploaded_by: img.uploadedAt,
                      created_at: img.uploadedAt
                    }));
                    setFormData(prev => ({ ...prev, images: formImages }));
                    
                    // Show success message for image upload
                    if (images.length > 0) {
                      toast.success(`${images.length} image${images.length > 1 ? 's' : ''} uploaded successfully!`);
                    }
                  }}
                  maxFiles={5}
                />
              </div>
            </div>

            {/* QR Code Preview */}
            {showQRCode && qrCodeUrl && (
              <div className="border border-gray-200 rounded-lg p-6 bg-gray-50">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    <QrCode className="w-5 h-5 text-blue-600" />
                    QR Code Preview
                  </h3>
                  <GlassButton
                    type="button"
                    onClick={() => setShowQRCode(false)}
                    variant="outline"
                    size="sm"
                  >
                    <X className="w-4 h-4" />
                  </GlassButton>
                </div>
                <div className="flex items-center justify-center">
                  <div className="text-center">
                    <img 
                      src={qrCodeUrl} 
                      alt="QR Code" 
                      className="border border-gray-300 rounded-lg shadow-sm"
                    />
                    <p className="mt-2 text-sm text-gray-600">
                      Part Number: {formData.partNumber}
                    </p>
                    <GlassButton
                      type="button"
                      onClick={() => generateQRCode(formData.partNumber)}
                      className="mt-3 flex items-center gap-2"
                    >
                      <Download className="w-4 h-4" />
                      Download QR Code
                    </GlassButton>
                  </div>
                </div>
              </div>
            )}

            {/* Actions */}
            <div className="flex justify-end gap-2 pt-6 border-t border-gray-200">
              <button
                type="button"
                className="px-6 py-3 rounded-lg bg-gray-200 text-gray-800 font-semibold hover:bg-gray-300 transition"
                onClick={onCancel}
                disabled={isSubmitting}
              >
                Cancel
              </button>
              <button
                type="submit"
                className={`px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${
                  isSubmitting 
                    ? 'bg-gray-400 text-gray-600 cursor-not-allowed' 
                    : 'bg-green-600 text-white hover:bg-green-700 shadow-lg'
                }`}
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Saving...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <Save className="w-4 h-4" />
                    {sparePart ? 'Update' : 'Create'}
                  </div>
                )}
              </button>
            </div>
          </form>
        </div>
      </GlassCard>

      {/* Summary Modal */}
      {showSummaryModal && createdSparePart && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          role="dialog"
          aria-modal="true"
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
        >
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 id="modal-title" className="text-2xl font-bold text-gray-900">
                  Spare Part Created Successfully!
                </h2>
                <button
                  onClick={() => setShowSummaryModal(false)}
                  className="text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                  aria-label="Close modal"
                >
                  <X size={24} />
                </button>
              </div>

              <div id="modal-description" className="space-y-6">
                {/* Spare Part Summary */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-lg mb-3">Spare Part Summary</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <span className="text-sm text-gray-600">Name:</span>
                      <p className="font-medium">{createdSparePart.name}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Part Number:</span>
                      <p className="font-medium">{createdSparePart.partNumber}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Category:</span>
                      <p className="font-medium">{createdSparePart.categoryId}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Cost Price:</span>
                      <p className="font-medium">TZS {createdSparePart.costPrice}</p>
                    </div>
                  </div>
                </div>

                {/* Image Upload Summary */}
                {formData.images && formData.images.length > 0 && (
                  <div className="bg-green-50 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <h3 className="font-semibold text-lg text-green-900">Images Uploaded Successfully</h3>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <span className="text-sm text-green-600">Images Uploaded:</span>
                        <p className="font-medium text-green-900">{formData.images.length} image{formData.images.length > 1 ? 's' : ''}</p>
                      </div>
                      <div>
                        <span className="text-sm text-green-600">Primary Image:</span>
                        <p className="font-medium text-green-900">
                          {formData.images.find(img => img.is_primary)?.file_name || formData.images[0]?.file_name || 'None'}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                {/* QR Code Section */}
                <div className="bg-blue-50 rounded-lg p-4">
                  <h3 className="font-semibold text-lg mb-3 text-blue-900">QR Code</h3>
                  <p className="text-sm text-blue-700 mb-4">
                    Print QR codes for easy spare part identification and inventory management.
                  </p>
                  
                  <div className="flex flex-wrap gap-3">
                    <button
                      onClick={() => printQRCode(createdSparePart.id, createdSparePart.name)}
                      className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                      aria-label="Print QR code for spare part"
                    >
                      <QrCode size={20} aria-hidden="true" />
                      Print QR Code
                    </button>
                    
                    <button
                      onClick={() => {
                        const qrData = JSON.stringify({
                          id: createdSparePart.id,
                          name: createdSparePart.name,
                          type: 'spare-part'
                        });
                        const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;
                        window.open(qrUrl, '_blank');
                      }}
                      className="flex items-center gap-2 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
                      aria-label="View QR code in new tab"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                      View QR Code
                    </button>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t">
                  <button
                    onClick={() => {
                      setShowSummaryModal(false);
                      // Navigate to spare parts page
                      window.location.href = '/lats/spare-parts';
                    }}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium transition-colors"
                    aria-label="Navigate to spare parts page"
                  >
                    View in Spare Parts
                  </button>
                  <button
                    onClick={() => {
                      setShowSummaryModal(false);
                      // Reset form and create another spare part
                      window.location.reload();
                    }}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-3 rounded-lg font-medium transition-colors"
                    aria-label="Create another spare part"
                  >
                    Create Another Spare Part
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SparePartForm;
