import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useAuth } from '../../../context/AuthContext';
import { supabase } from '../../../lib/supabaseClient';
import { whatsappService } from '../../../services/whatsappService';
import GlassCard from '../../../features/shared/components/ui/GlassCard';
import WhatsAppConfigModal from '../components/WhatsAppConfigModal';
import RateLimitMonitor from '../components/RateLimitMonitor';
import { MessageCircle, Send, Search, MoreVertical, Check, CheckCheck, Users, Settings, Bell, Shield, HelpCircle, Info, Phone, Mail, BarChart3, Megaphone, Clock, Target, TrendingUp, FileText, Calendar, Zap, UserCheck, Archive, User as UserIcon, CheckCircle, Smile, Paperclip, Mic, Image, File, Video, Music, MapPin, UserPlus, Tag, Filter, Download, Upload, RefreshCw, AlertTriangle } from 'lucide-react';

interface Chat {
  id: string;
  customer_id: string;
  customer_name: string;
  last_message: string;
  last_message_time: string;
  unread_count: number;
  is_online: boolean;
  profile_image?: string;
  phone?: string;
  whatsapp?: string;
  status?: string;
  tags?: string[];
  assigned_to?: string;
}

interface Message {
  id: string;
  chat_id: string;
  content: string;
  sent_at: string;
  direction: 'inbound' | 'outbound';
  status: 'sent' | 'delivered' | 'read' | 'failed';
  message_type: 'text' | 'image' | 'document' | 'audio' | 'video' | 'location' | 'contact';
  media_url?: string;
  media_name?: string;
  media_size?: number;
  media_mime_type?: string;
  error_message?: string;
}

interface ScheduledMessage {
  id: string;
  chat_id: string;
  content: string;
  message_type: string;
  media_url?: string;
  scheduled_for: string;
  status: 'pending' | 'sent' | 'failed' | 'cancelled';
  sent_at?: string;
  error_message?: string;
  created_by: string;
  created_at: string;
}

const WhatsAppWebPage: React.FC = () => {
  const { currentUser } = useAuth();
  const [chats, setChats] = useState<Chat[]>([]);
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState<'chats' | 'contacts' | 'more'>('chats');
  const [contacts, setContacts] = useState<any[]>([]);
  
  // Advanced features state
  const [mainTab, setMainTab] = useState<'chat' | 'bulk' | 'analytics' | 'campaigns' | 'autoresponder' | 'assignment' | 'scheduled'>('chat');
  const [showFileUpload, setShowFileUpload] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [filePreview, setFilePreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [isRecordingVoice, setIsRecordingVoice] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  
  // Bulk messaging states
  const [selectedContacts, setSelectedContacts] = useState<any[]>([]);
  const [bulkMessage, setBulkMessage] = useState('');
  const [isSendingBulk, setIsSendingBulk] = useState(false);
  const [bulkProgress, setBulkProgress] = useState({ sent: 0, total: 0, failed: 0 });
  
  // Analytics states
  const [analyticsData, setAnalyticsData] = useState({
    totalMessages: 0,
    messagesThisWeek: 0,
    responseRate: 0,
    activeChats: 0,
    avgResponseTime: '0 min'
  });
  
  // Campaign states
  const [campaigns, setCampaigns] = useState<any[]>([]);
  const [showCreateCampaign, setShowCreateCampaign] = useState(false);
  const [newCampaign, setNewCampaign] = useState({
    name: '',
    message: '',
    scheduled_date: '',
    target_audience: 'all'
  });
  
  // Autoresponder states
  const [autoresponders, setAutoresponders] = useState<any[]>([]);
  const [showCreateAutoresponder, setShowCreateAutoresponder] = useState(false);
  const [newAutoresponder, setNewAutoresponder] = useState({
    keyword: '',
    response: '',
    is_active: true,
    match_type: 'exact'
  });

  // Assignment/Tagging states
  const [users, setUsers] = useState<any[]>([]);
  const [tagInput, setTagInput] = useState('');
  const [filterTag, setFilterTag] = useState('');
  const [filterUser, setFilterUser] = useState('');

  // Scheduled Messages states
  const [scheduledMessages, setScheduledMessages] = useState<ScheduledMessage[]>([]);
  const [showCreateScheduled, setShowCreateScheduled] = useState(false);
  const [newScheduled, setNewScheduled] = useState({
    chat_id: '',
    content: '',
    type: 'text',
    media_url: '',
    scheduled_for: ''
  });

  // Error and status states
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('disconnected');
  const [databaseError, setDatabaseError] = useState<string | null>(null);
  const [showConfigModal, setShowConfigModal] = useState(false);
  
  // Message auto-scroll ref
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    const scrollToBottom = () => {
      if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
      }
    };
    
    const timeoutId = setTimeout(scrollToBottom, 100);
    return () => clearTimeout(timeoutId);
  }, [messages]);

  // Initialize real-time updates
  useEffect(() => {
    initializeRealtime();
    return () => {
      whatsappService.unsubscribe();
    };
  }, []);

  const initializeRealtime = async () => {
    try {
      await whatsappService.initializeRealtime();
      
      // Subscribe to new messages
      whatsappService.onMessage((message) => {
        if (selectedChat && message.chatId === selectedChat.id) {
          setMessages(prev => [...prev, message]);
        }
        // Update chat list
        fetchChats();
      });

      // Subscribe to status updates
      whatsappService.onStatusUpdate((status) => {
        setMessages(prev => 
          prev.map(msg => 
            msg.id === status.id ? { ...msg, status: status.status } : msg
          )
        );
      });

      setConnectionStatus('connected');
    } catch (error) {
      console.error('Failed to initialize real-time updates:', error);
      setConnectionStatus('disconnected');
    }
  };

  // Refresh function for WhatsApp data
  const refreshWhatsAppData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      setDatabaseError(null);
      
      // Refresh all data in parallel
      const refreshPromises = [
        fetchChats(),
        fetchContacts(),
        fetchAnalyticsData(),
        fetchCampaigns(),
        fetchAutoresponders(),
        fetchUsers(),
        fetchScheduledMessages(),
        checkConnection()
      ];
      
      await Promise.all(refreshPromises);
      
      // If there's a selected chat, refresh its messages too
      if (selectedChat) {
        await fetchMessages(selectedChat.id);
      }
      
      // Show success feedback
      const { toast } = await import('react-hot-toast');
      toast.success('WhatsApp data refreshed successfully!');
      
    } catch (error) {
      console.error('Error refreshing WhatsApp data:', error);
      const { toast } = await import('react-hot-toast');
      toast.error('Failed to refresh WhatsApp data');
    } finally {
      setLoading(false);
    }
  }, [selectedChat]);

  // Auto-refresh functionality
  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);
  const [autoRefreshInterval, setAutoRefreshInterval] = useState(30000); // 30 seconds default
  const [showAutoRefreshSettings, setShowAutoRefreshSettings] = useState(false);
  const autoRefreshRef = useRef<NodeJS.Timeout | null>(null);

  // Start auto-refresh
  const startAutoRefresh = useCallback(() => {
    if (autoRefreshRef.current) {
      clearInterval(autoRefreshRef.current);
    }
    
    if (autoRefreshEnabled) {
      autoRefreshRef.current = setInterval(() => {
        // Only refresh if the page is visible and not loading
        if (document.visibilityState === 'visible' && !loading) {
          // Silent refresh without showing loading state
          fetchChats();
          fetchContacts();
          fetchAnalyticsData();
          fetchCampaigns();
          fetchAutoresponders();
          fetchUsers();
          fetchScheduledMessages();
          
          // Refresh messages if chat is selected
          if (selectedChat) {
            fetchMessages(selectedChat.id);
          }
        }
      }, autoRefreshInterval);
    }
  }, [autoRefreshEnabled, autoRefreshInterval, loading, selectedChat]);

  // Stop auto-refresh
  const stopAutoRefresh = useCallback(() => {
    if (autoRefreshRef.current) {
      clearInterval(autoRefreshRef.current);
      autoRefreshRef.current = null;
    }
  }, []);

  // Handle page visibility changes
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        startAutoRefresh();
      } else {
        stopAutoRefresh();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [startAutoRefresh, stopAutoRefresh]);

  // Start/stop auto-refresh when settings change
  useEffect(() => {
    if (autoRefreshEnabled) {
      startAutoRefresh();
    } else {
      stopAutoRefresh();
    }

    return () => {
      stopAutoRefresh();
    };
  }, [autoRefreshEnabled, autoRefreshInterval, startAutoRefresh, stopAutoRefresh]);

  // Close auto-refresh settings dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.auto-refresh-settings')) {
        setShowAutoRefreshSettings(false);
      }
    };

    if (showAutoRefreshSettings) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showAutoRefreshSettings]);

  // Listen for refresh events
  useEffect(() => {
    const handleRefreshEvent = () => {
      refreshWhatsAppData();
    };

    // Listen for both specific and general refresh events
    window.addEventListener('refresh-whatsapp-data', handleRefreshEvent);
    window.addEventListener('refresh-page-data', handleRefreshEvent);
    
    return () => {
      window.removeEventListener('refresh-whatsapp-data', handleRefreshEvent);
      window.removeEventListener('refresh-page-data', handleRefreshEvent);
    };
  }, [refreshWhatsAppData]);

  useEffect(() => {
    fetchChats();
    fetchContacts();
    fetchAnalyticsData();
    fetchCampaigns();
    fetchAutoresponders();
    fetchUsers();
    fetchScheduledMessages();
    checkConnection();
  }, []);

  // Add connection check caching to prevent rate limiting
  const [lastConnectionCheck, setLastConnectionCheck] = useState(0);
  const CONNECTION_CHECK_COOLDOWN = 120000; // 2 minutes - increased to reduce API calls

  const checkConnection = async () => {
    try {
      // Check if we should skip this connection check due to rate limiting
      const now = Date.now();
      if (now - lastConnectionCheck < CONNECTION_CHECK_COOLDOWN) {
        console.log('⏳ Skipping connection check due to rate limiting cooldown');
        return;
      }

      const settings = await whatsappService['getSettings']();
      if (settings.whatsapp_instance_id && settings.whatsapp_green_api_key) {
        const testResult = await whatsappService.testConnection(
          settings.whatsapp_instance_id, 
          settings.whatsapp_green_api_key
        );
        
        setLastConnectionCheck(now);
        setIsConnected(testResult.success);
        
        if (!testResult.success) {
          if (testResult.error?.includes('Rate limit')) {
            setError('WhatsApp API rate limit exceeded. Please wait before trying again.');
            // Set a longer cooldown for rate limit errors
            setLastConnectionCheck(now - CONNECTION_CHECK_COOLDOWN + 60000); // 1 minute cooldown
          } else {
            setError(`WhatsApp connection failed: ${testResult.error}`);
          }
        } else {
          setError(null); // Clear error if connection is successful
        }
      } else {
        setIsConnected(false);
        setError('WhatsApp credentials not configured. Please set up your Green API credentials.');
      }
    } catch (error) {
      console.error('Connection check failed:', error);
      setIsConnected(false);
      setError('Failed to check WhatsApp connection. Please verify your settings.');
    }
  };

  const handleConfigSaved = () => {
    checkConnection();
    fetchChats();
  };

  const fetchChats = async () => {
    try {
      setLoading(true);
      setError(null);
      setDatabaseError(null);
      
      // Check if WhatsApp tables exist by trying to query them directly
      try {
        const { data: testQuery, error: testError } = await supabase
          .from('whatsapp_chats')
          .select('id')
          .limit(1);
        
        if (testError && testError.code === '42P01') {
          setDatabaseError('WhatsApp database tables not found. Please run the setup script first.');
          setChats([]);
          setLoading(false);
          return;
        }
      } catch (error) {
        setDatabaseError('WhatsApp database tables not found. Please run the setup script first.');
        setChats([]);
        setLoading(false);
        return;
      }

      const { data: customers, error: customersError } = await supabase
        .from('customers')
        .select('id, name, phone, whatsapp, profile_image, created_at')
        .not('whatsapp', 'is', null)
        .not('whatsapp', 'eq', '')
        .order('created_at', { ascending: false });

      if (customersError) throw customersError;

      const { data: existingChats, error: chatsError } = await supabase
        .from('whatsapp_chats')
        .select('*')
        .order('updated_at', { ascending: false });

      if (chatsError) throw chatsError;

      const realChats: Chat[] = (customers || []).map((customer: any) => {
        const existingChat = existingChats?.find(chat => chat.customer_id === customer.id);
        
        return {
          id: existingChat?.id || `temp_${customer.id}`,
          customer_id: customer.id,
          customer_name: customer.name || customer.phone || customer.whatsapp || 'Unknown Customer',
          last_message: existingChat?.last_message || 'Start a conversation',
          last_message_time: existingChat?.updated_at || customer.created_at,
          unread_count: existingChat?.unread_count || 0,
          is_online: Math.random() > 0.7,
          profile_image: customer.profile_image,
          phone: customer.phone,
          whatsapp: customer.whatsapp,
          status: existingChat?.status || 'active',
          tags: existingChat?.tags || [],
          assigned_to: existingChat?.assigned_to
        };
      });

      setChats(realChats);
    } catch (error) {
      console.error('Error fetching chats:', error);
      setError('Failed to load chats. Please try again.');
      setDatabaseError('Database connection error. Please check your setup.');
    } finally {
      setLoading(false);
    }
  };

  const fetchContacts = async () => {
    try {
      const { data, error } = await supabase
        .from('customers')
        .select('id, name, email, phone, whatsapp, profile_image, created_at')
        .order('name');

      if (error) throw error;
      setContacts(data || []);
    } catch (error) {
      console.error('Error fetching contacts:', error);
    }
  };

  const fetchAnalyticsData = async () => {
    try {
      const analytics = await whatsappService.getAnalytics(7); // Last 7 days
      setAnalyticsData({
        totalMessages: analytics.total,
        messagesThisWeek: analytics.total,
        responseRate: analytics.responseRate,
        activeChats: chats.length,
        avgResponseTime: `${Math.round(analytics.avgResponseTime)} min`
      });
    } catch (error) {
      console.error('Error fetching analytics:', error);
    }
  };

  const fetchCampaigns = async () => {
    try {
      const { data, error } = await supabase
        .from('whatsapp_campaigns')
        .select('*')
        .order('created_at', { ascending: false });

      if (error && error.code !== 'PGRST116') throw error;
      setCampaigns(data || []);
    } catch (error) {
      console.error('Error fetching campaigns:', error);
    }
  };

  const fetchAutoresponders = async () => {
    try {
      const { data, error } = await supabase
        .from('whatsapp_autoresponders')
        .select('*')
        .order('created_at', { ascending: false });

      if (error && error.code !== 'PGRST116') throw error;
      setAutoresponders(data || []);
    } catch (error) {
      console.error('Error fetching autoresponders:', error);
    }
  };

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase
        .from('auth_users')
        .select('id, name, role')
        .order('name', { ascending: true });

      if (error) throw error;
      setUsers(data || []);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const fetchScheduledMessages = async () => {
    try {
      const { data, error } = await supabase
        .from('scheduled_whatsapp_messages')
        .select('*')
        .order('scheduled_for', { ascending: true });

      if (error && error.code !== 'PGRST116') throw error;
      setScheduledMessages(data || []);
    } catch (error) {
      console.error('Error fetching scheduled messages:', error);
    }
  };

  const fetchMessages = async (chatId: string) => {
    try {
      if (chatId.startsWith('temp_')) {
        setMessages([]);
        return;
      }
        
      const { data: messagesData, error } = await supabase
        .from('whatsapp_messages')
        .select('*')
        .eq('chat_id', chatId)
        .order('sent_at', { ascending: true });

      if (error) {
        console.error('Error fetching messages:', error);
        setMessages([]);
        return;
      }

      const formattedMessages: Message[] = (messagesData || []).map((msg: any) => ({
        id: msg.id,
        chat_id: msg.chat_id,
        content: msg.content || '',
        sent_at: msg.sent_at || msg.created_at || new Date().toISOString(),
        direction: msg.direction || 'outbound',
        status: msg.status || 'sent',
        message_type: msg.message_type || 'text',
        media_url: msg.media_url,
        media_name: msg.media_name,
        media_size: msg.media_size,
        media_mime_type: msg.media_mime_type,
        error_message: msg.error_message
      }));

      setMessages(formattedMessages);
      
      // Mark messages as read
      if (selectedChat) {
        try {
          await whatsappService.markMessagesAsRead(chatId);
        } catch (error) {
          console.error('Failed to mark messages as read:', error);
        }
      }
    } catch (error) {
      console.error('Error fetching messages:', error);
      setMessages([]);
    }
  };

  useEffect(() => {
    if (selectedChat) {
      fetchMessages(selectedChat.id);
    }
  }, [selectedChat]);

  const formatTime = (sent_at: string) => {
    try {
      const date = new Date(sent_at);
      if (isNaN(date.getTime())) {
        return 'Invalid time';
      }
      
      const now = new Date();
      const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

      if (diffInHours < 24) {
        return date.toLocaleTimeString('en-US', { 
          hour: 'numeric', 
          minute: '2-digit',
          hour12: true 
        });
      } else if (diffInHours < 48) {
        return 'Yesterday';
      } else {
        return date.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric' 
        });
      }
    } catch (error) {
      return 'Invalid time';
    }
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedChat) return;

    const messageContent = newMessage.trim();
    const timestamp = new Date().toISOString();
    
    setNewMessage('');

    const optimisticMessage: Message = {
      id: `temp_${Date.now()}`,
      chat_id: selectedChat.id,
      content: messageContent,
      sent_at: timestamp,
      direction: 'outbound',
      status: 'sent',
      message_type: 'text'
    };
      
    setMessages(prev => [...prev, optimisticMessage]);
      
    setChats(prev => 
      prev.map(chat => 
        chat.id === selectedChat.id 
          ? { ...chat, last_message: messageContent, last_message_time: timestamp }
          : chat
      )
    );

    try {
      let chatId = selectedChat.id;
      
      if (chatId.startsWith('temp_')) {
        try {
          const { data: newChat, error: chatError } = await supabase
            .from('whatsapp_chats')
            .insert({
              customer_id: selectedChat.customer_id,
              phone_number: selectedChat.whatsapp || selectedChat.phone || selectedChat.customer_id,
              customer_name: selectedChat.customer_name,
              last_message: messageContent,
              unread_count: 0,
              status: 'active'
            })
            .select()
            .single();

          if (chatError) throw chatError;
          chatId = newChat.id;
          setSelectedChat(prev => prev ? { ...prev, id: chatId } : null);
        } catch (error) {
          console.error('Failed to create chat:', error);
          // Continue with temp chat ID
        }
      }

      // Send via WhatsApp service
      try {
        const result = await whatsappService.sendMessage(chatId, messageContent);
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to send message');
        }

        // Update optimistic message with real ID
        setMessages(prev => 
          prev.map(msg => 
            msg.id === optimisticMessage.id 
              ? { ...msg, id: result.messageId || msg.id }
              : msg
          )
        );
      } catch (error) {
        console.error('WhatsApp service error:', error);
        // Keep optimistic message but mark as failed
        setMessages(prev => 
          prev.map(msg => 
            msg.id === optimisticMessage.id 
              ? { ...msg, status: 'failed', error_message: 'Failed to send via WhatsApp' }
              : msg
          )
        );
      }

    } catch (error) {
      console.error('Error sending message:', error);
      setError('Failed to send message. Please try again.');
      
      // Remove optimistic message on error
      setMessages(prev => prev.filter(msg => msg.id !== optimisticMessage.id));
    }
  };

  const handleFileUpload = async (file: File) => {
    try {
      setIsUploading(true);
      setError(null);
      
      const result = await whatsappService.uploadMedia(file);
      
      if (!result.success) {
        throw new Error(result.error || 'Upload failed');
      }
      
      // Send media message
      if (selectedChat && result.url) {
        const messageContent = `Media: ${file.name}`;
        await whatsappService.sendMessage(selectedChat.id, messageContent, 'media', result.url);
      }
      
      setSelectedFile(null);
      setFilePreview(null);
      setShowFileUpload(false);
    } catch (error) {
      console.error('Error uploading file:', error);
      setError('Failed to upload file. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  const handleBulkSend = async () => {
    if (!bulkMessage.trim() || selectedContacts.length === 0) return;
    
    setIsSendingBulk(true);
    setBulkProgress({ sent: 0, total: selectedContacts.length, failed: 0 });
    
    try {
      const chatIds = selectedContacts.map(contact => contact.id);
      const result = await whatsappService.sendBulk(
        chatIds, 
        bulkMessage, 
        (progress) => setBulkProgress(progress)
      );
      
      if (result.success) {
        setBulkMessage('');
        setSelectedContacts([]);
        alert('Bulk messages sent successfully!');
      } else {
        setError('Some messages failed to send. Please check the results.');
      }
    } catch (error) {
      console.error('Error sending bulk messages:', error);
      setError('Failed to send bulk messages. Please try again.');
    } finally {
      setIsSendingBulk(false);
    }
  };

  const filteredChats = chats.filter(chat =>
    chat.customer_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    chat.phone?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    chat.whatsapp?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading WhatsApp...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-4 overflow-hidden">
        {/* Status Bar */}
        {(error || databaseError || !isConnected) && (
          <div className="fixed top-0 left-0 right-0 z-50 p-4">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-2">
                <div className="flex items-center">
                  <AlertTriangle className="mr-2" size={20} />
                  <span className="font-medium">WhatsApp Error:</span>
                  <span className="ml-2">{error}</span>
                </div>
              </div>
            )}
            {databaseError && (
              <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-2">
                <div className="flex items-center">
                  <AlertTriangle className="mr-2" size={20} />
                  <span className="font-medium">Database Issue:</span>
                  <span className="ml-2">{databaseError}</span>
                </div>
              </div>
            )}
            {!isConnected && !error && (
              <div className="bg-orange-100 border border-orange-400 text-orange-700 px-4 py-3 rounded mb-2">
                <div className="flex items-center">
                  <AlertTriangle className="mr-2" size={20} />
                  <span className="font-medium">Connection Status:</span>
                  <span className="ml-2">WhatsApp not connected. Please check your settings.</span>
                </div>
              </div>
            )}
          </div>
        )}

        <div className="max-w-7xl mx-auto h-full flex flex-col">
          {/* Header */}
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <h1 className="text-3xl font-bold text-gray-900">WhatsApp Business</h1>
              <div className="flex items-center space-x-2">
                <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${
                  connectionStatus === 'connected' 
                    ? 'bg-green-100 text-green-700' 
                    : connectionStatus === 'connecting'
                    ? 'bg-yellow-100 text-yellow-700'
                    : 'bg-red-100 text-red-700'
                }`}>
                  <div className={`w-2 h-2 rounded-full ${
                    connectionStatus === 'connected' ? 'bg-green-500' :
                    connectionStatus === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'
                  }`}></div>
                  <span className="capitalize">{connectionStatus}</span>
                </div>
                {autoRefreshEnabled && (
                  <div className="flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">
                    <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-pulse"></div>
                    <span>Auto-refresh</span>
                  </div>
                )}
                <button
                  onClick={() => setShowConfigModal(true)}
                  className="p-2 text-gray-600 hover:text-gray-900 hover:bg-white/50 rounded-lg transition-colors"
                  title="Configure WhatsApp"
                >
                  <Settings size={20} />
                </button>
                                 <button
                   onClick={refreshWhatsAppData}
                   disabled={loading}
                   className="p-2 text-gray-600 hover:text-gray-900 hover:bg-white/50 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                   title="Refresh WhatsApp Data"
                 >
                   <RefreshCw size={20} className={loading ? 'animate-spin' : ''} />
                 </button>
                                   <div className="relative auto-refresh-settings">
                    <button
                      onClick={() => setShowAutoRefreshSettings(!showAutoRefreshSettings)}
                      className={`p-2 rounded-lg transition-colors ${
                        autoRefreshEnabled 
                          ? 'text-green-600 hover:text-green-700 hover:bg-green-50' 
                          : 'text-gray-400 hover:text-gray-600 hover:bg-gray-50'
                      }`}
                      title={`Auto-refresh ${autoRefreshEnabled ? 'enabled' : 'disabled'} (${autoRefreshInterval / 1000}s)`}
                    >
                     <div className="relative">
                       <RefreshCw size={20} className={autoRefreshEnabled ? 'animate-pulse' : ''} />
                       {autoRefreshEnabled && (
                         <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full animate-ping"></div>
                       )}
                     </div>
                   </button>
                   
                   {/* Auto-refresh Settings Dropdown */}
                   {showAutoRefreshSettings && (
                     <div className="absolute right-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                       <div className="p-3">
                         <div className="flex items-center justify-between mb-3">
                           <span className="text-sm font-medium text-gray-700">Auto-refresh</span>
                           <button
                             onClick={() => setAutoRefreshEnabled(!autoRefreshEnabled)}
                             className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                               autoRefreshEnabled ? 'bg-green-600' : 'bg-gray-300'
                             }`}
                           >
                             <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                               autoRefreshEnabled ? 'translate-x-6' : 'translate-x-1'
                             }`} />
                           </button>
                         </div>
                         
                         <div className="space-y-2">
                           <label className="text-xs text-gray-600">Interval:</label>
                           <select
                             value={autoRefreshInterval}
                             onChange={(e) => setAutoRefreshInterval(Number(e.target.value))}
                             className="w-full text-sm border border-gray-300 rounded px-2 py-1"
                           >
                             <option value={15000}>15 seconds</option>
                             <option value={30000}>30 seconds</option>
                             <option value={60000}>1 minute</option>
                             <option value={120000}>2 minutes</option>
                             <option value={300000}>5 minutes</option>
                           </select>
                         </div>
                       </div>
                     </div>
                   )}
                 </div>
              </div>
            </div>
            <p className="text-gray-600">Manage your WhatsApp communications</p>
            
            {/* Main Navigation Tabs */}
            <div className="mt-4 mb-4">
              <div className="flex space-x-1 bg-white/80 backdrop-blur-sm rounded-lg p-1 shadow-sm overflow-x-auto">
                <button
                  onClick={() => setMainTab('chat')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'chat' 
                      ? 'bg-blue-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <MessageCircle size={20} />
                  <span>Chat</span>
                </button>
                <button
                  onClick={() => setMainTab('bulk')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'bulk' 
                      ? 'bg-purple-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <Megaphone size={20} />
                  <span>Bulk Messages</span>
                </button>
                <button
                  onClick={() => setMainTab('analytics')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'analytics' 
                      ? 'bg-green-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <BarChart3 size={20} />
                  <span>Analytics</span>
                </button>
                <button
                  onClick={() => setMainTab('campaigns')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'campaigns' 
                      ? 'bg-orange-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <Target size={20} />
                  <span>Campaigns</span>
                </button>
                <button
                  onClick={() => setMainTab('autoresponder')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'autoresponder' 
                      ? 'bg-indigo-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <Zap size={20} />
                  <span>Autoresponder</span>
                </button>
                <button
                  onClick={() => setMainTab('assignment')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'assignment' 
                      ? 'bg-pink-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <UserCheck size={20} />
                  <span>Assignment</span>
                </button>
                <button
                  onClick={() => setMainTab('scheduled')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all whitespace-nowrap ${
                    mainTab === 'scheduled' 
                      ? 'bg-teal-500 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <Calendar size={20} />
                  <span>Scheduled</span>
                </button>
              </div>
            </div>
          </div>

          {/* Main Content - Fixed Card Layout */}
          <div className="flex-1 min-h-0">
            {mainTab === 'chat' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                {/* Chats Sidebar - Fixed Width */}
                <div className="col-span-4">
                  <GlassCard className="h-full flex flex-col">
                <div className="flex border-b border-gray-200">
                  <button
                    onClick={() => setActiveTab('chats')}
                    className={`flex-1 px-4 py-3 transition-colors ${
                      activeTab === 'chats'
                        ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center justify-center">
                      <MessageCircle size={20} />
                    </div>
                  </button>
                  <button
                    onClick={() => setActiveTab('contacts')}
                    className={`flex-1 px-4 py-3 transition-colors ${
                      activeTab === 'contacts'
                        ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center justify-center">
                      <Users size={20} />
                    </div>
                  </button>
                  <button
                    onClick={() => setActiveTab('more')}
                    className={`flex-1 px-4 py-3 transition-colors ${
                      activeTab === 'more'
                        ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center justify-center">
                      <MoreVertical size={20} />
                    </div>
                  </button>
                </div>

                <div className="p-4 border-b border-gray-200">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="text"
                      placeholder="Search chats..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                <div className="flex-1 overflow-y-auto">
                  {activeTab === 'chats' && (
                    <div className="space-y-1 p-2">
                      {filteredChats.map((chat) => (
                        <div
                          key={chat.id}
                          onClick={() => setSelectedChat(chat)}
                          className={`p-3 rounded-lg cursor-pointer transition-colors ${
                            selectedChat?.id === chat.id
                              ? 'bg-blue-100 border border-blue-300'
                              : 'hover:bg-gray-50'
                          }`}
                        >
                          <div className="flex items-center space-x-3">
                            <div className="relative">
                              <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                                {chat.profile_image ? (
                                  <img
                                    src={chat.profile_image}
                                    alt={chat.customer_name}
                                    className="w-12 h-12 rounded-full object-cover"
                                  />
                                ) : (
                                  <UserIcon size={24} className="text-gray-600" />
                                )}
                              </div>
                              {chat.is_online && (
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full"></div>
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center justify-between">
                                <h3 className="font-medium text-gray-900 truncate">
                                  {chat.customer_name}
                                </h3>
                                <span className="text-xs text-gray-500">
                                  {formatTime(chat.last_message_time)}
                                </span>
                              </div>
                              <p className="text-sm text-gray-600 truncate">
                                {chat.last_message}
                              </p>
                              {chat.unread_count > 0 && (
                                <div className="flex items-center justify-between mt-1">
                                  <span className="text-xs text-gray-500">
                                    {chat.phone || chat.whatsapp}
                                  </span>
                                  <span className="bg-blue-500 text-white text-xs rounded-full px-2 py-1">
                                    {chat.unread_count}
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {activeTab === 'contacts' && (
                    <div className="space-y-1 p-2">
                      {contacts.map((contact) => (
                        <div
                          key={contact.id}
                          onClick={() => {
                            const chat = chats.find(c => c.customer_id === contact.id);
                            if (chat) {
                              setSelectedChat(chat);
                            } else {
                              // Create new chat
                              const newChat: Chat = {
                                id: `temp_${contact.id}`,
                                customer_id: contact.id,
                                customer_name: contact.name || contact.phone || contact.whatsapp || 'Unknown',
                                last_message: 'Start a conversation',
                                last_message_time: new Date().toISOString(),
                                unread_count: 0,
                                is_online: false,
                                phone: contact.phone,
                                whatsapp: contact.whatsapp,
                                profile_image: contact.profile_image
                              };
                              setSelectedChat(newChat);
                            }
                          }}
                          className="p-3 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                        >
                          <div className="flex items-center space-x-3">
                            <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                              {contact.profile_image ? (
                                <img
                                  src={contact.profile_image}
                                  alt={contact.name}
                                  className="w-12 h-12 rounded-full object-cover"
                                />
                              ) : (
                                <UserIcon size={24} className="text-gray-600" />
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-medium text-gray-900 truncate">
                                {contact.name || contact.phone || contact.whatsapp}
                              </h3>
                              <p className="text-sm text-gray-600 truncate">
                                {contact.phone || contact.whatsapp}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {activeTab === 'more' && (
                    <div className="p-4 space-y-4">
                      <div className="space-y-2">
                        <h3 className="font-medium text-gray-900">Quick Actions</h3>
                        <button className="w-full text-left p-2 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-2">
                            <Archive size={20} className="text-gray-600" />
                            <span>Archived Chats</span>
                          </div>
                        </button>
                        <button className="w-full text-left p-2 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-2">
                            <Settings size={20} className="text-gray-600" />
                            <span>Settings</span>
                          </div>
                        </button>
                        <button className="w-full text-left p-2 rounded-lg hover:bg-gray-50 transition-colors">
                          <div className="flex items-center space-x-2">
                            <HelpCircle size={20} className="text-gray-600" />
                            <span>Help</span>
                          </div>
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </GlassCard>

                {/* Chat Area - Fixed Width */}
                <div className="col-span-8">
                  <GlassCard className="h-full flex flex-col">
                  {selectedChat ? (
                    <>
                      {/* Chat Header */}
                      <div className="flex items-center justify-between p-4 border-b border-gray-200">
                        <div className="flex items-center space-x-3">
                          <div className="relative">
                            <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                              {selectedChat.profile_image ? (
                                <img
                                  src={selectedChat.profile_image}
                                  alt={selectedChat.customer_name}
                                  className="w-10 h-10 rounded-full object-cover"
                                />
                              ) : (
                                <UserIcon size={20} className="text-gray-600" />
                              )}
                            </div>
                            {selectedChat.is_online && (
                              <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full"></div>
                            )}
                          </div>
                          <div>
                            <h2 className="font-medium text-gray-900">
                              {selectedChat.customer_name}
                            </h2>
                            <p className="text-sm text-gray-500">
                              {selectedChat.phone || selectedChat.whatsapp}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                            <Phone size={20} />
                          </button>
                          <button className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                            <MoreVertical size={20} />
                          </button>
                        </div>
                      </div>

                      {/* Messages */}
                      <div className="flex-1 p-4 overflow-y-auto">
                        <div className="space-y-4" ref={messagesEndRef}>
                          {messages.map((message) => (
                            <div
                              key={message.id}
                              className={`flex ${message.direction === 'outbound' ? 'justify-end' : 'justify-start'}`}
                            >
                              <div
                                className={`max-w-xs px-4 py-2 rounded-lg ${
                                  message.direction === 'outbound'
                                    ? 'bg-blue-500 text-white'
                                    : 'bg-gray-200 text-gray-900'
                                }`}
                              >
                                {message.message_type === 'text' && (
                                  <p className="text-sm">{message.content || 'Empty message'}</p>
                                )}
                                {message.message_type === 'image' && (
                                  <div>
                                    <img
                                      src={message.media_url}
                                      alt="Image"
                                      className="w-full rounded mb-2"
                                      onError={(e) => {
                                        e.currentTarget.style.display = 'none';
                                      }}
                                    />
                                    {message.content && (
                                      <p className="text-sm">{message.content}</p>
                                    )}
                                  </div>
                                )}
                                {message.message_type === 'document' && (
                                  <div className="flex items-center space-x-2">
                                    <File size={20} />
                                    <span className="text-sm">{message.media_name || 'Document'}</span>
                                  </div>
                                )}
                                <div className={`flex items-center justify-end mt-1 text-xs ${
                                  message.direction === 'outbound' ? 'text-blue-100' : 'text-gray-500'
                                }`}>
                                  <span>{formatTime(message.sent_at)}</span>
                                  {message.direction === 'outbound' && (
                                    <div className="ml-1">
                                      {message.status === 'sent' && <Check size={12} />}
                                      {message.status === 'delivered' && <CheckCheck size={12} />}
                                      {message.status === 'read' && <CheckCheck size={12} className="text-blue-300" />}
                                      {message.status === 'failed' && <AlertTriangle size={12} className="text-red-300" />}
                                    </div>
                                  )}
                                </div>
                                {message.error_message && (
                                  <div className="text-xs text-red-300 mt-1">
                                    {message.error_message}
                                  </div>
                                )}
                              </div>
                            </div>
                          ))}
                          <div ref={messagesEndRef} />
                        </div>
                      </div>

                      {/* Message Input */}
                      <div className="p-4 border-t border-gray-200">
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => setShowFileUpload(!showFileUpload)}
                            className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                          >
                            <Paperclip size={20} />
                          </button>
                          <button
                            onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                            className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                          >
                            <Smile size={20} />
                          </button>
                          <div className="flex-1">
                            <input
                              type="text"
                              value={newMessage}
                              onChange={(e) => setNewMessage(e.target.value)}
                              onKeyPress={(e) => {
                                if (e.key === 'Enter' && !e.shiftKey) {
                                  e.preventDefault();
                                  handleSendMessage();
                                }
                              }}
                              placeholder="Type a message..."
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              disabled={!selectedChat}
                            />
                          </div>
                          <button
                            onClick={handleSendMessage}
                            disabled={!newMessage.trim() || !selectedChat}
                            className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                          >
                            <Send size={20} />
                          </button>
                        </div>
                        
                        {/* File Upload */}
                        {showFileUpload && (
                          <div className="mt-4 p-4 border border-gray-300 rounded-lg">
                            <div className="flex items-center space-x-4">
                              <button
                                onClick={() => document.getElementById('file-upload')?.click()}
                                className="flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                              >
                                <Upload size={20} />
                                <span>Upload File</span>
                              </button>
                              <input
                                id="file-upload"
                                type="file"
                                accept="image/*,video/*,audio/*,.pdf,.doc,.docx"
                                onChange={(e) => {
                                  const file = e.target.files?.[0];
                                  if (file) {
                                    setSelectedFile(file);
                                    if (file.type.startsWith('image/')) {
                                      const reader = new FileReader();
                                      reader.onload = (e) => setFilePreview(e.target?.result as string);
                                      reader.readAsDataURL(file);
                                    }
                                  }
                                }}
                                className="hidden"
                              />
                              {selectedFile && (
                                <div className="flex items-center space-x-2">
                                  <span className="text-sm text-gray-600">{selectedFile.name}</span>
                                  <button
                                    onClick={() => handleFileUpload(selectedFile)}
                                    disabled={isUploading}
                                    className="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 disabled:opacity-50 transition-colors"
                                  >
                                    {isUploading ? 'Uploading...' : 'Send'}
                                  </button>
                                </div>
                              )}
                            </div>
                            {filePreview && (
                              <div className="mt-2">
                                <img src={filePreview} alt="Preview" className="max-w-xs rounded" />
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </>
                  ) : (
                    <div className="flex-1 flex items-center justify-center">
                      <div className="text-center">
                        <MessageCircle size={64} className="text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Select a chat</h3>
                        <p className="text-gray-600">Choose a conversation to start messaging</p>
                      </div>
                    </div>
                  )}
                </GlassCard>
              </div>
            </div>
          )}

          {/* Bulk Messages Tab */}
            {mainTab === 'bulk' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-6">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <Megaphone size={24} className="mr-3 text-purple-600" />
                      Bulk Messages
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h3 className="text-lg font-semibold mb-4">Select Contacts</h3>
                        <div className="space-y-2 max-h-64 overflow-y-auto">
                          {contacts.map((contact) => (
                            <label key={contact.id} className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 cursor-pointer">
                              <input
                                type="checkbox"
                                checked={selectedContacts.some(c => c.id === contact.id)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setSelectedContacts(prev => [...prev, contact]);
                                  } else {
                                    setSelectedContacts(prev => prev.filter(c => c.id !== contact.id));
                                  }
                                }}
                                className="rounded"
                              />
                              <span className="font-medium">{contact.name}</span>
                              <span className="text-sm text-gray-500">({contact.whatsapp || contact.phone})</span>
                            </label>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h3 className="text-lg font-semibold mb-4">Message</h3>
                        <textarea
                          value={bulkMessage}
                          onChange={(e) => setBulkMessage(e.target.value)}
                          placeholder="Enter your bulk message here..."
                          className="w-full h-32 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />

                        <div className="mt-4">
                          <button
                            onClick={handleBulkSend}
                            disabled={selectedContacts.length === 0 || !bulkMessage.trim() || isSendingBulk}
                            className="w-full px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
                          >
                            {isSendingBulk ? `Sending... (${bulkProgress.sent}/${bulkProgress.total})` : 'Send Bulk Message'}
                          </button>
                        </div>

                        {isSendingBulk && (
                          <div className="mt-4">
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                                style={{ width: `${(bulkProgress.sent / bulkProgress.total) * 100}%` }}
                              ></div>
                            </div>
                            <p className="text-sm text-gray-600 mt-2">
                              Sent: {bulkProgress.sent} | Failed: {bulkProgress.failed} | Total: {bulkProgress.total}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}

            {/* Analytics Tab */}
            {mainTab === 'analytics' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-12">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <BarChart3 size={24} className="mr-3 text-green-600" />
                      Analytics Dashboard
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                            <div className="bg-blue-50 p-4 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-blue-600">Total Messages</p>
                            <p className="text-2xl font-bold text-blue-900">{analyticsData.totalMessages}</p>
                          </div>
                          <MessageCircle size={24} className="text-blue-600" />
                        </div>
                      </div>

                      <div className="bg-green-50 p-4 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-green-600">This Week</p>
                            <p className="text-2xl font-bold text-green-900">{analyticsData.messagesThisWeek}</p>
                          </div>
                          <TrendingUp size={24} className="text-green-600" />
                        </div>
                      </div>

                      <div className="bg-purple-50 p-4 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-purple-600">Response Rate</p>
                            <p className="text-2xl font-bold text-purple-900">{analyticsData.responseRate}%</p>
                          </div>
                          <CheckCircle size={24} className="text-purple-600" />
                        </div>
                      </div>

                      <div className="bg-orange-50 p-4 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-orange-600">Active Chats</p>
                            <p className="text-2xl font-bold text-orange-900">{analyticsData.activeChats}</p>
                          </div>
                          <Users size={24} className="text-orange-600" />
                        </div>
                      </div>
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}

            {/* Campaigns Tab */}
            {mainTab === 'campaigns' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-12">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <Target size={24} className="mr-3 text-orange-600" />
                      Campaigns
                    </h2>
                    
                    <div className="flex justify-between items-center mb-6">
                      <p className="text-gray-600">Manage your WhatsApp campaigns</p>
                      <button
                        onClick={() => setShowCreateCampaign(true)}
                        className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600"
                      >
                        Create Campaign
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {campaigns.map((campaign) => (
                        <div key={campaign.id} className="border border-gray-200 rounded-lg p-4">
                          <h3 className="font-semibold">{campaign.name}</h3>
                          <p className="text-gray-600 text-sm">{campaign.message}</p>
                          <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                            <span>Target: {campaign.target_audience}</span>
                            <span>Scheduled: {new Date(campaign.scheduled_date).toLocaleDateString()}</span>
                          </div>
                        </div>
                      ))}
                      
                      {campaigns.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                          <Target size={48} className="mx-auto mb-4 text-gray-300" />
                          <p>No campaigns yet. Create your first campaign to get started.</p>
                        </div>
                      )}
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}

            {/* Autoresponder Tab */}
            {mainTab === 'autoresponder' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-12">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <Zap size={24} className="mr-3 text-indigo-600" />
                      Autoresponders
                    </h2>
                    
                    <div className="flex justify-between items-center mb-6">
                      <p className="text-gray-600">Set up automatic responses to common messages</p>
                      <button
                        onClick={() => setShowCreateAutoresponder(true)}
                        className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600"
                      >
                        Add Autoresponder
                      </button>
                    </div>

                    <div className="space-y-4">
                      {autoresponders.map((autoresponder) => (
                        <div key={autoresponder.id} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-center justify-between">
                            <div>
                              <h3 className="font-semibold">"{autoresponder.keyword}"</h3>
                              <p className="text-gray-600 text-sm">{autoresponder.response}</p>
                              <span className="text-xs text-gray-500">Match: {autoresponder.match_type}</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className={`px-2 py-1 rounded text-xs ${
                                autoresponder.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                              }`}>
                                {autoresponder.is_active ? 'Active' : 'Inactive'}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}

            {/* Assignment Tab */}
            {mainTab === 'assignment' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-12">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <UserCheck size={24} className="mr-3 text-teal-600" />
                      Chat Assignment
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h3 className="text-lg font-semibold mb-4">Available Users</h3>
                        <div className="space-y-2">
                          {users.map((user) => (
                            <div key={user.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                              <div>
                                <p className="font-medium">{user.name}</p>
                                <p className="text-sm text-gray-500">{user.role}</p>
                              </div>
                              <button className="px-3 py-1 bg-teal-500 text-white rounded text-sm hover:bg-teal-600">
                                Assign
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h3 className="text-lg font-semibold mb-4">Active Chats</h3>
                        <div className="space-y-2">
                          {chats.slice(0, 5).map((chat) => (
                            <div key={chat.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                              <div>
                                <p className="font-medium">{chat.customer_name}</p>
                                <p className="text-sm text-gray-500">{chat.last_message}</p>
                              </div>
                              <span className="text-xs text-gray-500">Unassigned</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}

            {/* Scheduled Messages Tab */}
            {mainTab === 'scheduled' && (
              <div className="grid grid-cols-12 gap-4 h-full">
                <div className="col-span-12">
                  <GlassCard className="h-full p-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                      <Archive size={24} className="mr-3 text-pink-600" />
                      Scheduled Messages
                    </h2>

                    <div className="flex justify-between items-center mb-6">
                      <p className="text-gray-600">Schedule messages to be sent at specific times</p>
                      <button
                        onClick={() => setShowCreateScheduled(true)}
                        className="px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600"
                      >
                        Schedule Message
                      </button>
                    </div>

                    <div className="space-y-4">
                      {scheduledMessages.map((message) => (
                        <div key={message.id} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-center justify-between">
                            <div>
                              <h3 className="font-semibold">{message.content}</h3>
                              <p className="text-sm text-gray-500">
                                Scheduled for: {new Date(message.scheduled_for).toLocaleString()}
                              </p>
                              <p className="text-xs text-gray-400">Type: {message.type}</p>
                            </div>
                            <div className="flex space-x-2">
                              <button className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600">
                                Send Now
                              </button>
                              <button className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600">
                                Cancel
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                      
                      {scheduledMessages.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                          <Archive size={48} className="mx-auto mb-4 text-gray-300" />
                          <p>No scheduled messages. Schedule your first message to get started.</p>
                        </div>
                      )}
                    </div>
                  </GlassCard>
                </div>
              </div>
            )}
        </div>
      </div>

      {/* WhatsApp Configuration Modal */}
      <WhatsAppConfigModal
        isOpen={showConfigModal}
        onClose={() => setShowConfigModal(false)}
        onConfigSaved={handleConfigSaved}
      />

      {/* Rate Limit Monitor */}
      <RateLimitMonitor />
    </>
  );
};

export default WhatsAppWebPage;
